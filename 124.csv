sample_id,class_name,method_name,code_sample,label
82657,FilterExecutor,execute,"class FilterExecutor {
        public void execute(TridentTuple tuple, TridentCollector collector) {
            if (filter.isKeep(tuple)) {
                collector.emit(null);
            }
        }
}

class Filter {
    public void isKeep() {}
}

class Collector {
    public void emit() {}
}",0
82658,FilterExecutor,prepare,"class FilterExecutor {
        public void prepare(Map<String, Object> conf, TridentOperationContext context) {
            filter.prepare(conf, context);
        }
}

class Filter {
    public void prepare() {}
}",1
82659,FilterExecutor,cleanup,"class FilterExecutor {
        public void cleanup() {
            filter.cleanup();
        }
}

class Filter {
    public void cleanup() {}
}",1
82660,FlatMapFunctionExecutor,execute,"class FlatMapFunctionExecutor {
        public void execute(TridentTuple tuple, TridentCollector collector) {
            for (Values values : function.execute(tuple)) {
                collector.emit(values);
            }
        }
}

class Function {
    public void execute() {}
}

class Collector {
    public void emit() {}
}",1
82661,GroupCollector,emit,"class GroupCollector {
        public void emit(List<Object> values) {
            List[] delegates = new List[2];
            delegates[0] = currGroup;
            delegates[1] = values;
            collector.emit(factory.create(delegates));
        }
}

class Collector {
    public void emit() {}
}

class Factory {
    public void create() {}
}",1
82662,GroupCollector,flush,"class GroupCollector {
        public void flush() {
            collector.flush();
        }
}

class Collector {
    public void flush() {}
}",1
82663,GroupCollector,reportError,"class GroupCollector {
        public void reportError(Throwable t) {
            collector.reportError(t);
        }
}

class Collector {
    public void reportError() {}
}",1
82664,GroupedAggregator,prepare,"class GroupedAggregator {
        public void prepare(Map<String, Object> conf, TridentOperationContext context) {
            inputFactory = context.makeProjectionFactory(inFields);
            groupFactory = context.makeProjectionFactory(groupFields);
            agg.prepare(conf, new TridentOperationContext(context, inputFactory));
        }
}

class Context {
    public void makeProjectionFactory() {}
}",0
82665,GroupedAggregator,aggregate,"class GroupedAggregator {
        public void aggregate(Object[] arr, TridentTuple tuple, TridentCollector collector) {
            GroupCollector groupColl = (GroupCollector) arr[0];
            Map<List, Object> val = (Map) arr[1];
            TridentTuple group = groupFactory.create((TridentTupleView) tuple);
            TridentTuple input = inputFactory.create((TridentTupleView) tuple);
            Object curr;
            if (!val.containsKey(group)) {
                curr = agg.init(arr[2], groupColl);
                val.put((List) group, curr);
            } else {
                curr = val.get(group);
            }
            groupColl.currGroup = group;
            agg.aggregate(curr, input, groupColl);
        }
}

class GroupFactory {
    public void create() {}
}

class InputFactory {
    public void create() {}
}

class Val {
    public void put() {}
    public void get() {}
    public void containsKey() {}
}",0
82666,GroupedAggregator,complete,"class GroupedAggregator {
        public void complete(Object[] arr, TridentCollector collector) {
            Map<List, Object> val = (Map) arr[1];
            GroupCollector groupColl = (GroupCollector) arr[0];
            for (Entry<List, Object> e : val.entrySet()) {
                groupColl.currGroup = e.getKey();
                agg.complete(e.getValue(), groupColl);
            }
        }
}

class Val {
    public void entrySet() {}
}

class e {
    public void getKey() {}
    public void getValue() {}
}",0
82667,IdentityMultiReducer,execute,"class IdentityMultiReducer {
        public void execute(T state, int streamIndex, TridentTuple input, TridentCollector collector) {
            collector.emit(input);
        }
}

class Collector {
    public void emit() {}
}",0
82668,IndexHashBatchToPartition,partitionIndex,"class IndexHashBatchToPartition {
        public int partitionIndex(Object batchId, int numPartitions) {
            return IndexHashGrouping.objectToIndex(batchId, numPartitions);
        }
}

class IndexHashGrouping {
        public static int objectToIndex(Object val, int numPartitions) {
            if (val == null) {
                return 0;
            }
            return Utils.toPositive(val.hashCode()) % numPartitions;
        }
}",1
82669,JoinerMultiReducer,init,"class JoinerMultiReducer {
        public JoinState init(TridentCollector collector, TridentTuple group) {
            return new JoinState(types.size(), group);
        }
}

class Types {
    public void size() {}
}",0
82670,JoinerMultiReducer,complete,"class JoinerMultiReducer {
        public void complete(JoinState state, TridentTuple group, TridentCollector collector) {
            List<List>[] sides = state.sides;
            boolean wasEmpty = state.numSidesReceived < sides.length;
            for (int i = 0; i < sides.length; i++) {
                if (sides[i].isEmpty() && types.get(i) == JoinType.OUTER) {
                    state.numSidesReceived++;
                    sides[i].add(makeNullList(sideFields.get(i).size()));
                }
            }
            if (wasEmpty && state.numSidesReceived == sides.length) {
                emitCrossJoin(state, collector, -1, null);
            }
        }
}

class Types {
    public void get() {}
}",0
82671,JoinerMultiReducer,emitCrossJoin,"class JoinerMultiReducer {
        private void emitCrossJoin(JoinState state, TridentCollector collector, int overrideIndex, TridentTuple overrideTuple) {
            List<List>[] sides = state.sides;
            int[] indices = state.indices;
            for (int i = 0; i < indices.length; i++) {
                indices[i] = 0;
            }
            boolean keepGoing = true;
            while (keepGoing) {
                List[] combined = new List[sides.length + 1];
                combined[0] = state.group;
                for (int i = 0; i < sides.length; i++) {
                    if (i == overrideIndex) {
                        combined[i + 1] = overrideTuple;
                    } else {
                        combined[i + 1] = sides[i].get(indices[i]);
                    }
                }
                collector.emit(factory.create(combined));
                keepGoing = increment(sides, indices, indices.length - 1, overrideIndex);
            }
        }
}

class Collector {
    public void emit() {}
}

class Factory {
    public void create() {}
}",1
82672,MapFunctionExecutor,execute,"class MapFunctionExecutor {
        public void execute(TridentTuple tuple, TridentCollector collector) {
            collector.emit(function.execute(tuple));
        }
}

class Collector {
    public void emit() {}
}

class Function {
    public void execute() {}
}",1
82673,PreservingFieldsOrderJoinerMultiReducer,init,"class PreservingFieldsOrderJoinerMultiReducer {
        public JoinState init(TridentCollector collector, TridentTuple group) {
            return new JoinState(types.size(), group);
        }
}

class Types {
    public void size() {}
}",0
82674,PreservingFieldsOrderJoinerMultiReducer,complete,"class PreservingFieldsOrderJoinerMultiReducer {
        public void complete(JoinState state, TridentTuple group, TridentCollector collector) {
            List<List>[] sides = state.sides;
            boolean wasEmpty = state.numSidesReceived < sides.length;
            for (int i = 0; i < sides.length; i++) {
                if (sides[i].isEmpty() && types.get(i) == JoinType.OUTER) {
                    state.numSidesReceived++;
                    sides[i].add(null);
                }
            }
            if (wasEmpty && state.numSidesReceived == sides.length) {
                emitCrossJoin(state, collector, -1, null);
            }
        }
}

class Types {
    public void get() {}
}",0
82675,PreservingFieldsOrderJoinerMultiReducer,emitCrossJoin,"class PreservingFieldsOrderJoinerMultiReducer {
        private void emitCrossJoin(JoinState state, TridentCollector collector, int overrideIndex, TridentTuple overrideTuple) {
            List<List>[] sides = state.sides;
            int[] indices = state.indices;
            for (int i = 0; i < indices.length; i++) {
                indices[i] = 0;
            }
            boolean keepGoing = true;
            while (keepGoing) {
                List[] combined = new List[sides.length];
                for (int i = 0; i < sides.length; i++) {
                    List<Object> values = buildValuesForStream(state, overrideIndex, overrideTuple, sides, indices, combined, i);
                    combined[i] = values;
                }
                collector.emit(factory.create(combined));
                keepGoing = increment(sides, indices, indices.length - 1, overrideIndex);
            }
        }
}

class Collector {
    public void emit() {}
}

class Factory {
    public void create() {}
}",1
82676,PreservingFieldsOrderJoinerMultiReducer,buildValuesForStream,"class PreservingFieldsOrderJoinerMultiReducer {
        private List<Object> buildValuesForStream(JoinState state, int overrideIndex, TridentTuple overrideTuple, List<List>[] sides,
                                                  int[] indices, List[] combined, int streamIdx) {
            List sideValues;
            if (streamIdx == overrideIndex) {
                sideValues = overrideTuple;
            } else {
                sideValues = sides[streamIdx].get(indices[streamIdx]);
            }
            Fields originFields = this.originFields.get(streamIdx);
            if (sideValues == null) {
                return makeNullList(originFields.size());
            } else {
                List<Object> ret = new ArrayList<>(originFields.size());
                Fields sideFields = this.sideFields.get(streamIdx);
                Fields joinFields = joiningFields.get(streamIdx);
                int sideIdx = 0;
                for (String field : originFields) {
                    if (sideFields.contains(field)) {
                        ret.add(sideValues.get(sideIdx++));
                    } else {
                        ret.add(state.group.get(joinFields.fieldIndex(field)));
                    }
                }
                return ret;
            }
        }
}

class State {
    public void get() {}
}",1
82677,ReducerAggregatorImpl,complete,"class ReducerAggregatorImpl {
        public void complete(Result val, TridentCollector collector) {
            collector.emit(new Values(val.obj));
        }
}

class Collector {
    public void emit() {}
}",1
82678,ReducerAggStateUpdater,updateState,"class ReducerAggStateUpdater {
        public void updateState(Snapshottable state, List<TridentTuple> tuples, TridentCollector collector) {
            Object newVal = state.update(new ReducerValueUpdater(agg, tuples));
            collector.emit(new Values(newVal));
        }
}

class State {
    public void update() {}
}

class Collector {
    public void emit() {}
}",1
82679,SingleEmitAggregator,prepare,"class SingleEmitAggregator {
        public void prepare(Map<String, Object> conf, TridentOperationContext context) {
            agg.prepare(conf, context);
            this.myPartitionIndex = context.getPartitionIndex();
            this.totalPartitions = context.numPartitions();
        }
}

class Context {
    public void numPartitions() {}
    public void getPartitionIndex() {}
}",0
82680,CombinerAggregator,of,"class CombinerAggregator {
        static <T, R> CombinerAggregator<T, R, R> of(R initialValue,
                                                     BiFunction<? super R, ? super T, ? extends R> accumulator,
                                                     BiFunction<? super R, ? super R, ? extends R> combiner) {
            return new CombinerAggregator<T, R, R>() {
                public R init() {
                    return initialValue;
                }
                public R apply(R aggregate, T value) {
                    return accumulator.apply(aggregate, value);
                }
                public R merge(R accum1, R accum2) {
                    return combiner.apply(accum1, accum2);
                }
                public R result(R accum) {
                    return accum;
                }
            };
        }
}

class Accumulator {
    public void apply() {}
}

class Combiner {
    public void apply() {}
}",0
82681,PairValueJoiner,apply,"class PairValueJoiner {
        public Pair<V1, V2> apply(V1 value1, V2 value2) {
            return Pair.of(value1, value2);
        }
}

class Pair {
    public void of() {}
}",0
82682,BaseProcessor,punctuate,"class BaseProcessor {
        public void punctuate(String stream) {
            if ((stream == null) || shouldPunctuate(stream)) {
                finish();
                context.forward(PUNCTUATION);
                punctuationState.clear();
            }
        }
}

class Context {
    public void forward() {}
}",1
82683,BaseProcessor,mayBeForwardAggUpdate,"class BaseProcessor {
        protected final <R> void mayBeForwardAggUpdate(Supplier<R> result) {
            if (!context.isWindowed()) {
                context.forward(result.get());
            }
        }
}

class Context {
    public void isWindowed() {}
    public void forward() {}
}

class Result {
    public void get() {}
}",1
82684,BaseProcessor,shouldPunctuate,"class BaseProcessor {
        private boolean shouldPunctuate(String parentStream) {
            punctuationState.add(parentStream);
            return punctuationState.equals(context.getWindowedParentStreams());
        }
}

class Context {
    public void getWindowedParentStreams() {}
}",0
82685,BranchProcessor,execute,"class BranchProcessor {
        public void execute(T input) {
            for (Map.Entry<Predicate<? super T>, String> entry : predicateToStream.entrySet()) {
                if (entry.getKey().test(input)) {
                    context.forward(input, entry.getValue());
                    break;
                }
            }
        }
}

class Entry {
    public void getKey() {}
    public void getValue() {}
}

class Context {
    public void forward() {}
}",1
82686,ChainedProcessorContext,forward,"class ChainedProcessorContext {
        public void forward(T input, String stream) {
            for (ProcessorContext context : contexts) {
                context.forward(input, stream);
            }
        }
}

class Context {
    public void forward() {}
}",0
82687,FilterProcessor,execute,"class FilterProcessor {
        public void execute(T input) {
            if (predicate.test(input)) {
                context.forward(input);
            }
        }
}

class Predicate {
    public void test() {}
}

class Context {
    public void forward() {}
}",1
82688,FlatMapProcessor,execute,"class FlatMapProcessor {
        public void execute(T input) {
            for (R res : function.apply(input)) {
                context.forward(res);
            }
        }
}

class Function {
        R apply(T t) throws Exception;
}

class Context {
    public void forward() {}
}",1
82689,FlatMapValuesProcessor,execute,"class FlatMapValuesProcessor {
        protected void execute(Pair<K, V> input) {
            for (R res : function.apply(input.getSecond())) {
                context.forward(Pair.of(input.getFirst(), res));
            }
        }
}

class Function {
        R apply(T t) throws Exception;
}

class Input {
    public void getFirst() {}
    public void getSecond() {}
}

class Context {
    public void forward() {}
}

class Pair {
    public void of() {}
}",1
82690,ForEachProcessor,execute,"class ForEachProcessor {
        public void execute(T input) {
            consumer.accept(input);
        }
}

class Consumer {
    public void accept() {}
}",0
82691,JoinProcessor,execute,"class JoinProcessor {
        public void execute(Pair<K, ?> input, String sourceStream) {
            K key = input.getFirst();
            if (sourceStream.equals(leftStream)) {
                V1 val = (V1) input.getSecond();
                Pair<K, V1> pair = Pair.of(key, val);
                leftRows.add(pair);
                if (!context.isWindowed()) {
                    joinAndForward(Collections.singletonList(pair), rightRows);
                }
            } else if (sourceStream.equals(rightStream)) {
                V2 val = (V2) input.getSecond();
                Pair<K, V2> pair = Pair.of(key, val);
                rightRows.add(pair);
                if (!context.isWindowed()) {
                    joinAndForward(leftRows, Collections.singletonList(pair));
                }
            }
        }
}

class Input {
    public void getFirst() {}
    public void getSecond() {}
}

class Pair {
    public void of() {}
}

class Context {
    public void isWindowed() {}
}",1
82692,JoinProcessor,joinAndForward,"class JoinProcessor {
        private void joinAndForward(List<Pair<K, V1>> leftRows, List<Pair<K, V2>> rightRows) {
            if (leftRows.size() < rightRows.size()) {
                for (Tuple3<K, V1, V2> res : join(getJoinTable(leftRows), rightRows, leftType, rightType)) {
                    context.forward(Pair.of(res.value1, valueJoiner.apply(res.value2, res.value3)));
                }
            } else {
                for (Tuple3<K, V2, V1> res : join(getJoinTable(rightRows), leftRows, rightType, leftType)) {
                    context.forward(Pair.of(res.value1, valueJoiner.apply(res.value3, res.value2)));
                }
            }
        }
}

class Context {
    public void forward() {}
}

class Pair {
    public void of() {}
}

class ValueJoiner {
        VR apply(final V1 value1, final V2 value2);
}",1
82693,JoinProcessor,join,"class JoinProcessor {
        private <T1, T2> List<Tuple3<K, T1, T2>> join(Multimap<K, T1> tab, List<Pair<K, T2>> rows,
                                                      JoinType leftType, JoinType rightType) {
            List<Tuple3<K, T1, T2>> res = new ArrayList<>();
            for (Pair<K, T2> row : rows) {
                K key = row.getFirst();
                Collection<T1> values = tab.removeAll(key);
                if (values.isEmpty()) {
                    if (rightType == JoinType.OUTER) {
                        res.add(new Tuple3<>(row.getFirst(), null, row.getSecond()));
                    }
                } else {
                    for (T1 mapValue : values) {
                        res.add(new Tuple3<>(row.getFirst(), mapValue, row.getSecond()));
                    }
                }
            }
            if (leftType == JoinType.OUTER) {
                for (Map.Entry<K, T1> row : tab.entries()) {
                    res.add(new Tuple3<>(row.getKey(), row.getValue(), null));
                }
            }
            return res;
        }
}

class Row {
    public void getFirst() {}
    public void getSecond() {}
    public void getKey() {}
    public void getValue() {}
}",0
82694,MapProcessor,execute,"class MapProcessor {
        public void execute(T input) {
            context.forward(function.apply(input));
        }
}

class Context {
    public void forward() {}
}

class Function {
        R apply(T t) throws Exception;
}",1
82695,MapValuesProcessor,execute,"class MapValuesProcessor {
        public void execute(Pair<K, V> input) {
            context.forward(Pair.of(input.getFirst(), function.apply(input.getSecond())));
        }
}

class Context {
    public void forward() {}
}

class Pair {
    public void of() {}
}

class Input {
    public void getFirst() {}
    public void getSecond() {}
}

class Function {
        R apply(T t) throws Exception;
}",1
82696,PeekProcessor,execute,"class PeekProcessor {
        public void execute(T input) {
            consumer.accept(input);
            context.forward(input);
        }
}

class Consumer {
    public void accept() {}
}

class Context {
    public void forward() {}
}",0
82697,StateQueryProcessor,execute,"class StateQueryProcessor {
        protected void execute(K key) {
            V value = keyValueState.get(key);
            if (value != null) {
                context.forward(Pair.of(key, value));
            }
        }
}

class KeyValueState {
        V get(K key);
}

class Context {
    public void forward() {}
}

class Pair {
    public void of() {}
}",1
82698,LongSum,apply,"class LongSum {
        public Long apply(Long aggregate, Number value) {
            return value.longValue() + aggregate;
        }
}

class Value {
    public void longValue() {}
}",0
82699,PairValueMapper,apply,"class PairValueMapper {
        public Pair<K, V> apply(Tuple input) {
            return Pair.of((K) input.getValue(keyIndex), (V) input.getValue(valueIndex));
        }
}

class Pair {
    public void of() {}
}

class Input {
    public void getValue() {}
}",1
82700,ValueMapper,apply,"class ValueMapper {
        public T apply(Tuple input) {
            return (T) input.getValue(index);
        }
}

class Input {
    public void getValue() {}
}",0
82701,ValuesMapper,apply,"class ValuesMapper {
        public Values apply(Tuple input) {
            Values values = new Values();
            for (int i : indices) {
                values.add(input.getValue(i));
            }
            return values;
        }
}

class Input {
    public void getValue() {}
}",0
82702,SaslTransportPlugin,getServer,"class SaslTransportPlugin {
        public TServer getServer(TProcessor processor) throws IOException, TTransportException {
            int configuredPort = type.getPort(conf);
            Integer socketTimeout = type.getSocketTimeOut(conf);
            TTransportFactory serverTransportFactory = getServerTransportFactory(type.isImpersonationAllowed());
            TServerSocket serverTransport = null;
            if (socketTimeout != null) {
                serverTransport = new TServerSocket(configuredPort, socketTimeout);
            } else {
                serverTransport = new TServerSocket(configuredPort);
            }
            this.port = serverTransport.getServerSocket().getLocalPort();
            int numWorkerThreads = type.getNumThreads(conf);
            Integer queueSize = type.getQueueSize(conf);
            TThreadPoolServer.Args serverArgs = new TThreadPoolServer.Args(serverTransport)
                .processor(new TUGIWrapProcessor(processor))
                .minWorkerThreads(numWorkerThreads)
                .maxWorkerThreads(numWorkerThreads)
                .protocolFactory(new TBinaryProtocol.Factory(false, true));
            if (serverTransportFactory != null) {
                serverArgs.transportFactory(serverTransportFactory);
            }
            BlockingQueue<Runnable> workQueue = new SynchronousQueue<>();
            if (queueSize != null) {
                workQueue = new ArrayBlockingQueue<>(queueSize);
            }
            ThreadPoolExecutor executorService = new ExtendedThreadPoolExecutor(numWorkerThreads, numWorkerThreads,
                                                                                60, TimeUnit.SECONDS, workQueue);
            serverArgs.executorService(executorService);
            return new TThreadPoolServer(serverArgs);
        }
}

class Type {
    public void getPort() {}
    public void getQueueSize() {}
    public void getSocketTimeOut() {}
    public void getNumThreads() {}
    public void isImpersonationAllowed() {}
}",0
82703,SimpleSaslClientCallbackHandler,handle,"class SimpleSaslClientCallbackHandler {
        public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
            for (Callback c : callbacks) {
                if (c instanceof NameCallback) {
                    NameCallback nc = (NameCallback) c;
                    nc.setName(username);
                } else if (c instanceof PasswordCallback) {
                    PasswordCallback pc = (PasswordCallback) c;
                    if (password != null) {
                        pc.setPassword(password.toCharArray());
                    }
                } else if (c instanceof AuthorizeCallback) {
                    AuthorizeCallback ac = (AuthorizeCallback) c;
                    String authid = ac.getAuthenticationID();
                    String authzid = ac.getAuthorizationID();
                    if (authid.equals(authzid)) {
                        ac.setAuthorized(true);
                    } else {
                        ac.setAuthorized(false);
                    }
                    if (ac.isAuthorized()) {
                        ac.setAuthorizedID(authzid);
                    }
                } else if (c instanceof RealmCallback) {
                    RealmCallback rc = (RealmCallback) c;
                    ((RealmCallback) c).setText(rc.getDefaultText());
                } else {
                    throw new UnsupportedCallbackException(c);
                }
            }
        }
}

class Password {
    public void toCharArray() {}
}",0
82704,WorkerTokenClientCallbackHandler,findWorkerTokenInSubject,"class WorkerTokenClientCallbackHandler {
        public static WorkerToken findWorkerTokenInSubject(ThriftConnectionType type) {
            WorkerTokenServiceType serviceType = type.getWtType();
            WorkerToken ret = null;
            if (serviceType != null) {
                Subject subject = Subject.getSubject(AccessController.getContext());
                if (subject != null) {
                    ret = ClientAuthUtils.findWorkerToken(subject, serviceType);
                }
            }
            return ret;
        }
}

class Type {
    public void getWtType() {}
}

class Subject {
    public void getSubject() {}
}

class AccessController {
        public static AccessControlContext getContext() {
            return java.security.AccessController.getContext();
        }
}",1
82705,MultiLatencyStat,getTimeLatAvg,"class MultiLatencyStat {
        public Map<String, Map<T, Double>> getTimeLatAvg() {
            Map<String, Map<T, Double>> ret = new HashMap<>();
            for (Map.Entry<T, LatencyStat> entry : lat.entrySet()) {
                T key = entry.getKey();
                Map<String, Double> toFlip = entry.getValue().getTimeLatAvg();
                for (Map.Entry<String, Double> subEntry : toFlip.entrySet()) {
                    String time = subEntry.getKey();
                    Map<T, Double> tmp = ret.get(time);
                    if (tmp == null) {
                        tmp = new HashMap<>();
                        ret.put(time, tmp);
                    }
                    tmp.put(key, subEntry.getValue());
                }
            }
            return ret;
        }
}

class Entry {
    public void getKey() {}
    public void getValue() {}
}",1
82706,BoltAckInfo,applyOn,"class BoltAckInfo {
        public void applyOn(TopologyContext topologyContext) {
            List<ITaskHook> hooks = topologyContext.getHooks();
            for (int i = 0; i < hooks.size(); i++) {
                hooks.get(i).boltAck(this);
            }
        }
}

class TopologyContext {
      public Collection<ITaskHook> getHooks() {
        Collection<org.apache.heron.api.hooks.ITaskHook> hooks = delegate.getHooks();
        if (hooks != null) {
          for (org.apache.heron.api.hooks.ITaskHook hook : hooks) {
            if (hook instanceof ITaskHookDelegate) {
              return ((ITaskHookDelegate) hook).getHooks();
            }
          }
        }
        return null;
      }
}

class Hooks {
    public void size() {}
    public void get() {}
}",1
82707,BoltExecuteInfo,applyOn,"class BoltExecuteInfo {
        public void applyOn(TopologyContext topologyContext) {
            List<ITaskHook> hooks = topologyContext.getHooks();
            for (int i = 0; i < hooks.size(); i++) {
                hooks.get(i).boltExecute(this);
            }
        }
}

class TopologyContext {
      public Collection<ITaskHook> getHooks() {
        Collection<org.apache.heron.api.hooks.ITaskHook> hooks = delegate.getHooks();
        if (hooks != null) {
          for (org.apache.heron.api.hooks.ITaskHook hook : hooks) {
            if (hook instanceof ITaskHookDelegate) {
              return ((ITaskHookDelegate) hook).getHooks();
            }
          }
        }
        return null;
      }
}

class Hooks {
    public void size() {}
    public void get() {}
}",1
82708,BoltFailInfo,applyOn,"class BoltFailInfo {
        public void applyOn(TopologyContext topologyContext) {
            List<ITaskHook> hooks = topologyContext.getHooks();
            for (int i = 0; i < hooks.size(); i++) {
                hooks.get(i).boltFail(this);
            }
        }
}

class TopologyContext {
      public Collection<ITaskHook> getHooks() {
        Collection<org.apache.heron.api.hooks.ITaskHook> hooks = delegate.getHooks();
        if (hooks != null) {
          for (org.apache.heron.api.hooks.ITaskHook hook : hooks) {
            if (hook instanceof ITaskHookDelegate) {
              return ((ITaskHookDelegate) hook).getHooks();
            }
          }
        }
        return null;
      }
}

class Hooks {
    public void size() {}
    public void get() {}
}",1
82709,EmitInfo,applyOn,"class EmitInfo {
        public void applyOn(TopologyContext topologyContext) {
            List<ITaskHook> hooks = topologyContext.getHooks();
            for (int i = 0; i < hooks.size(); i++) {
                hooks.get(i).emit(this);
            }
        }
}

class TopologyContext {
      public Collection<ITaskHook> getHooks() {
        Collection<org.apache.heron.api.hooks.ITaskHook> hooks = delegate.getHooks();
        if (hooks != null) {
          for (org.apache.heron.api.hooks.ITaskHook hook : hooks) {
            if (hook instanceof ITaskHookDelegate) {
              return ((ITaskHookDelegate) hook).getHooks();
            }
          }
        }
        return null;
      }
}

class Hooks {
    public void size() {}
    public void get() {}
}",1
82710,SpoutAckInfo,applyOn,"class SpoutAckInfo {
        public void applyOn(TopologyContext topologyContext) {
            List<ITaskHook> hooks = topologyContext.getHooks();
            for (int i = 0; i < hooks.size(); i++) {
                hooks.get(i).spoutAck(this);
            }
        }
}

class TopologyContext {
      public Collection<ITaskHook> getHooks() {
        Collection<org.apache.heron.api.hooks.ITaskHook> hooks = delegate.getHooks();
        if (hooks != null) {
          for (org.apache.heron.api.hooks.ITaskHook hook : hooks) {
            if (hook instanceof ITaskHookDelegate) {
              return ((ITaskHookDelegate) hook).getHooks();
            }
          }
        }
        return null;
      }
}

class Hooks {
    public void size() {}
    public void get() {}
}",1
82711,SpoutFailInfo,applyOn,"class SpoutFailInfo {
        public void applyOn(TopologyContext topologyContext) {
            List<ITaskHook> hooks = topologyContext.getHooks();
            for (int i = 0; i < hooks.size(); i++) {
                hooks.get(i).spoutFail(this);
            }
        }
}

class TopologyContext {
      public Collection<ITaskHook> getHooks() {
        Collection<org.apache.heron.api.hooks.ITaskHook> hooks = delegate.getHooks();
        if (hooks != null) {
          for (org.apache.heron.api.hooks.ITaskHook hook : hooks) {
            if (hook instanceof ITaskHookDelegate) {
              return ((ITaskHookDelegate) hook).getHooks();
            }
          }
        }
        return null;
      }
}

class Hooks {
    public void size() {}
    public void get() {}
}",1
82712,CgroupCoreFactory,getInstance,"class CgroupCoreFactory {
        public static Map<SubSystemType, CgroupCore> getInstance(Set<SubSystemType> types, String dir) {
            Map<SubSystemType, CgroupCore> result = new HashMap<SubSystemType, CgroupCore>();
            for (SubSystemType type : types) {
                CgroupCore inst = getInstance(type, dir);
                if (inst != null) {
                    result.put(type, inst);
                }
            }
            return result;
        }
}

class Result {
    public void put() {}
}",0
82713,Hierarchy,hashCode,"class Hierarchy {
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((dir == null) ? 0 : dir.hashCode());
            result = prime * result + ((name == null) ? 0 : name.hashCode());
            result = prime * result + ((type == null) ? 0 : type.hashCode());
            return result;
        }
}

class Name {
        public synchronized int hashCode() {
            if (isReference()) {
                return getRef().hashCode();
            }
            return getClass().hashCode();
        }
}

class Type {
    public void hashCode() {}
}",0
82714,Hierarchy,equals,"class Hierarchy {
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            Hierarchy other = (Hierarchy) obj;
            if (dir == null) {
                if (other.dir != null) {
                    return false;
                }
            } else if (!dir.equals(other.dir)) {
                return false;
            }
            if (name == null) {
                if (other.name != null) {
                    return false;
                }
            } else if (!name.equals(other.name)) {
                return false;
            }
            if (type == null) {
                if (other.type != null) {
                    return false;
                }
            } else if (!type.equals(other.type)) {
                return false;
            }
            return true;
        }
}

class Name {
        public boolean equals(Object o) {
            if (isReference()) {
                return getRef().equals(o);
            }
            return o != null && (o == this || o.getClass().equals(getClass()));
        }
}

class Type {
    public void equals() {}
}",0
82715,SubSystem,hashCode,"class SubSystem {
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((type == null) ? 0 : type.hashCode());
            result = prime * result + hierarchyID;
            return result;
        }
}

class Type {
    public void hashCode() {}
}",0
82716,VersionInfoMojo,getCommaSeparatedList,"class VersionInfoMojo {
        private static String getCommaSeparatedList(List list) {
            StringBuilder buffer = new StringBuilder();
            String separator = """";
            for (Object e : list) {
                buffer.append(separator).append(e);
                separator = "","";
            }
            return buffer.toString();
        }
}

class Buffer {
    public void toString() {}
    public void append() {}
}",0
82717,VersionInfoMojo,convertFileSetToFiles,"class VersionInfoMojo {
        public static List<File> convertFileSetToFiles(FileSet source)
            throws IOException {
            String includes = getCommaSeparatedList(source.getIncludes());
            String excludes = getCommaSeparatedList(source.getExcludes());
            return FileUtils.getFiles(new File(source.getDirectory()), includes,
                                      excludes);
        }
}

class Source {
    public void getExcludes() {}
    public void getDirectory() {}
    public void getIncludes() {}
}

class FileUtils {
    public void getFiles() {}
}",1
82718,VersionInfoMojo,execute,"class VersionInfoMojo {
        public void execute() throws MojoExecutionException {
            try {
                SCM scm = determineScm();
                project.getProperties().setProperty(buildTimeProperty, getBuildTime());
                project.getProperties().setProperty(scmUriProperty, getSCMUri(scm));
                project.getProperties().setProperty(scmBranchProperty, getSCMBranch(scm));
                project.getProperties().setProperty(scmCommitProperty, getSCMCommit(scm));
                project.getProperties().setProperty(md5Property, computeMD5());
            } catch (Throwable ex) {
                throw new MojoExecutionException(ex.toString(), ex);
            }
        }
}

class Project {
    public void getProperties() {}
}",1
82719,VersionInfoMojo,determineScm,"class VersionInfoMojo {
        private SCM determineScm() throws Exception {
            CommandExec exec = new CommandExec(this);
            SCM scm = SCM.NONE;
            scmOut = new ArrayList<String>();
            int ret = exec.run(Arrays.asList(svnCommand, ""info""), scmOut);
            if (ret == 0) {
                scm = SCM.SVN;
            } else {
                ret = exec.run(Arrays.asList(gitCommand, ""branch""), scmOut);
                if (ret == 0) {
                    ret = exec.run(Arrays.asList(gitCommand, ""remote"", ""-v""), scmOut);
                    if (ret != 0) {
                        scm = SCM.NONE;
                        scmOut = null;
                    } else {
                        ret = exec.run(Arrays.asList(gitCommand, ""log"", ""-n"", ""1""), scmOut);
                        if (ret != 0) {
                            scm = SCM.NONE;
                            scmOut = null;
                        } else {
                            scm = SCM.GIT;
                        }
                    }
                }
            }
            if (scmOut != null) {
                getLog().debug(scmOut.toString());
            }
            getLog().info(""SCM: "" + scm);
            return scm;
        }
}

class Exec {
    public void run() {}
}",1
82720,VersionInfoMojo,getSvnUriInfo,"class VersionInfoMojo {
        private String[] getSvnUriInfo(String str) {
            String[] res = new String[]{ ""Unknown"", ""Unknown"" };
            try {
                String path = str;
                int index = path.indexOf(""trunk"");
                if (index > -1) {
                    res[0] = path.substring(0, index - 1);
                    res[1] = ""trunk"";
                } else {
                    index = path.indexOf(""branches"");
                    if (index > -1) {
                        res[0] = path.substring(0, index - 1);
                        int branchIndex = index + ""branches"".length() + 1;
                        index = path.indexOf(""/"", branchIndex);
                        if (index > -1) {
                            res[1] = path.substring(branchIndex, index);
                        } else {
                            res[1] = path.substring(branchIndex);
                        }
                    }
                }
            } catch (Exception ex) {
                getLog().warn(""Could not determine URI & branch from SVN URI: "" + str);
            }
            return res;
        }
}

class Path {
    public void substring() {}
    public void indexOf() {}
}",0
82721,VersionInfoMojo,getSCMUri,"class VersionInfoMojo {
        private String getSCMUri(SCM scm) {
            String uri = ""Unknown"";
            switch (scm) {
                case SVN:
                    for (String s : scmOut) {
                        if (s.startsWith(""URL:"")) {
                            uri = s.substring(4).trim();
                            uri = getSvnUriInfo(uri)[0];
                            break;
                        }
                    }
                    break;
                case GIT:
                    for (String s : scmOut) {
                        if (s.startsWith(""origin"") && s.endsWith(""(fetch)"")) {
                            uri = s.substring(""origin"".length());
                            uri = uri.substring(0, uri.length() - ""(fetch)"".length());
                            break;
                        }
                    }
                    break;
                case NONE:
                    break;
                default:
                    throw new IllegalArgumentException(String.format(""SCM %s is not supported"",
                            scm));
            }
            return uri.trim();
        }
}

class URI {
    public void substring() {}
    public void length() {}
    public void trim() {}
}",1
82722,VersionInfoMojo,getSCMCommit,"class VersionInfoMojo {
        private String getSCMCommit(SCM scm) {
            String commit = ""Unknown"";
            switch (scm) {
                case SVN:
                    for (String s : scmOut) {
                        if (s.startsWith(""Revision:"")) {
                            commit = s.substring(""Revision:"".length());
                            break;
                        }
                    }
                    break;
                case GIT:
                    for (String s : scmOut) {
                        if (s.startsWith(""commit"")) {
                            commit = s.substring(""commit"".length());
                            break;
                        }
                    }
                    break;
                case NONE:
                    break;
                default:
                    throw new IllegalArgumentException(String.format(""SCM %s is not supported"",
                            scm));
            }
            return commit.trim();
        }
}

class Commit {
    public void trim() {}
}",1
82723,VersionInfoMojo,getSCMBranch,"class VersionInfoMojo {
        private String getSCMBranch(SCM scm) {
            String branch = ""Unknown"";
            switch (scm) {
                case SVN:
                    for (String s : scmOut) {
                        if (s.startsWith(""URL:"")) {
                            branch = s.substring(4).trim();
                            branch = getSvnUriInfo(branch)[1];
                            break;
                        }
                    }
                    break;
                case GIT:
                    for (String s : scmOut) {
                        if (s.startsWith(""*"")) {
                            branch = s.substring(""*"".length());
                            break;
                        }
                    }
                    break;
                case NONE:
                    break;
                default:
                    throw new IllegalArgumentException(String.format(""SCM %s is not supported"",
                            scm));
            }
            return branch.trim();
        }
}

class Branch {
    public void trim() {}
}",1
82724,VersionInfoMojo,computeMD5,"class VersionInfoMojo {
        private String computeMD5() throws Exception {
            List<File> files = convertFileSetToFiles(source);
            Collections.sort(files, new Comparator<File>() {
                public int compare(File lhs, File rhs) {
                    return normalizePath(lhs).compareTo(normalizePath(rhs));
                }
                private String normalizePath(File file) {
                    return file.getPath().toUpperCase().replaceAll(""\\\\"", ""/"");
                }
            });
            byte[] md5 = computeMD5(files);
            String md5str = byteArrayToString(md5);
            getLog().info(""Computed MD5: "" + md5str);
            return md5str;
        }
}

class File {
    public void getPath() {}
}",0
82725,TimeDataIncrementingSpout,declareOutputFields,"class TimeDataIncrementingSpout {
        public void declareOutputFields(OutputFieldsDeclarer declarer) {
            declarer.declare(TimeData.getFields());
        }
}

class TimeData {
    public void getFields() {}
}",1
82726,TimeDataIncrementingSpout,open,"class TimeDataIncrementingSpout {
        public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {
            componentId = context.getThisComponentId();
            this.collector = collector;
        }
}

class Context {
    public void getThisComponentId() {}
}",0
82727,TimeDataIncrementingSpout,nextTuple,"class TimeDataIncrementingSpout {
        public void nextTuple() {
            if (currentNum >= TestableTopology.MAX_SPOUT_EMITS) {
                return;
            }
            TimeUtil.sleepMilliSec(TestableTopology.TIMEDATA_SLEEP_BETWEEN_EMITS_MS);
            currentNum++;
            TimeData data = TimeData.newData(currentNum);
            final Values tuple = data.getValues();
            collector.emit(tuple);
            LOG.info(StringDecorator.decorate(componentId, data.toString()));
        }
}

class TimeUtil {
    public void sleepMilliSec() {}
}

class TimeData {
    public void newData() {}
}

class Data {
    public void getValues() {}
    public void toString() {}
}

class Collector {
    public void emit() {}
}

class Log {
    public void info() {}
}",1
82728,RedisKeyValueStateIterator,decodeKey,"class RedisKeyValueStateIterator {
        protected K decodeKey(byte[] key) {
            return encoder.decodeKey(key);
        }
}

class Encoder {
    public void decodeKey() {}
}",1
82729,RedisKeyValueStateIterator,decodeValue,"class RedisKeyValueStateIterator {
        protected V decodeValue(byte[] value) {
            return encoder.decodeValue(value);
        }
}

class Encoder {
    public void decodeValue() {}
}",1
82730,RedisKeyValueStateIterator,loadChunkFromRedis,"class RedisKeyValueStateIterator {
        private void loadChunkFromRedis() {
            RedisCommands commands = null;
            try {
                commands = container.getInstance();
                ScanResult<Map.Entry<byte[], byte[]>> scanResult = commands.hscan(namespace, cursor, scanParams);
                List<Map.Entry<byte[], byte[]>> result = scanResult.getResult();
                if (result != null) {
                    cachedResultIterator = result.iterator();
                }
                cursor = scanResult.getCursorAsBytes();
            } finally {
                container.returnInstance(commands);
            }
        }
}

class Container {
    public void getInstance() {}
    public void returnInstance() {}
}

class Commands {
    public void hscan() {}
}

class ScanResult {
    public void getCursorAsBytes() {}
    public void getResult() {}
}

class Result {
    public void iterator() {}
}",1
82731,AbstractRedisMapState,multiGet,"class AbstractRedisMapState {
        public List<T> multiGet(List<List<Object>> keys) {
            if (keys.size() == 0) {
                return Collections.emptyList();
            }
            List<String> stringKeys = buildKeys(keys);
            List<String> values = retrieveValuesFromRedis(stringKeys);
            return deserializeValues(keys, values);
        }
}

class Keys {
    public void size() {}
}",0
82732,AbstractRedisMapState,multiPut,"class AbstractRedisMapState {
        public void multiPut(List<List<Object>> keys, List<T> vals) {
            if (keys.size() == 0) {
                return;
            }
            Map<String, String> keyValues = new HashMap<String, String>();
            for (int i = 0; i < keys.size(); i++) {
                String val = new String(getSerializer().serialize(vals.get(i)));
                String redisKey = getKeyFactory().build(keys.get(i));
                keyValues.put(redisKey, val);
            }
            updateStatesToRedis(keyValues);
        }
}

class Keys {
    public void size() {}
    public void get() {}
}

class Vals {
    public void get() {}
}",1
82733,AbstractRedisMapState,deserializeValues,"class AbstractRedisMapState {
        private List<T> deserializeValues(List<List<Object>> keys, List<String> values) {
            List<T> result = new ArrayList<T>(keys.size());
            for (String value : values) {
                if (value != null) {
                    result.add((T) getSerializer().deserialize(value.getBytes()));
                } else {
                    result.add(null);
                }
            }
            return result;
        }
}

class Keys {
    public void size() {}
}

class Result {
    public void add() {}
}

class Value {
    public void getBytes() {}
}",1
82734,AbstractRedisStateQuerier,batchRetrieve,"class AbstractRedisStateQuerier {
        public List<List<Values>> batchRetrieve(T state, List<TridentTuple> inputs) {
            List<List<Values>> values = Lists.newArrayList();
            List<String> keys = Lists.newArrayList();
            for (TridentTuple input : inputs) {
                keys.add(lookupMapper.getKeyFromTuple(input));
            }
            List<String> redisVals = retrieveValuesFromRedis(state, keys);
            for (int i = 0; i < redisVals.size(); i++) {
                values.add(lookupMapper.toTuple(inputs.get(i), redisVals.get(i)));
            }
            return values;
        }
}

class Lists {
    public void newArrayList() {}
}

class Keys {
    public void add() {}
}",1
82735,AbstractRedisStateQuerier,execute,"class AbstractRedisStateQuerier {
        public void execute(TridentTuple tuple, List<Values> values, TridentCollector collector) {
            for (Values value : values) {
                collector.emit(value);
            }
        }
}

class Collector {
    public void emit() {}
}",0
82736,TridentKafkaStateUpdater,updateState,"class TridentKafkaStateUpdater {
        public void updateState(TridentKafkaState<K, V> state, List<TridentTuple> tuples, TridentCollector collector) {
            state.updateState(tuples, collector);
        }
}

class State {
    public void updateState() {}
}",0
82737,ClientFactoryDefault,createAdmin,"class ClientFactoryDefault {
        public Admin createAdmin(Map<String, Object> adminProps) {
            return Admin.create(adminProps);
        }
}

class Admin {
    public void create() {}
}",0
82738,RoundRobinManualPartitioner,getPartitionsForThisTask,"class RoundRobinManualPartitioner {
        public Set<TopicPartition> getPartitionsForThisTask(List<TopicPartition> allPartitionsSorted, TopologyContext context) {
            int thisTaskIndex = context.getThisTaskIndex();
            int totalTaskCount = context.getComponentTasks(context.getThisComponentId()).size();
            Set<TopicPartition> myPartitions = new HashSet<>(allPartitionsSorted.size() / totalTaskCount + 1);
            for (int i = thisTaskIndex; i < allPartitionsSorted.size(); i += totalTaskCount) {
                myPartitions.add(allPartitionsSorted.get(i));
            }
            return myPartitions;
        }
}

class Context {
    public void getThisComponentId() {}
    public void getComponentTasks() {}
    public void getThisTaskIndex() {}
}",0
82739,TopicAssigner,assignPartitions,"class TopicAssigner {
        public <K, V> boolean assignPartitions(Consumer<K, V> consumer, Set<TopicPartition> newAssignment,
            ConsumerRebalanceListener listener) {
            Set<TopicPartition> currentAssignment = consumer.assignment();
            if (!newAssignment.equals(currentAssignment)) {
                listener.onPartitionsRevoked(currentAssignment);
                consumer.assign(newAssignment);
                listener.onPartitionsAssigned(newAssignment);
                return true;
            }
            return false;
        }
}

class Consumer {
    public void assignment() {}
    public void assign() {}
}

class Listener {
    public void onPartitionsRevoked() {}
    public void onPartitionsAssigned() {}
}",0
82740,KafkaTridentOpaqueSpoutEmitter,emitBatchNew,"class KafkaTridentOpaqueSpoutEmitter {
        public Map<KafkaTridentSpoutTopicPartition, Map<String, Object>> emitBatchNew(TransactionAttempt tx,
            TridentCollector collector, Set<KafkaTridentSpoutTopicPartition> partitions,
            Map<KafkaTridentSpoutTopicPartition, Map<String, Object>> lastBatchMetaMap) {
            return emitter.emitBatchNew(tx, collector, partitions, lastBatchMetaMap);
        }
}

class Emitter {
    public void emitBatchNew() {}
}",1
82741,KafkaTridentOpaqueSpoutEmitter,refreshPartitions,"class KafkaTridentOpaqueSpoutEmitter {
        public void refreshPartitions(List<KafkaTridentSpoutTopicPartition> partitionResponsibilities) {
            emitter.refreshPartitions(partitionResponsibilities);
        }
}

class Emitter {
    public void refreshPartitions() {}
}",1
82742,KafkaTridentOpaqueSpoutEmitter,close,"class KafkaTridentOpaqueSpoutEmitter {
        public void close() {
            emitter.close();
        }
}

class Emitter {
    public void close() {}
}",0
82743,KafkaTridentTransactionalSpoutEmitter,emitBatchNew,"class KafkaTridentTransactionalSpoutEmitter {
        public Map<KafkaTridentSpoutTopicPartition, Map<String, Object>> emitBatchNew(TransactionAttempt tx,
            TridentCollector collector, Set<KafkaTridentSpoutTopicPartition> partitions,
            Map<KafkaTridentSpoutTopicPartition, Map<String, Object>> lastPartitionMetaMap) {
            return emitter.emitBatchNew(tx, collector, partitions, lastPartitionMetaMap);
        }
}

class Emitter {
    public void emitBatchNew() {}
}",1
82744,KafkaTridentTransactionalSpoutEmitter,refreshPartitions,"class KafkaTridentTransactionalSpoutEmitter {
        public void refreshPartitions(List<KafkaTridentSpoutTopicPartition> partitionResponsibilities) {
            emitter.refreshPartitions(partitionResponsibilities);
        }
}

class Emitter {
    public void refreshPartitions() {}
}",1
82745,KafkaTridentTransactionalSpoutEmitter,reEmitPartitionBatch,"class KafkaTridentTransactionalSpoutEmitter {
        public void reEmitPartitionBatch(TransactionAttempt tx, TridentCollector collector,
            KafkaTridentSpoutTopicPartition partition, Map<String, Object> partitionMeta) {
            emitter.reEmitPartitionBatch(tx, collector, partition, partitionMeta);
        }
}

class Emitter {
    public void reEmitPartitionBatch() {}
}",1
82746,KafkaTridentTransactionalSpoutEmitter,close,"class KafkaTridentTransactionalSpoutEmitter {
        public void close() {
            emitter.close();
        }
}

class Emitter {
    public void close() {}
}",0
82747,JmsStateFactory,makeState,"class JmsStateFactory {
        public State makeState(Map<String, Object> map, IMetricsContext metricsContext, int partitionIndex, int numPartitions) {
            JmsState state = new JmsState(options);
            state.prepare();
            return state;
        }
}

class State {
    public void prepare() {}
}",1
82748,AbstractJdbcBolt,prepare,"class AbstractJdbcBolt {
        public void prepare(final Map<String, Object> map, final TopologyContext topologyContext,
                            final OutputCollector outputCollector) {
            this.collector = outputCollector;
            connectionProvider.prepare();
            if (queryTimeoutSecs == null) {
                String msgTimeout = map.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)
                                       .toString();
                queryTimeoutSecs = Integer.parseInt(msgTimeout);
            }
            this.jdbcClient = new JdbcClient(connectionProvider, queryTimeoutSecs);
        }
}

class ConnectionProvider {
    public void prepare() {}
}

class Map {
    public void get() {}
}",1
82749,AbstractJdbcBolt,cleanup,"class AbstractJdbcBolt {
        public void cleanup() {
            connectionProvider.cleanup();
        }
}

class ConnectionProvider {
    public void cleanup() {}
}",0
82750,JdbcLookupBolt,process,"class JdbcLookupBolt {
        protected void process(Tuple tuple) {
            try {
                List<Column> columns = jdbcLookupMapper.getColumns(tuple);
                List<List<Column>> result = jdbcClient.select(this.selectQuery, columns);
                if (result != null && result.size() != 0) {
                    for (List<Column> row : result) {
                        List<Values> values = jdbcLookupMapper.toTuple(tuple, row);
                        for (Values value : values) {
                            collector.emit(tuple, value);
                        }
                    }
                }
                this.collector.ack(tuple);
            } catch (Exception e) {
                this.collector.reportError(e);
                this.collector.fail(tuple);
            }
        }
}

class Result {
    public void size() {}
}

class Collector {
    public void emit() {}
}",1
82751,SimpleJdbcLookupMapper,toTuple,"class SimpleJdbcLookupMapper {
        public List<Values> toTuple(ITuple input, List<Column> columns) {
            Values values = new Values();
            for (String field : outputFields) {
                if (input.contains(field)) {
                    values.add(input.getValueByField(field));
                } else {
                    for (Column column : columns) {
                        if (column.getColumnName().equalsIgnoreCase(field)) {
                            values.add(column.getVal());
                        }
                    }
                }
            }
            List<Values> result = new ArrayList<Values>();
            result.add(values);
            return result;
        }
}

class Input {
    public void getValueByField() {}
    public void contains() {}
}

class Column {
    public void getColumnName() {}
    public void getVal() {}
}

class Result {
    public void add() {}
}",0
82752,JdbcQuery,execute,"class JdbcQuery {
        public void execute(TridentTuple tuples, List<Values> values, TridentCollector tridentCollector) {
            for (Values value : values) {
                tridentCollector.emit(value);
            }
        }
}

class TridentCollector {
        void emit(List<Object> values);
}",0
82753,JdbcStateFactory,makeState,"class JdbcStateFactory {
        public State makeState(Map<String, Object> map, IMetricsContext metricsContext, int partitionIndex, int numPartitions) {
            JdbcState state = new JdbcState(map, partitionIndex, numPartitions, options);
            state.prepare();
            return state;
        }
}

class State {
    public void prepare() {}
}",1
82754,HdfsClientBlobStore,prepare,"class HdfsClientBlobStore {
        public void prepare(Map<String, Object> conf) {
            this.conf = conf;
            blobStore = new HdfsBlobStore();
            blobStore.prepare(conf, null, null, null);
        }
}

class BlobStore {
    public void prepare() {}
}",1
82755,HdfsClientBlobStore,createBlobToExtend,"class HdfsClientBlobStore {
        public AtomicOutputStream createBlobToExtend(String key, SettableBlobMeta meta)
                throws AuthorizationException, KeyAlreadyExistsException {
            return blobStore.createBlob(key, meta, null);
        }
}

class BlobStore {
    public void createBlob() {}
}",1
82756,HdfsClientBlobStore,updateBlob,"class HdfsClientBlobStore {
        public AtomicOutputStream updateBlob(String key)
                throws AuthorizationException, KeyNotFoundException {
            return blobStore.updateBlob(key, null);
        }
}

class BlobStore {
    public void updateBlob() {}
}",1
82757,HdfsClientBlobStore,setBlobMetaToExtend,"class HdfsClientBlobStore {
        public void setBlobMetaToExtend(String key, SettableBlobMeta meta)
                throws AuthorizationException, KeyNotFoundException {
            blobStore.setBlobMeta(key, meta, null);
        }
}

class BlobStore {
    public void setBlobMeta() {}
}",1
82758,HdfsClientBlobStore,deleteBlob,"class HdfsClientBlobStore {
        public void deleteBlob(String key) throws AuthorizationException, KeyNotFoundException {
            blobStore.deleteBlob(key, null);
        }
}

class BlobStore {
    public void deleteBlob() {}
}",1
82759,HdfsClientBlobStore,listKeys,"class HdfsClientBlobStore {
        public Iterator<String> listKeys() {
            return blobStore.listKeys();
        }
}

class BlobStore {
    public void listKeys() {}
}",0
82760,HdfsClientBlobStore,updateBlobReplication,"class HdfsClientBlobStore {
        public int updateBlobReplication(String key, int replication) throws AuthorizationException, KeyNotFoundException {
            return blobStore.updateBlobReplication(key, replication, null);
        }
}

class BlobStore {
    public void updateBlobReplication() {}
}",1
82761,HdfsClientBlobStore,close,"class HdfsClientBlobStore {
        public void close() {
            if (client != null) {
                client.close();
                client = null;
            }
        }
}

class Client {
    public void close() {}
}",0
82762,AbstractAvroSerializer,write,"class AbstractAvroSerializer {
        public void write(Kryo kryo, Output output, GenericContainer record) {
            String fingerPrint = this.getFingerprint(record.getSchema());
            output.writeString(fingerPrint);
            GenericDatumWriter<GenericContainer> writer = new GenericDatumWriter<>(record.getSchema());
            BinaryEncoder encoder = EncoderFactory
                .get()
                .directBinaryEncoder(output, null);
            try {
                writer.write(record, encoder);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
}

class Record {
    public void getSchema() {}
}

class Output {
    public void writeString() {}
}

class Writer {
        Object write(Base base, WriterOptions options) throws IOException;
}",1
82763,AbstractAvroSerializer,read,"class AbstractAvroSerializer {
        public GenericContainer read(Kryo kryo, Input input, Class<? extends GenericContainer> someClass) {
            Schema theSchema = this.getSchema(input.readString());
            GenericDatumReader<GenericContainer> reader = new GenericDatumReader<>(theSchema);
            Decoder decoder = DecoderFactory
                .get()
                .directBinaryDecoder(input, null);
            GenericContainer foo;
            try {
                foo = reader.read(null, decoder);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return foo;
        }
}

class Input {
    public void readString() {}
}

class Reader {
    public void read() {}
}",0
82764,AvroGenericRecordBolt,doPrepare,"class AvroGenericRecordBolt {
        protected void doPrepare(Map<String, Object> conf, TopologyContext topologyContext, OutputCollector collector) throws IOException {
            LOG.info(""Preparing AvroGenericRecord Bolt..."");
            this.fs = FileSystem.get(URI.create(this.fsUrl), hdfsConfig);
        }
}

class Log {
    public void info() {}
}

class FileSystem {
    public void get() {}
}

class URI {
    public void create() {}
}",1
82765,AvroGenericRecordBolt,makeNewWriter,"class AvroGenericRecordBolt {
        protected AbstractHDFSWriter makeNewWriter(Path path, Tuple tuple) throws IOException {
            Schema recordSchema = ((GenericRecord) tuple.getValue(0)).getSchema();
            return new AvroGenericRecordHDFSWriter(this.rotationPolicy, path, this.fs.create(path), recordSchema);
        }
}

class Tuple {
      T getValue();
}",1
82766,HdfsUtils,listFilesByModificationTime,"class HdfsUtils {
        public static ArrayList<Path> listFilesByModificationTime(FileSystem fs, Path directory, long olderThan)
            throws IOException {
            ArrayList<LocatedFileStatus> fstats = new ArrayList<>();
            RemoteIterator<LocatedFileStatus> itr = fs.listFiles(directory, false);
            while (itr.hasNext()) {
                LocatedFileStatus fileStatus = itr.next();
                if (olderThan > 0) {
                    if (fileStatus.getModificationTime() <= olderThan) {
                        fstats.add(fileStatus);
                    }
                } else {
                    fstats.add(fileStatus);
                }
            }
            Collections.sort(fstats, new ModifTimeComparator());
            ArrayList<Path> result = new ArrayList<>(fstats.size());
            for (LocatedFileStatus fstat : fstats) {
                result.add(fstat.getPath());
            }
            return result;
        }
}

class Fs {
    public void listFiles() {}
}

class Itr {
    public void next() {}
    public void hasNext() {}
}

class FileStatus {
    public void getModificationTime() {}
}

class Result {
    public void add() {}
}",0
82767,HdfsUtils,tryCreateFile,"class HdfsUtils {
        public static FSDataOutputStream tryCreateFile(FileSystem fs, Path file) throws IOException {
            try {
                FSDataOutputStream os = fs.create(file, false);
                return os;
            } catch (FileAlreadyExistsException e) {
                return null;
            } catch (RemoteException e) {
                if (e.unwrapRemoteException() instanceof AlreadyBeingCreatedException) {
                    return null;
                } else {
                    throw e;
                }
            }
        }
}

class Fs {
      boolean create(String dest) throws IOException;
}

class e {
    public void unwrapRemoteException() {}
}",1
82768,ProgressTracker,recordAckedOffset,"class ProgressTracker {
        public synchronized void recordAckedOffset(FileOffset newOffset) {
            if (newOffset == null) {
                return;
            }
            offsets.add(newOffset);
            FileOffset currHead = offsets.first();
            if (currHead.isNextOffset(newOffset)) {
                trimHead();
            }
        }
}

class Offsets {
    public void first() {}
    public void add() {}
}",0
82769,ProgressTracker,trimHead,"class ProgressTracker {
        private synchronized void trimHead() {
            if (offsets.size() <= 1) {
                return;
            }
            FileOffset head = offsets.first();
            FileOffset head2 = offsets.higher(head);
            if (head.isNextOffset(head2)) {
                offsets.pollFirst();
                trimHead();
            }
            return;
        }
}

class Offsets {
    public void first() {}
    public void pollFirst() {}
    public void size() {}
    public void higher() {}
}

class Head {
    public void isNextOffset() {}
}",1
82770,ProgressTracker,getCommitPosition,"class ProgressTracker {
        public synchronized FileOffset getCommitPosition() {
            if (!offsets.isEmpty()) {
                return offsets.first().clone();
            }
            return null;
        }
}

class Offsets {
    public void first() {}
    public void isEmpty() {}
}",0
82771,ProgressTracker,dumpState,"class ProgressTracker {
        public synchronized void dumpState(PrintStream stream) {
            stream.println(offsets);
        }
}

class Stream {
    public void println() {}
}",1
82772,ProgressTracker,size,"class ProgressTracker {
        public synchronized int size() {
            return offsets.size();
        }
}

class Offsets {
    public void size() {}
}",1
82773,HdfsUpdater,updateState,"class HdfsUpdater {
        public void updateState(HdfsState state, List<TridentTuple> tuples, TridentCollector collector) {
            state.updateState(tuples, collector);
        }
}

class State {
    public void updateState() {}
}",0
82774,TotalRankingsBolt,updateRankingsWithTuple,"class TotalRankingsBolt {
        void updateRankingsWithTuple(Tuple tuple) {
            Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
            super.getRankings().updateWith(rankingsToBeMerged);
            super.getRankings().pruneZeroCounts();
        }
}

class Tuple {
      T getValue();
}",1
82775,RandomNumberGeneratorSpout,emitBatch,"class RandomNumberGeneratorSpout {
        public void emitBatch(long batchId, TridentCollector collector) {
            List<List<Object>> values = null;
            if (batches.containsKey(batchId)) {
                values = batches.get(batchId);
            } else {
                values = new ArrayList<>();
                for (int i = 0; i < batchSize; i++) {
                    List<Object> numbers = new ArrayList<>();
                    for (int x = 0; x < fields.size(); x++) {
                        numbers.add(ThreadLocalRandom.current().nextInt(0, maxNumber + 1));
                    }
                    values.add(numbers);
                }
                batches.put(batchId, values);
            }
            for (List<Object> value : values) {
                collector.emit(value);
            }
        }
}

class Batches {
    public void put() {}
    public void get() {}
    public void containsKey() {}
}

class Fields {
    public void size() {}
}

class Numbers {
        public static Property<BigDecimal> add( Property<BigDecimal> property, BigDecimal amount )
        {
            property.set( property.get().add( amount ) );
            return property;
        }
}

class Collector {
    public void emit() {}
}",0
82776,RandomNumberGeneratorSpout,ack,"class RandomNumberGeneratorSpout {
        public void ack(long batchId) {
            batches.remove(batchId);
        }
}

class Batches {
    public void remove() {}
}",1
82777,Rankings,getRankings,"class Rankings {
        public List<Rankable> getRankings() {
            List<Rankable> copy = Lists.newLinkedList();
            for (Rankable r : rankedItems) {
                copy.add(r.copy());
            }
            return ImmutableList.copyOf(copy);
        }
}

class Lists {
    public void newLinkedList() {}
}

class Copy {
    public void add() {}
}",0
82778,PrintFunction,execute,"class PrintFunction {
        public void execute(TridentTuple tuple, TridentCollector tridentCollector) {
            if (RANDOM.nextInt(1000) > 995) {
                LOG.info(tuple.toString());
            }
        }
}

class Random {
       * @see java.util.Random#nextInt(int)
       */
      int nextInt(int n);
}

class Log {
    public void info() {}
}

class Tuple {
    public void toString() {}
}",0
82779,IdentityBolt,execute,"class IdentityBolt {
        public void execute(Tuple tuple) {
            collector.emit(tuple, tuple.getValues());
            collector.ack(tuple);
        }
}

class Collector {
    public void emit() {}
    public void ack() {}
}

class Tuple {
    public void getValues() {}
}",0
82780,OutputStreamEngine,selectNewRate,"class OutputStreamEngine {
        private void selectNewRate() {
            double ratePerSecond = stats.rate.nextRandom(rand);
            if (ratePerSecond > 0) {
                periodNano = Math.max(1, (long) (NANO_PER_SEC / ratePerSecond));
                emitAmount = Math.max(1, (long) ((ratePerSecond / NANO_PER_SEC) * periodNano));
            } else {
                periodNano = (long) NANO_PER_SEC * 10;
                emitAmount = 1;
            }
        }
}

class Stats {
    public void nextRandom() {}
}",0
82781,OutputStreamEngine,nextKey,"class OutputStreamEngine {
        public String nextKey() {
            int keyIndex;
            if (stats.areKeysSkewed) {
                keyIndex = Math.min(KEYS.length - 1 , Math.abs((int) (rand.nextGaussian() * KEYS.length / 5)));
            } else {
                keyIndex = rand.nextInt(KEYS.length);
            }
            return KEYS[keyIndex];
        }
}

class Rand {
    public void nextInt() {}
    public void nextGaussian() {}
}",0
82782,OutputStreamEngine,nextInt,"class OutputStreamEngine {
        public int nextInt(int bound) {
            return rand.nextInt(bound);
        }
}

class Rand {
    public void nextInt() {}
}",0
82783,FixedBatchSpout,emitBatch,"class FixedBatchSpout {
        public void emitBatch(long batchId, TridentCollector collector) {
            List<List<Object>> batch = this.batches.get(batchId);
            if (batch == null) {
                batch = new ArrayList<List<Object>>();
                if (index >= outputs.length && cycle) {
                    index = 0;
                }
                for (int i = 0; i < maxBatchSize; index++, i++) {
                    if (index == outputs.length) {
                        index = 0;
                    }
                    batch.add(outputs[index]);
                }
                this.batches.put(batchId, batch);
            }
            for (List<Object> list : batch) {
                collector.emit(list);
            }
        }
}

class Batch {
    public void add() {}
}

class Collector {
    public void emit() {}
}",0
82784,ParseData,put,"class ParseData {
        public void put(String key, String value) {
            metadata.addValue(key, value);
        }
}

class Metadata {
    public void addValue() {}
}",1
82785,RobotRules,hashCode,"class RobotRules {
        public int hashCode() {
            return base.hashCode();
        }
}

class Base {
    public void hashCode() {}
}",1
82786,RobotRules,equals,"class RobotRules {
        public boolean equals(Object obj) {
            return base.equals(obj);
        }
}

class Base {
    public void equals() {}
}",1
82787,RobotRules,setCrawlDelay,"class RobotRules {
        public void setCrawlDelay(long crawlDelay) {
            base.setCrawlDelay(crawlDelay);
        }
}

class Base {
    public void setCrawlDelay() {}
}",1
82788,RobotRules,setDeferVisits,"class RobotRules {
        public void setDeferVisits(boolean deferVisits) {
            base.setDeferVisits(deferVisits);
        }
}

class Base {
    public void setDeferVisits() {}
}",1
82789,RobotRules,addSitemap,"class RobotRules {
        public void addSitemap(String sitemap) {
            base.addSitemap(sitemap);
        }
}

class Base {
    public void addSitemap() {}
}",1
82790,ServerLogClient,createlogViewerClient,"class ServerLogClient {
        private void createlogViewerClient(String backEndUrl, String username, String password) throws AutomationUtilException {
            try {
                logViewerClient = new LogViewerClient(backEndUrl, username, password);
            } catch (AxisFault e) {
                String errorMsg = ""Error in creating LogViewerClient"";
                log.error(errorMsg, e);
                throw new AutomationUtilException(errorMsg, e);
            }
        }
}

class Log {
    public void error() {}
}",0
82791,ServerLogClient,getAllLogLines,"class ServerLogClient {
        public LogEvent[] getAllLogLines () throws AutomationUtilException {
            LogEvent[] allLogs = null;
            try {
                allLogs = logViewerClient.getAllRemoteSystemLogs();
                ArrayUtils.reverse(allLogs);
                return allLogs;
            } catch (RemoteException e) {
                String errorMsg = ""Error in creating getting remote system logs"";
                log.error(errorMsg, e);
                throw new AutomationUtilException(errorMsg, e);
            } catch (LogViewerLogViewerException e) {
                String errorMsg = ""Error in creating getting remote system logs"";
                log.error(errorMsg, e);
                throw new AutomationUtilException(errorMsg, e);
            }
        }
}

class ArrayUtils {
    public void reverse() {}
}

class Log {
    public void error() {}
}",0
82792,ServerLogClient,getLogLines,"class ServerLogClient {
        public String[] getLogLines () throws AutomationUtilException {
            LogEvent[] allLogs = null;
            try {
                allLogs = logViewerClient.getAllRemoteSystemLogs();
           } catch (RemoteException e) {
                String errorMsg = ""Error in creating getting remote system logs"";
                log.error(errorMsg, e);
                throw new AutomationUtilException(errorMsg, e);
           } catch (LogViewerLogViewerException e) {
                String errorMsg = ""Error in creating getting remote system logs"";
                log.error(errorMsg, e);
                throw new AutomationUtilException(errorMsg, e);
            }
            if (allLogs.length == 0) {
                allLogs = new LogEvent[0];
            }
            ArrayUtils.reverse(allLogs);
            if (logCount > allLogs.length) {
                return getLogsAsStrings(allLogs);
            }
            log.info(""Total no. of log lines: "" + Integer.toString(allLogs.length));
            log.info(""Previously returned count : "" + Integer.toString(logCount));
            log.info(""Current count : "" + Integer.toString(allLogs.length - logCount));
            LogEvent[] selectedLogs = Arrays.copyOfRange(allLogs, logCount, allLogs.length);
            logCount += (allLogs.length - logCount);
            return getLogsAsStrings(selectedLogs);
        }
}

class Log {
    public void error() {}
    public void info() {}
}

class ArrayUtils {
    public void reverse() {}
}",0
82793,LBInfoDTO,equals,"class LBInfoDTO {
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            LBInfoDTO lbInfoDTO = (LBInfoDTO) o;
            if (!name.equals(lbInfoDTO.name)) return false;
            if (!clusterId.equals(lbInfoDTO.clusterId)) return false;
            return region.equals(lbInfoDTO.region);
        }
}

class Name {
        public boolean equals(Object o) {
            if (isReference()) {
                return getRef().equals(o);
            }
            return o != null && (o == this || o.getClass().equals(getClass()));
        }
}

class ClusterId {
    public void equals() {}
}

class Region {
    public void equals() {}
}",1
82794,LBInfoDTO,hashCode,"class LBInfoDTO {
        public int hashCode() {
            int result = name.hashCode();
            result = 31 * result + clusterId.hashCode();
            result = 31 * result + region.hashCode();
            return result;
        }
}

class Name {
        public synchronized int hashCode() {
            if (isReference()) {
                return getRef().hashCode();
            }
            return getClass().hashCode();
        }
}

class ClusterId {
    public void hashCode() {}
}

class Region {
    public void hashCode() {}
}",1
82795,StratosPrincipal,equals,"class StratosPrincipal {
        public boolean equals(Object another) {
            if (another == null || another.getClass() != this.getClass()) {
                return false;
            }
            StratosPrincipal principal = (StratosPrincipal) another;
            return userName.equals((principal.getName()));
        }
}

class Principal {
    public void getName() {}
}",1
82796,MapAdapter,marshal,"class MapAdapter {
        public MapType marshal(Map<S, T> v) throws Exception {
            MapType mapType = new MapType();
            for (Map.Entry entry : v.entrySet()) {
                MapEntryType myMapEntryType = new MapEntryType();
                myMapEntryType.key = entry.getKey();
                myMapEntryType.value = entry.getValue();
                mapType.entry.add(myMapEntryType);
            }
            return mapType;
        }
}

class Entry {
    public void getKey() {}
    public void getValue() {}
}

class MapType {
    public void add() {}
}",1
82797,MapAdapter,unmarshal,"class MapAdapter {
        public Map<S, T> unmarshal(MapType v) throws Exception {
            Map hashMap = new HashMap();
            for (MapEntryType mapEntryType : v.entry) {
                hashMap.put(mapEntryType.key, mapEntryType.value);
            }
            return hashMap;
        }
}

class HashMap {
    public void put() {}
}",0
82798,MetadataTopologyEventReceiver,addEventListeners,"class MetadataTopologyEventReceiver {
        private void addEventListeners() {
            topologyEventReceiver.addEventListener(new ApplicationClustersCreatedEventListener() {
                protected void onEvent(Event event) {
                    ApplicationClustersCreatedEvent appClustersCreatedEvent = (ApplicationClustersCreatedEvent) event;
                    String applicationId = appClustersCreatedEvent.getAppId();
                    MetadataApiRegistry.getApplicationIdToReadWriteLockMap().put(applicationId,
                            new ReadWriteLock(Constants.METADATA_SERVICE_THREAD_POOL_ID.concat(applicationId)));
                }
            });
            topologyEventReceiver.addEventListener(new ApplicationClustersRemovedEventListener() {
                protected void onEvent(Event event) {
                    ApplicationClustersRemovedEvent appClustersRemovedEvent = (ApplicationClustersRemovedEvent) event;
                    String applicationId = appClustersRemovedEvent.getAppId();
                    MetadataApiRegistry.getApplicationIdToReadWriteLockMap().remove(applicationId);
                }
            });
        }
}

class Constants {
    public void concat() {}
}",0
82799,AbstractAuthenticationAuthorizationHandler,handleRequest,"class AbstractAuthenticationAuthorizationHandler {
        public Response handleRequest(Message message, ClassResourceInfo classResourceInfo) {
            HttpHeaders headers = new HttpHeadersImpl(message);
            if (!StringUtils.isEmpty(headers.getRequestHeaders().getFirst(HttpHeaders.AUTHORIZATION))) {
                return handle(message, classResourceInfo);
            }else{
                return Response.status(Response.Status.FORBIDDEN).build();
            }
        }
}

class Headers {
    public void getRequestHeaders() {}
}

class Response {
    public void status() {}
}",1
82800,StratosPrincipal,equals,"class StratosPrincipal {
        public boolean equals(Object another) {
            if (another == null || another.getClass() != this.getClass()) {
                return false;
            }
            StratosPrincipal principal = (StratosPrincipal) another;
            return userName.equals((principal.getName()));
        }
}

class Principal {
    public void getName() {}
}",1
82801,MapAdapter,marshal,"class MapAdapter {
        public MapType marshal(Map<S, T> v) throws Exception {
            MapType mapType = new MapType();
            for (Map.Entry entry : v.entrySet()) {
                MapEntryType myMapEntryType = new MapEntryType();
                myMapEntryType.key = entry.getKey();
                myMapEntryType.value = entry.getValue();
                mapType.entry.add(myMapEntryType);
            }
            return mapType;
        }
}

class Entry {
    public void getKey() {}
    public void getValue() {}
}

class MapType {
    public void add() {}
}",1
82802,MapAdapter,unmarshal,"class MapAdapter {
        public Map<S, T> unmarshal(MapType v) throws Exception {
            Map hashMap = new HashMap();
            for (MapEntryType mapEntryType : v.entry) {
                hashMap.put(mapEntryType.key, mapEntryType.value);
            }
            return hashMap;
        }
}

class HashMap {
    public void put() {}
}",0
82803,ServiceCreatedEvent,addPort,"class ServiceCreatedEvent {
        public void addPort(Port port) {
            this.portMap.put(port.getProxy(), port);
        }
}

class Port {
    public void getProxy() {}
}",1
82804,ServiceCreatedEvent,removePort,"class ServiceCreatedEvent {
        public void removePort(Port port) {
            this.portMap.remove(port.getProxy());
        }
}

class Port {
    public void getProxy() {}
}",1
82805,ServiceCreatedEvent,portExists,"class ServiceCreatedEvent {
        public boolean portExists(Port port) {
            return this.portMap.containsKey(port.getProxy());
        }
}

class Port {
    public void getProxy() {}
}",1
82806,Applications,addApplication,"class Applications {
        public synchronized void addApplication(Application application) {
            this.applicationMap.put(application.getUniqueIdentifier(), application);
        }
}

class Application {
    public void getUniqueIdentifier() {}
}",1
82807,Group,hashCode,"class Group {
        public int hashCode() {
            return name.hashCode() + alias.hashCode();
        }
}

class Name {
        public synchronized int hashCode() {
            if (isReference()) {
                return getRef().hashCode();
            }
            return getClass().hashCode();
        }
}

class Alias {
    public void hashCode() {}
}",1
82808,Instance,addProperty,"class Instance {
        public void addProperty(String name, String value) {
            instanceProperties.put(name, value);
        }
}

class InstanceProperties {
    public void put() {}
}",0
82809,Instance,hashCode,"class Instance {
        public int hashCode() {
            return alias.hashCode() + instanceId.hashCode();
        }
}

class Alias {
    public void hashCode() {}
}",1
82810,RetryTimer,getNextInterval,"class RetryTimer {
        public synchronized long getNextInterval() {
            if (iterator.hasNext()) {
                return iterator.next();
            }
            return valueList.get(valueList.size() - 1);
        }
}

class Iterator {
        public E next();
        public boolean hasNext();
}

class ValueList {
        public int size() {
            return list.size();
        }
        public Object get(int index) {
            Object obj = list.get(index);
            if (obj instanceof Value) {
                obj = convert((Value) obj);
                list.set(index, obj);
            }
            chopIfNeeded(obj);
            return obj;
        }
}",1
82811,ApplicationSignUpEventPublisher,publish,"class ApplicationSignUpEventPublisher {
        private static void publish(Event event) {
            String topic = MessagingUtil.getMessageTopicName(event);
            EventPublisher eventPublisher = EventPublisherPool.getPublisher(topic);
            eventPublisher.publish(event);
        }
}

class EventPublisher {
        public void publish(Notification notificationEvent, Notification.NotificationType eventType) throws Exception;
}",0
82812,InstanceNotificationPublisher,publish,"class InstanceNotificationPublisher {
        private void publish(Event event) {
            String topic = MessagingUtil.getMessageTopicName(event);
            EventPublisher eventPublisher = EventPublisherPool.getPublisher(topic);
            eventPublisher.publish(event);
        }
}

class EventPublisher {
        public void publish(Notification notificationEvent, Notification.NotificationType eventType) throws Exception;
}",0
82813,Member,addPort,"class Member {
        public void addPort(Port port) {
            this.portMap.put(port.getProxy(), port);
        }
}

class Port {
    public void getProxy() {}
}",1
82814,Member,removePort,"class Member {
        public void removePort(Port port) {
            this.portMap.remove(port.getProxy());
        }
}

class Port {
    public void getProxy() {}
}",1
82815,Member,portExists,"class Member {
        public boolean portExists(Port port) {
            return this.portMap.containsKey(port.getProxy());
        }
}

class Port {
    public void getProxy() {}
}",1
82816,Service,addCluster,"class Service {
        public void addCluster(Cluster cluster) {
            this.clusterIdClusterMap.put(cluster.getClusterId(), cluster);
        }
}

class Cluster {
      public long getClusterId();
}",1
82817,Service,addPort,"class Service {
        public void addPort(Port port) {
            this.portMap.put(port.getProxy(), port);
        }
}

class Port {
    public void getProxy() {}
}",1
82818,Service,removePort,"class Service {
        public void removePort(Port port) {
            if (portExists(port)) {
                this.portMap.remove(port.getProxy());
            }
        }
}

class Port {
    public void getProxy() {}
}",1
82819,Service,portExists,"class Service {
        public boolean portExists(Port port) {
            return this.portMap.containsKey(port.getProxy());
        }
}

class Port {
    public void getProxy() {}
}",1
82820,Topology,addService,"class Topology {
        public void addService(Service service) {
            this.serviceMap.put(service.getServiceName(), service);
        }
}

class Service {
    public void getServiceName() {}
}",1
82821,LoadBalancerContext,addClusterContext,"class LoadBalancerContext {
        public void addClusterContext(ClusterContext clusterContext) {
            clusterIdToClusterContextMap.put(clusterContext.getClusterId(), clusterContext);
        }
}

class ClusterContext {
    public void getClusterId() {}
}",1
82822,LoadBalancerDomainMappingEventReceiver,addDomainMapping,"class LoadBalancerDomainMappingEventReceiver {
        protected void addDomainMapping(Cluster cluster, String domainName, String contextPath) {
            super.addDomainMapping(cluster, domainName, contextPath);
            LoadBalancerContext.getInstance().addDomainMappingContextPath(domainName, contextPath);
        }
}

class LoadBalancerContext {
        public static LoadBalancerContext getInstance() {
            if (instance == null) {
                synchronized (LoadBalancerContext.class) {
                    if (instance == null) {
                        instance = new LoadBalancerContext();
                    }
                }
            }
            return instance;
        }
}",0
82823,LoadBalancerDomainMappingEventReceiver,removeDomainMapping,"class LoadBalancerDomainMappingEventReceiver {
        protected void removeDomainMapping(Cluster cluster, String domainName) {
            super.removeDomainMapping(cluster, domainName);
            LoadBalancerContext.getInstance().removeDomainMappingContextPath(domainName);
        }
}

class LoadBalancerContext {
        public static LoadBalancerContext getInstance() {
            if (instance == null) {
                synchronized (LoadBalancerContext.class) {
                    if (instance == null) {
                        instance = new LoadBalancerContext();
                    }
                }
            }
            return instance;
        }
}",0
82824,LoadBalancerTopologyEventReceiver,removeCluster,"class LoadBalancerTopologyEventReceiver {
        protected void removeCluster(Cluster cluster) {
            super.removeCluster(cluster);
            LoadBalancerContext.getInstance().removeClusterContext(cluster.getClusterId());
        }
}

class LoadBalancerContext {
        public static LoadBalancerContext getInstance() {
            if (instance == null) {
                synchronized (LoadBalancerContext.class) {
                    if (instance == null) {
                        instance = new LoadBalancerContext();
                    }
                }
            }
            return instance;
        }
}

class Cluster {
      public long getClusterId();
}",1
82825,HazelcastDistributedListProvider,getList,"class HazelcastDistributedListProvider {
        public List getList(String name, ListEntryListener listEntryListener) {
            List list = listMap.get(name);
            if (list == null) {
                synchronized (HazelcastDistributedListProvider.class) {
                    if (list == null) {
                        list = new DistList(name, listEntryListener);
                    }
                }
            }
            return list;
        }
}

class ListMap {
        public Object get( Object key, Object _default ) {
            if (this.containsKey(key)) {
                return this.get(key);
            }
            return _default;
        }
}",0
82826,HazelcastDistributedListProvider,removeList,"class HazelcastDistributedListProvider {
        public void removeList(String name) {
            DistList list = listMap.get(name);
            if (list != null) {
                IList ilist = (IList) list;
                ilist.removeItemListener(list.getListenerId());
                listMap.remove(list);
                ilist.destroy();
            }
        }
}

class ListMap {
        public Object get( Object key, Object _default ) {
            if (this.containsKey(key)) {
                return this.get(key);
            }
            return _default;
        }
    public void remove() {}
}

class List {
    public void getListenerId() {}
}",1
82827,CloudControllerConfig,getIaasProvider,"class CloudControllerConfig {
        public IaasProvider getIaasProvider(String type) {
            if (type == null) {
                return null;
            }
            for (IaasProvider iaasProvider : iaasProviders) {
                if (type.equals(iaasProvider.getType())) {
                    return iaasProvider;
                }
            }
            return null;
        }
}

class Type {
    public void equals() {}
}",1
82828,ClusterContext,addKubernetesService,"class ClusterContext {
        public void addKubernetesService(String clusterInstanceId,KubernetesService kubernetesService) {
            Map<String, KubernetesService> kubernetesServicesMap = clusterInstanceToKubernetesServicesMap.get(clusterInstanceId);
            if(kubernetesServicesMap == null) {
                kubernetesServicesMap = new HashMap<>();
                this.clusterInstanceToKubernetesServicesMap.put(clusterInstanceId, kubernetesServicesMap);
            }
            kubernetesServicesMap.put(kubernetesService.getId(), kubernetesService);
        }
}

class KubernetesService {
        public String getId() {
            return id;
        }
}",1
82829,NetworkPartition,getPartition,"class NetworkPartition {
        public Partition getPartition(String partitionId) {
            for (Partition partition : partitions) {
                if (partition.getId().equals(partitionId)) {
                    return partition;
                }
            }
            return null;
        }
}

class Partition {
    public void getId() {}
}",1
82830,TopologyConfig,setProperty,"class TopologyConfig {
        public void setProperty(String key, String value) {
            properties.put(key, value);
        }
}

class Properties {
    public void put() {}
}",0
82831,TopologyConfig,getProperty,"class TopologyConfig {
        public String getProperty(String key) {
            if (properties.containsKey(key)) {
                return properties.get(key);
            }
            return null;
        }
}

class Properties {
    public void get() {}
    public void containsKey() {}
}",0
82832,CommandContext,put,"class CommandContext {
        public Object put(String key, Object o) {
            Object previous = properties.put(key, o);
            setChanged();
            notifyObservers();
            return previous;
        }
}

class Properties {
    public void put() {}
}",0
82833,StratosApplication,constructOptions,"class StratosApplication {
        private Options constructOptions() {
            final Options options = new Options();
            Option usernameOption = new Option(CliConstants.USERNAME_OPTION, CliConstants.USERNAME_LONG_OPTION, true,
                    ""Username"");
            usernameOption.setArgName(""username"");
            options.addOption(usernameOption);
            Option passwordOption = new Option(CliConstants.PASSWORD_OPTION, CliConstants.PASSWORD_LONG_OPTION, true,
                    ""Password"");
            passwordOption.setArgName(""password"");
            passwordOption.setOptionalArg(true);
            options.addOption(passwordOption);
            options.addOption(CliConstants.HELP_OPTION, CliConstants.HELP_LONG_OPTION, false, ""Display this help"");
            options.addOption(CliConstants.TRACE_OPTION, false, ""Enable trace logging"");
            options.addOption(CliConstants.DEBUG_OPTION, false, ""Enable debug logging"");
            return options;
        }
}

class Options {
    public void addOption() {}
}",0
82834,StratosApplication,createCommands,"class StratosApplication {
        private void createCommands() {
            Command<StratosCommandContext> command = new HelpCommand();
            commands.put(command.getName(), command);
            command = new ExitCommand();
            commands.put(command.getName(), command);
            command = new ListCartridgesCommand();
            commands.put(command.getName(), command);
            command = new AddTenantCommand();
            commands.put(command.getName(), command);
            command = new AddUserCommand();
            commands.put(command.getName(), command);
            command = new DeleteUserCommand();
            commands.put(command.getName(), command);
            command = new ListUsers();
}

class Commands {
    public void keySet() {}
    public void put() {}
    public void size() {}
}

class Command {
        String getName();
}

class Logger {
    public void debug() {}
    public void isDebugEnabled() {}
}",1
82835,StratosApplication,createAutocomplete,"class StratosApplication {
        private void createAutocomplete() {
            reader.addCompleter(new CommandCompleter(commands));
        }
}

class Reader {
    public void addCompleter() {}
}",1
82836,StratosApplication,run,"class StratosApplication {
        public int run(String[] args) {
            boolean loaded = loadRequiredProperties();
            if (!loaded) {
                return CliConstants.ERROR_CODE;
            }
            String[] remainingArgs = null;
            String action = null;
            Option[] actionOptions = null;
            String usernameInput = null;
            String passwordInput = null;
            if (args != null && args.length > 0) {
                if (logger.isDebugEnabled()) {
}

class Logger {
    public void debug() {}
    public void trace() {}
    public void isErrorEnabled() {}
    public void isTraceEnabled() {}
    public void isDebugEnabled() {}
    public void error() {}
}

class Commands {
    public void get() {}
    public void values() {}
}

class Command {
        void execute(List<String> tokens) throws Exception;
    public void getOptions() {}
}

class Options {
    public void getOptions() {}
}

class Parser {
        <T extends Element> Document<T> parse(ReadableByteChannel buf, ParserOptions options) throws ParseException;
}

class CommandLine {
    public void getArgs() {}
        public String getOptionValue(String option, String defaultValue) {
            String value = getOptionValue(option);
            return value == null ? defaultValue : value;
        }
        public boolean hasOption(String option) {
            return optionValues.containsKey(option);
        }
    public void getOptions() {}
}

class e {
    public void getMessage() {}
}",0
82837,StratosApplication,login,"class StratosApplication {
        private boolean login(String usernameInput, String passwordInput, boolean validateLogin) {
            if (StringUtils.isBlank(usernameInput) && StringUtils.isBlank(passwordInput)) {
                usernameInput = context.getString(CliConstants.STRATOS_USERNAME_ENV_PROPERTY);
                passwordInput = context.getString(CliConstants.STRATOS_PASSWORD_ENV_PROPERTY);
                if (logger.isDebugEnabled()) {
                    if (StringUtils.isNotBlank(usernameInput) && StringUtils.isNotBlank(passwordInput)) {
                        logger.debug(""Found authentication details for {} from context"", usernameInput);
                    }
                }
            }
            if (StringUtils.isBlank(usernameInput)) {
                usernameInput = getInput(""Username"");
            }
            if (StringUtils.isBlank(passwordInput)) {
                passwordInput = getInput(""Password"", '*');
            }
            boolean success = false;
            String stratosURL = null;
            stratosURL = context.getString(CliConstants.STRATOS_URL_ENV_PROPERTY);
            if (username == null) {
                reader = null;
                reader = createConsoleReaderWhithoutArgs(usernameInput);
            }
            createAutocomplete();
            try {
                success = RestCommandLineService.getInstance().login(stratosURL, usernameInput, passwordInput, validateLogin);
            } catch (Exception e) {
                if (logger.isErrorEnabled()) {
                    logger.error(""Error when trying to login"", e);
                }
            }
            if (success) {
                if (logger.isDebugEnabled()) {
                    logger.debug(""Successfully authenticated"");
                }
            } else {
                if (logger.isDebugEnabled()) {
                    logger.debug(""Authentication failed."");
                }
            }
            return success;
        }
}

class Context {
    public void getString() {}
}

class Logger {
    public void debug() {}
    public void error() {}
    public void isErrorEnabled() {}
    public void isDebugEnabled() {}
}",0
82838,StratosApplication,executeCommand,"class StratosApplication {
        protected int executeCommand(String line) {
            String[] tokens = new StrTokenizer(line).getTokenArray();
            String action = tokens[0];
            String[] actionArgs = Arrays.copyOfRange(tokens, 1, tokens.length);
            if (logger.isDebugEnabled()) {
                logger.debug(""Executing command action: {}, Tokens: {}"", action, tokens.length);
            }
            Command<StratosCommandContext> command = commands.get(action);
            if (command == null) {
                System.out.println(action + "": command not found."");
                return CliConstants.COMMAND_FAILED;
            }
            try {
                return command.execute(context, actionArgs, new Option[0]);
            } catch (CommandException e) {
                if (logger.isErrorEnabled()) {
                    logger.error(""Error executing command: "" + action, e);
                }
                return CliConstants.ERROR_CODE;
            }
        }
}

class Logger {
    public void debug() {}
    public void error() {}
    public void isErrorEnabled() {}
    public void isDebugEnabled() {}
}

class Commands {
    public void get() {}
}

class Command {
        void execute(List<String> tokens) throws Exception;
}",0
82839,StratosApplication,loadRequiredProperties,"class StratosApplication {
        private boolean loadRequiredProperties() {
            if (logger.isDebugEnabled()) {
                logger.debug(""Loading properties..."");
            }
            String stratosURL = null;
            String username = null;
            String password = null;
            stratosURL = System.getenv(CliConstants.STRATOS_URL_ENV_PROPERTY);
            username = System.getenv(CliConstants.STRATOS_USERNAME_ENV_PROPERTY);
            password = System.getenv(CliConstants.STRATOS_PASSWORD_ENV_PROPERTY);
            if (StringUtils.isBlank(stratosURL)) {
                if (logger.isDebugEnabled()) {
                    logger.debug(""Required configuration not found."");
                }
                System.out.format(""Could not find required \""%s\"" variable in your environment.%n"",
                        CliConstants.STRATOS_URL_ENV_PROPERTY);
                return false;
            }
            if (logger.isDebugEnabled()) {
                logger.debug(""Required configuration found. Validating {}"", stratosURL);
            }
            int slashCount = StringUtils.countMatches(stratosURL, ""/"");
            int colonCount = StringUtils.countMatches(stratosURL, "":"");
            UrlValidator urlValidator = new UrlValidator(new String[]{""https""}, UrlValidator.ALLOW_LOCAL_URLS);
            if (!urlValidator.isValid(stratosURL) || colonCount != 2 || slashCount > 3) {
                if (logger.isDebugEnabled()) {
                    logger.debug(""Stratos Controller URL {} is not valid"", stratosURL);
                }
                System.out.format(
                        ""The \""%s\"" variable in your environment is not a valid URL. You have provided \""%s\"".%n""
                                + ""Please provide the Stratos Controller URL as follows%nhttps:
                        CliConstants.STRATOS_URL_ENV_PROPERTY, stratosURL);
                return false;
            }
            if (logger.isDebugEnabled()) {
                logger.debug(""Stratos Controller URL {} is valid."", stratosURL);
                logger.debug(""Adding the values to context."");
            }
            context.put(CliConstants.STRATOS_URL_ENV_PROPERTY, stratosURL);
            context.put(CliConstants.STRATOS_USERNAME_ENV_PROPERTY, username);
            context.put(CliConstants.STRATOS_PASSWORD_ENV_PROPERTY, password);
            return true;
        }
}

class Logger {
    public void debug() {}
    public void isDebugEnabled() {}
}

class UrlValidator {
        public boolean isValid(final String value) {
            if (value == null) {
                return false;
            }
            final URI uri;
            try {
                uri = new URI(value);
            } catch (final URISyntaxException e) {
                return false;
            }
            final String scheme = uri.getScheme();
            if (!isValidScheme(scheme)) {
                return false;
            }
            final String authority = uri.getRawAuthority();
            if (""file"".equals(scheme) && GenericValidator.isBlankOrNull(authority)) {
                return true;
            }
            if (""file"".equals(scheme) && authority != null && authority.contains("":"") || !isValidAuthority(authority)) {
                return false;
            }
            if (!isValidPath(uri.getRawPath()) || !isValidQuery(uri.getRawQuery()) || !isValidFragment(uri.getRawFragment())) {
                return false;
            }
            return true;
        }
}

class Context {
    public void put() {}
}",0
82840,StratosApplication,setLoggerLevel,"class StratosApplication {
        private void setLoggerLevel(boolean trace, boolean debug) {
            org.apache.log4j.Logger logger = LogManager.getLogger(StratosApplication.class.getPackage().getName());
            if (logger != null && trace) {
                logger.setLevel(Level.TRACE);
                LogManager.getRootLogger().setLevel(Level.TRACE);
            } else if (logger != null && debug) {
                logger.setLevel(Level.DEBUG);
                LogManager.getRootLogger().setLevel(Level.DEBUG);
            }
        }
}

class LogManager {
    public void getLogger() {}
    public void getRootLogger() {}
}

class Logger {
    public void setLevel() {}
}",1
82841,StratosApplication,printUsage,"class StratosApplication {
        private void printUsage(final String commandLineSyntax, final Options options) {
            final PrintWriter writer = new PrintWriter(System.out);
            final HelpFormatter usageFormatter = new HelpFormatter();
            usageFormatter.printUsage(writer, 80, commandLineSyntax, options);
            writer.flush();
        }
}

class Writer {
    public void flush() {}
}",1
82842,InfoCommand,execute,"class InfoCommand {
        public int execute(StratosCommandContext context, String[] args, Option[] alreadyParsedOpts) throws CommandException {
            if (log.isDebugEnabled()) {
                log.debug(""Executing {} command..."", getName());
            }
            throw new RuntimeException(""Not implemented"");
        }
}

class Log {
    public void debug() {}
    public void isDebugEnabled() {}
}",1
82843,ExceptionMapper,toString,"class ExceptionMapper {
        public String toString() {
            return Error.toString();
        }
}

class Error {
    public void toString() {}
}",1
82844,Monitor,addInstance,"class Monitor {
        public void addInstance(Instance instance) {
            instanceIdToInstanceMap.put(instance.getInstanceId(), instance);
        }
}

class Instance {
    public void getInstanceId() {}
}",1
82845,Monitor,getInstancesByParentInstanceId,"class Monitor {
        public List<String> getInstancesByParentInstanceId(String parentInstanceId) {
            List<String> instances = new ArrayList<String>();
            for (Instance instance : instanceIdToInstanceMap.values()) {
                if (instance.getParentId() != null && instance.getParentId().equals(parentInstanceId)) {
                    instances.add(instance.getInstanceId());
                }
            }
            return instances;
        }
}

class Instance {
    public void getParentId() {}
    public void getInstanceId() {}
}",1
82846,RuleLog,info,"class RuleLog {
        public boolean info(String value) {
            if (log.isInfoEnabled()) {
                log.info(value);
            }
            return true;
        }
}

class Log {
    public void isInfoEnabled() {}
    public void info() {}
}",1
82847,RuleLog,debug,"class RuleLog {
        public boolean debug(String value) {
            if (log.isDebugEnabled()) {
                log.debug(value);
            }
            return true;
        }
}

class Log {
    public void debug() {}
    public void isDebugEnabled() {}
}",1
82848,RuleLog,warn,"class RuleLog {
        public boolean warn(String value) {
            if (log.isWarnEnabled()) {
                log.warn(value);
            }
            return true;
        }
}

class Log {
    public void isWarnEnabled() {}
    public void warn() {}
}",1
82849,RuleLog,error,"class RuleLog {
        public boolean error(String value) {
            if (log.isErrorEnabled()) {
                log.error(value);
            }
            return true;
        }
}

class Log {
    public void error() {}
    public void isErrorEnabled() {}
}",1
82850,AutoscalerObjectConverter,convertPartitionToCCPartition,"class AutoscalerObjectConverter {
        convertPartitionToCCPartition(PartitionRef partition) {
            org.apache.stratos.cloud.controller.stub.domain.Partition cloudControllerPartition = new
                    org.apache.stratos.cloud.controller.stub.domain.Partition();
            cloudControllerPartition.setId(partition.getId());
            cloudControllerPartition.setDescription(partition.getDescription());
            cloudControllerPartition.setKubernetesClusterId(partition.getKubernetesClusterId());
            cloudControllerPartition.setProperties(AutoscalerUtil.toStubProperties(partition.getProperties()));
            return cloudControllerPartition;
        }
}

class Partition {
    public void getKubernetesClusterId() {}
    public void getProperties() {}
    public void getId() {}
    public void getDescription() {}
}",1
82851,AutoscalerObjectConverter,convertPropertiesToCCProperties,"class AutoscalerObjectConverter {
        public static org.apache.stratos.cloud.controller.stub.Properties convertPropertiesToCCProperties(Properties properties) {
            org.apache.stratos.cloud.controller.stub.Properties ccProperties
                    = new org.apache.stratos.cloud.controller.stub.Properties();
            Property[] propertyArray = properties.getProperties();
            for (Property property : properties.getProperties()) {
                org.apache.stratos.cloud.controller.stub.Property ccProperty
                        = new org.apache.stratos.cloud.controller.stub.Property();
                ccProperty.setName(property.getName());
                ccProperty.setName(property.getName());
                ccProperties.addProperties(ccProperty);
            }
            return ccProperties;
        }
}

class Properties {
        Map<String, PropertyData<?>> getProperties();
}

class Property {
        String getName();
}",1
82852,AutoscalerObjectConverter,convertCCPropertiesToProperties,"class AutoscalerObjectConverter {
        public static Properties convertCCPropertiesToProperties(
                org.apache.stratos.cloud.controller.stub.Properties ccProperties) {
            Properties properties = new Properties();
            if (ccProperties.getProperties() != null) {
                for (org.apache.stratos.cloud.controller.stub.Property ccProperty : ccProperties.getProperties()) {
                    Property property = new Property();
                    property.setName(ccProperty.getName());
                    property.setValue(ccProperty.getValue());
                    properties.addProperty(property);
                }
            }
            return properties;
        }
}

class Property {
    public void setName() {}
    public void setValue() {}
}

class Properties {
    public void addProperty() {}
}",0
82853,AutoscalerObjectConverter,convertCCPartitionsToPartitions,"class AutoscalerObjectConverter {
        public static PartitionRef[] convertCCPartitionsToPartitions(org.apache.stratos.cloud.controller.stub.domain.Partition[] ccPartitions) {
            List<PartitionRef> partitions = new ArrayList<PartitionRef>();
            for (org.apache.stratos.cloud.controller.stub.domain.Partition ccPartition : ccPartitions) {
                PartitionRef partition = convertCCPartitionToPartition(ccPartition);
                partitions.add(partition);
            }
            return partitions.toArray(new PartitionRef[ccPartitions.length]);
        }
}

class Partitions {
    public void toArray() {}
    public void add() {}
}",0
82854,AutoscalerObjectConverter,convertCCPartitionToPartition,"class AutoscalerObjectConverter {
        public static PartitionRef convertCCPartitionToPartition(org.apache.stratos.cloud.controller.stub.domain.Partition ccPartition) {
            PartitionRef partition = new PartitionRef();
            partition.setId(ccPartition.getId());
            partition.setDescription(ccPartition.getDescription());
            partition.setProperties(convertCCPropertiesToProperties(ccPartition.getProperties()));
            return partition;
        }
}

class Partition {
    public void setDescription() {}
    public void setId() {}
    public void setProperties() {}
}",0
82855,StatusProcessorChain,add,"class StatusProcessorChain {
        public void add(StatusProcessor messageProcessor) {
            if (list.size() > 0) {
                list.getLast().setNext(messageProcessor);
            }
            list.add(messageProcessor);
        }
}

class List {
    public void size() {}
    public void getLast() {}
    public void add() {}
}",1
82856,StatusProcessorChain,removeLast,"class StatusProcessorChain {
        public void removeLast() {
            list.removeLast();
            if (list.size() > 0) {
                list.getLast().setNext(null);
            }
        }
}

class List {
    public void size() {}
    public void getLast() {}
    public void removeLast() {}
}",1
82857,ParentInstanceContext,addScalingEvent,"class ParentInstanceContext {
        public void addScalingEvent(ScalingEvent scalingEvent) {
            this.idToScalingEvent.put(scalingEvent.getId(), scalingEvent);
        }
}

class ScalingEvent {
        public String getId() {
            return id;
        }
}",1
82858,ParentInstanceContext,addScalingOverMaxEvent,"class ParentInstanceContext {
        public void addScalingOverMaxEvent(ScalingUpBeyondMaxEvent scalingUpBeyondMaxEvent) {
            this.idToScalingOverMaxEvent.put(scalingUpBeyondMaxEvent.getId(), scalingUpBeyondMaxEvent);
        }
}

class ScalingUpBeyondMaxEvent {
        public String getId() {
            return id;
        }
}",1
82859,ParentInstanceContext,addScalingDownBeyondMinEvent,"class ParentInstanceContext {
        public void addScalingDownBeyondMinEvent(ScalingDownBeyondMinEvent scalingDownBeyondMinEvent) {
            this.idToScalingDownBeyondMinEvent.put(scalingDownBeyondMinEvent.getId(), scalingDownBeyondMinEvent);
        }
}

class ScalingDownBeyondMinEvent {
        public String getId() {
            return id;
        }
}",1
82860,AbstractClusterContext,addClusterInstance,"class AbstractClusterContext {
        public void addClusterInstance(ClusterInstance instance) {
            this.clusterInstanceMap.put(instance.getInstanceId(), instance);
        }
}

class Instance {
    public void getInstanceId() {}
}",1
82861,AllAtOnceAlgorithm,getNextNetworkPartitions,"class AllAtOnceAlgorithm {
        public List<String> getNextNetworkPartitions(NetworkPartitionAlgorithmContext networkPartitionAlgorithmContext) {
            if (networkPartitionAlgorithmContext == null) {
                return null;
            }
            ApplicationPolicy applicationPolicy = PolicyManager.getInstance().getApplicationPolicy(
                    networkPartitionAlgorithmContext.getApplicationPolicyId());
            if (applicationPolicy == null) {
                return null;
            }
            String[] networkPartitions = applicationPolicy.getNetworkPartitions();
            if (networkPartitions == null || networkPartitions.length == 0) {
                return null;
            }
            return Arrays.asList(networkPartitions);
        }
}

class PolicyManager {
    public void getInstance() {}
}

class ApplicationPolicy {
        public String[] getNetworkPartitions() {
            return networkPartitions;
        }
}",1
82862,AllAtOnceAlgorithm,getDefaultNetworkPartitions,"class AllAtOnceAlgorithm {
        public List<String> getDefaultNetworkPartitions(NetworkPartitionAlgorithmContext
                                                                networkPartitionAlgorithmContext) {
            if (networkPartitionAlgorithmContext == null) {
                return null;
            }
            ApplicationPolicy applicationPolicy = PolicyManager.getInstance().getApplicationPolicy(
                    networkPartitionAlgorithmContext.getApplicationPolicyId());
            if (applicationPolicy == null) {
                return null;
            }
            String[] networkPartitions = applicationPolicy.getNetworkPartitions();
            if (networkPartitions == null || networkPartitions.length == 0) {
                return null;
            }
            return Arrays.asList(networkPartitions);
        }
}

class PolicyManager {
    public void getInstance() {}
}

class ApplicationPolicy {
        public String[] getNetworkPartitions() {
            return networkPartitions;
        }
}",1
82863,DorisSink,sink,"class DorisSink {
      public DataStreamSink<T> sink(org.apache.flink.streaming.api.scala.DataStream<T> source) {
        DorisSinkFunction<T> sinkFunction = new DorisSinkFunction<>(context);
        return source.addSink(sinkFunction);
      }
}

class Source {
    public void addSink() {}
}",1
82864,DockerConfig,toSettings,"class DockerConfig {
        public static List<Setting> toSettings(DockerConfig dockerConfig) {
            Setting address = new Setting();
            address.setSettingKey(SettingService.KEY_DOCKER_REGISTER_ADDRESS);
            address.setSettingValue(dockerConfig.getAddress());
            Setting username = new Setting();
            username.setSettingKey(SettingService.KEY_DOCKER_REGISTER_USER);
            username.setSettingValue(dockerConfig.getUsername());
            Setting password = new Setting();
            password.setSettingKey(SettingService.KEY_DOCKER_REGISTER_PASSWORD);
            password.setSettingValue(dockerConfig.getPassword());
            Setting namespace = new Setting();
            namespace.setSettingKey(SettingService.KEY_DOCKER_REGISTER_NAMESPACE);
            namespace.setSettingValue(dockerConfig.getNamespace());
            return Arrays.asList(address, username, password, namespace);
        }
}

class Address {
    public void setSettingValue() {}
    public void setSettingKey() {}
}

class Password {
    public void setSettingValue() {}
    public void setSettingKey() {}
}

class Namespace {
    public void setSettingValue() {}
    public void setSettingKey() {}
}",1
82865,MavenConfig,fromSetting,"class MavenConfig {
        public static MavenConfig fromSetting() {
            MavenConfig mavenConfig = new MavenConfig();
            Map<String, Setting> settings = SettingService.SETTINGS;
            if (settings.containsKey(CommonConfig.MAVEN_SETTINGS_PATH().key())) {
                mavenConfig.setMvnSettings(
                    settings.get(CommonConfig.MAVEN_SETTINGS_PATH().key()).getSettingValue());
            }
            if (settings.containsKey(CommonConfig.MAVEN_REMOTE_URL().key())) {
                mavenConfig.setMvnRepository(
                    settings.get(CommonConfig.MAVEN_REMOTE_URL().key()).getSettingValue());
            }
            if (settings.containsKey(CommonConfig.MAVEN_AUTH_USER().key())) {
                mavenConfig.setMvnAuthUser(
                    settings.get(CommonConfig.MAVEN_AUTH_USER().key()).getSettingValue());
            }
            if (settings.containsKey(CommonConfig.MAVEN_AUTH_PASSWORD().key())) {
                mavenConfig.setMvnAuthPassword(
                    settings.get(CommonConfig.MAVEN_AUTH_PASSWORD().key()).getSettingValue());
            }
            return mavenConfig;
        }
}

class Settings {
    public void get() {}
    public void containsKey() {}
}

class CommonConfig {
    public void MAVEN_AUTH_USER() {}
    public void MAVEN_REMOTE_URL() {}
    public void MAVEN_AUTH_PASSWORD() {}
    public void MAVEN_SETTINGS_PATH() {}
}",1
82866,MavenConfig,updateConfig,"class MavenConfig {
        public void updateConfig() {
            if (StringUtils.isNotBlank(mvnSettings)) {
                InternalConfigHolder.set(CommonConfig.MAVEN_SETTINGS_PATH(), mvnSettings);
            }
            if (StringUtils.isNotBlank(mvnRepository)) {
                InternalConfigHolder.set(CommonConfig.MAVEN_REMOTE_URL(), mvnRepository);
            }
            if (StringUtils.isNotBlank(mvnAuthUser)) {
                InternalConfigHolder.set(CommonConfig.MAVEN_AUTH_USER(), mvnAuthUser);
            }
            if (StringUtils.isNotBlank(mvnAuthPassword)) {
                InternalConfigHolder.set(CommonConfig.MAVEN_AUTH_PASSWORD(), mvnAuthPassword);
            }
        }
}

class CommonConfig {
    public void MAVEN_AUTH_USER() {}
    public void MAVEN_REMOTE_URL() {}
    public void MAVEN_AUTH_PASSWORD() {}
    public void MAVEN_SETTINGS_PATH() {}
}",0
82867,FlinkStateChangeEvent,equals,"class FlinkStateChangeEvent {
        public boolean equals(Object object) {
            if (this == object) {
                return true;
            }
            if (object == null || getClass() != object.getClass()) {
                return false;
            }
            FlinkStateChangeEvent that = (FlinkStateChangeEvent) object;
            return Objects.equals(id, that.id)
                && Objects.equals(jobId, that.jobId)
                && Objects.equals(appState, that.appState)
                && Objects.equals(optionState, that.optionState)
                && Objects.equals(jobManagerUrl, that.jobManagerUrl);
        }
}

class Object {
    public void getClass() {}
}

class Objects {
    public void equals() {}
}",0
82868,FlinkStateChangeEvent,hashCode,"class FlinkStateChangeEvent {
        public int hashCode() {
            return Objects.hash(id, jobId, appState, optionState, jobManagerUrl);
        }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
82869,FlinkEffectiveServiceImpl,saveOrUpdate,"class FlinkEffectiveServiceImpl {
        public void saveOrUpdate(Long appId, EffectiveTypeEnum type, Long id) {
            long count = this.lambdaQuery()
                .eq(FlinkEffective::method, appId)
                .eq(FlinkEffective::method, type.getType())
                .count();
            if (count == 0) {
                FlinkEffective effective = new FlinkEffective();
                effective.setAppId(appId);
                effective.setTargetType(type.getType());
                effective.setTargetId(id);
                effective.setCreateTime(new Date());
                save(effective);
            } else {
                update(
                    new LambdaUpdateWrapper<FlinkEffective>()
                        .eq(FlinkEffective::method, appId)
                        .eq(FlinkEffective::method, type.getType())
                        .set(FlinkEffective::method, id));
            }
        }
}

class Type {
    public void getType() {}
}",1
82870,SparkEffectiveServiceImpl,saveOrUpdate,"class SparkEffectiveServiceImpl {
        public void saveOrUpdate(Long appId, EffectiveTypeEnum type, Long id) {
            long count = this.lambdaQuery()
                .eq(SparkEffective::method, appId)
                .eq(SparkEffective::method, type.getType())
                .count();
            if (count == 0) {
                SparkEffective effective = new SparkEffective();
                effective.setAppId(appId);
                effective.setTargetType(type.getType());
                effective.setTargetId(id);
                effective.setCreateTime(new Date());
                save(effective);
            } else {
                update(
                    new LambdaUpdateWrapper<SparkEffective>()
                        .eq(SparkEffective::method, appId)
                        .eq(SparkEffective::method, type.getType())
                        .set(SparkEffective::method, id));
            }
        }
}

class Type {
    public void getType() {}
}",1
82871,SparkEnvServiceImpl,check,"class SparkEnvServiceImpl {
        public FlinkEnvCheckEnum check(SparkEnv version) {
            boolean exists = this.lambdaQuery()
                .eq(SparkEnv::method,
                    version.getSparkName())
                .ne(version.getId() != null, SparkEnv::method, version.getId())
                .exists();
            if (exists) {
                return FlinkEnvCheckEnum.NAME_REPEATED;
            }
            String lib = version.getSparkHome().concat(""/jars"");
            File sparkLib = new File(lib);
            if (!sparkLib.exists() || !sparkLib.isDirectory()) {
                return FlinkEnvCheckEnum.INVALID_PATH;
            }
            return FlinkEnvCheckEnum.OK;
        }
}

class Version {
    public void getSparkName() {}
    public void getId() {}
    public void getSparkHome() {}
}",1
82872,SparkEnvServiceImpl,create,"class SparkEnvServiceImpl {
        public boolean create(SparkEnv version) throws Exception {
            long count = this.baseMapper.selectCount(null);
            version.setIsDefault(count == 0);
            version.setCreateTime(new Date());
            version.doSetSparkConf();
            version.doSetVersion();
            return save(version);
        }
}

class Version {
    public void setCreateTime() {}
    public void doSetSparkConf() {}
    public void setIsDefault() {}
    public void doSetVersion() {}
}",1
82873,SparkEnvServiceImpl,update,"class SparkEnvServiceImpl {
        public void update(SparkEnv version) throws IOException {
            SparkEnv sparkEnv = getById(version.getId());
            checkOrElseAlert(sparkEnv);
            sparkEnv.setDescription(version.getDescription());
            sparkEnv.setSparkName(version.getSparkName());
            if (!version.getSparkHome().equals(sparkEnv.getSparkHome())) {
                sparkEnv.setSparkHome(version.getSparkHome());
                sparkEnv.doSetSparkConf();
                sparkEnv.doSetVersion();
            }
            updateById(sparkEnv);
        }
}

class Version {
    public void getSparkName() {}
    public void getId() {}
    public void getDescription() {}
    public void getSparkHome() {}
}",1
82874,ApiAlertException,throwIfNull,"class ApiAlertException {
        public static void throwIfNull(Object object, String errorMsgFmt, Object... args) {
            if (Objects.isNull(object)) {
                if (args == null || args.length < 1) {
                    throw new ApiAlertException(errorMsgFmt);
                }
                throw new ApiAlertException(String.format(errorMsgFmt, args));
            }
        }
}

class Objects {
    public void isNull() {}
}",0
82875,ApiAlertException,throwIfNotNull,"class ApiAlertException {
        public static void throwIfNotNull(Object object, String errorMsgFmt, Object... args) {
            if (!Objects.isNull(object)) {
                if (args == null || args.length < 1) {
                    throw new ApiAlertException(errorMsgFmt);
                }
                throw new ApiAlertException(String.format(errorMsgFmt, args));
            }
        }
}

class Objects {
    public void isNull() {}
}",0
82876,ConsistentHash,add,"class ConsistentHash {
        public void add(T server) {
            for (int i = 0; i < numberOfReplicas; i++) {
                circle.put(Murmur3Hash.hash64(server.toString() + i), server);
            }
        }
}

class Murmur3Hash {
    public void hash64() {}
}

class Server {
    public void toString() {}
}",1
82877,ConsistentHash,remove,"class ConsistentHash {
        public void remove(T server) {
            for (int i = 0; i < numberOfReplicas; i++) {
                circle.remove(Murmur3Hash.hash64(server.toString() + i));
            }
        }
}

class Murmur3Hash {
    public void hash64() {}
}

class Server {
    public void toString() {}
}",1
82878,ConsistentHash,get,"class ConsistentHash {
        public T get(Object key) {
            if (circle.isEmpty()) {
                return null;
            }
            long hash = Murmur3Hash.hash64(key.toString());
            if (!circle.containsKey(hash)) {
                SortedMap<Long, T> tailMap = circle.tailMap(hash);
                hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();
            }
            return circle.get(hash);
        }
}

class Murmur3Hash {
    public void hash64() {}
}

class Key {
    public void toString() {}
}",1
82879,JacksonUtils,read,"class JacksonUtils {
        public static <T> T read(String json, TypeReference<T> typeReference) throws JsonProcessingException {
            return MAPPER.readValue(json, typeReference);
        }
}

class Mapper {
    public void readValue() {}
}",1
82880,JacksonUtils,write,"class JacksonUtils {
        public static String write(Object object) throws JsonProcessingException {
            return MAPPER.writeValueAsString(object);
        }
}

class Mapper {
    public void writeValueAsString() {}
}",1
82881,JacksonUtils,isValidJson,"class JacksonUtils {
        public static boolean isValidJson(String jsonStr) {
            try {
                JsonNode jsonNode = MAPPER.readTree(jsonStr);
                return true;
            } catch (IOException e) {
                return false;
            }
        }
}

class Mapper {
    public void readTree() {}
}",1
82882,JacksonUtils,toMap,"class JacksonUtils {
        public static Map<String, String> toMap(String jsonStr) throws JsonProcessingException {
            return (Map<String, String>) MAPPER.readValue(jsonStr, Map.class);
        }
}

class Mapper {
    public void readValue() {}
}",1
82883,ObjectUtils,containsConstant,"class ObjectUtils {
        public static boolean containsConstant(
                                               Enum<?>[] enumValues, String constant, boolean caseSensitive) {
            for (Enum<?> candidate : enumValues) {
                if (caseSensitive
                    ? candidate.toString().equals(constant)
                    : candidate.toString().equalsIgnoreCase(constant)) {
                    return true;
                }
            }
            return false;
        }
}

class Candidate {
    public void toString() {}
}",1
82884,ObjectUtils,caseInsensitiveValueOf,"class ObjectUtils {
        public static <E extends Enum<?>> E caseInsensitiveValueOf(E[] enumValues, String constant) {
            for (E candidate : enumValues) {
                if (candidate.toString().equalsIgnoreCase(constant)) {
                    return candidate;
                }
            }
            throw new IllegalArgumentException(
                String.format(
                    ""constant [%s] does not exist in enum type %s"",
                    constant, enumValues.getClass().getComponentType().getName()));
        }
}

class Candidate {
    public void toString() {}
}",1
82885,ObjectUtils,addObjectToArray,"class ObjectUtils {
        public static <A, O extends A> A[] addObjectToArray(A[] array, O obj) {
            Class<?> compType = Object.class;
            if (array != null) {
                compType = array.getClass().getComponentType();
            } else if (obj != null) {
                compType = obj.getClass();
            }
            int newArrLength = (array != null ? array.length + 1 : 1);
            @SuppressWarnings(""all"")
            A[] newArr = (A[]) Array.newInstance(compType, newArrLength);
            if (array != null) {
                System.arraycopy(array, 0, newArr, 0, array.length);
            }
            newArr[newArr.length - 1] = obj;
            return newArr;
        }
}

class Array {
    public void getClass() {}
}

class Array {
    public void newInstance() {}
}",0
82886,ObjectUtils,toObjectArray,"class ObjectUtils {
        public static Object[] toObjectArray(Object source) {
            if (source instanceof Object[]) {
                return (Object[]) source;
            }
            if (source == null) {
                return new Object[0];
            }
            if (!source.getClass().isArray()) {
                throw new IllegalArgumentException(""Source is not an array: "" + source);
            }
            int length = Array.getLength(source);
            if (length == 0) {
                return new Object[0];
            }
            @SuppressWarnings(""all"")
            Class wrapperType = Array.get(source, 0).getClass();
            Object[] newArray = (Object[]) Array.newInstance(wrapperType, length);
            for (int i = 0; i < length; i++) {
                newArray[i] = Array.get(source, i);
            }
            return newArray;
        }
}

class Source {
    public void getClass() {}
}

class Array {
    public void get() {}
    public void getLength() {}
    public void newInstance() {}
}",0
82887,ObjectUtils,trimEquals,"class ObjectUtils {
        public static boolean trimEquals(Object o1, Object o2) {
            boolean equals = Objects.deepEquals(o1, o2);
            if (!equals && o1 instanceof String && o2 instanceof String) {
                return o1.toString().trim().equals(o2.toString().trim());
            }
            return equals;
        }
}

class Objects {
    public void deepEquals() {}
}",0
82888,SpringContextUtils,containsBean,"class SpringContextUtils {
        public static boolean containsBean(String name) {
            return applicationContext.containsBean(name);
        }
}

class ApplicationContext {
    public void containsBean() {}
}",1
82889,Tuple1,equals,"class Tuple1 {
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Tuple1)) {
                return false;
            }
            @SuppressWarnings(""all"")
            Tuple1 tuple = (Tuple1) o;
            return Objects.equals(t1, tuple.t1);
        }
}

class Objects {
    public void equals() {}
}",0
82890,Tuple1,hashCode,"class Tuple1 {
        public int hashCode() {
            return t1 != null ? t1.hashCode() : 0;
        }
}

class T1 {
    public void hashCode() {}
}",1
82891,Tuple2,equals,"class Tuple2 {
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Tuple2)) {
                return false;
            }
            @SuppressWarnings(""all"")
            Tuple2 tuple = (Tuple2) o;
            if (!Objects.equals(t1, tuple.t1)) {
                return false;
            }
            return Objects.equals(t2, tuple.t2);
        }
}

class Objects {
    public void equals() {}
}",0
82892,Tuple2,hashCode,"class Tuple2 {
        public int hashCode() {
            int result = t1 != null ? t1.hashCode() : 0;
            result = 31 * result + (t2 != null ? t2.hashCode() : 0);
            return result;
        }
}

class T1 {
    public void hashCode() {}
}",1
82893,Tuple3,equals,"class Tuple3 {
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Tuple3)) {
                return false;
            }
            @SuppressWarnings(""all"")
            Tuple3 tuple = (Tuple3) o;
            if (!Objects.equals(t1, tuple.t1)) {
                return false;
            }
            if (!Objects.equals(t2, tuple.t2)) {
                return false;
            }
            return Objects.equals(t3, tuple.t3);
        }
}

class Objects {
    public void equals() {}
}",0
82894,Tuple3,hashCode,"class Tuple3 {
        public int hashCode() {
            int result = t1 != null ? t1.hashCode() : 0;
            result = 31 * result + (t2 != null ? t2.hashCode() : 0);
            result = 31 * result + (t3 != null ? t3.hashCode() : 0);
            return result;
        }
}

class T1 {
    public void hashCode() {}
}",1
82895,Tuple4,equals,"class Tuple4 {
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Tuple4)) {
                return false;
            }
            @SuppressWarnings(""all"")
            Tuple4 tuple = (Tuple4) o;
            if (!Objects.equals(t1, tuple.t1)) {
                return false;
            }
            if (!Objects.equals(t2, tuple.t2)) {
                return false;
            }
            if (!Objects.equals(t3, tuple.t3)) {
                return false;
            }
            return Objects.equals(t4, tuple.t4);
        }
}

class Objects {
    public void equals() {}
}",0
82896,Tuple4,hashCode,"class Tuple4 {
        public int hashCode() {
            int result = t1 != null ? t1.hashCode() : 0;
            result = 31 * result + (t2 != null ? t2.hashCode() : 0);
            result = 31 * result + (t3 != null ? t3.hashCode() : 0);
            result = 31 * result + (t4 != null ? t4.hashCode() : 0);
            return result;
        }
}

class T1 {
    public void hashCode() {}
}",1
82897,AbstractQueryGenerator,join,"class AbstractQueryGenerator {
      public static String join(String... substrings) {
        StringJoiner joiner = new StringJoiner(SiddhiConstants.WHITESPACE);
        Arrays.stream(substrings).forEach(joiner::method);
        return joiner.toString();
      }
}

class Joiner {
    public void toString() {}
}",1
82898,Expression,join,"class Expression {
      protected String join(String delimiter, List<String> substrings) {
        StringJoiner joiner = new StringJoiner(delimiter);
        substrings.forEach(joiner::method);
        return joiner.toString();
      }
}

class Joiner {
    public void toString() {}
}",1
82899,PropertyRenameExpression,toSiddhiEpl,"class PropertyRenameExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.WHITESPACE,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.AS,
            prepareProperty(newPropertyName));
      }
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82900,RelationalOperatorExpression,toSiddhiEpl,"class RelationalOperatorExpression {
      public String toSiddhiEpl() {
        return joinWithParenthesis(SiddhiConstants.EMPTY,
            exp1.toSiddhiEpl(),
            operator.toOperatorString(),
            exp2.toSiddhiEpl());
      }
}

class Operator {
    public void toOperatorString() {}
}",1
82901,AndExpression,toSiddhiEpl,"class AndExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.AND.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82902,AverageExpression,toSiddhiEpl,"class AverageExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.AVERAGE.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82903,CountExpression,toSiddhiEpl,"class CountExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.COUNT.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82904,DistinctCountExpression,toSiddhiEpl,"class DistinctCountExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.DISTINCT_COUNT.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82905,MaxExpression,toSiddhiEpl,"class MaxExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.MAX.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82906,MaxForeverExpression,toSiddhiEpl,"class MaxForeverExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.MAX_FOREVER.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82907,MinExpression,toSiddhiEpl,"class MinExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.MIN.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82908,MinForeverExpression,toSiddhiEpl,"class MinForeverExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.MIN_FOREVER.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82909,OrExpression,toSiddhiEpl,"class OrExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.OR.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82910,StandardDeviationExpression,toSiddhiEpl,"class StandardDeviationExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.STANDARD_DEVIATION.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82911,SumExpression,toSiddhiEpl,"class SumExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.SUM.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82912,UnionSetExpression,toSiddhiEpl,"class UnionSetExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.EMPTY,
            AggregationFunction.UNION_SET.toAggregationFunction(),
            SiddhiConstants.PARENTHESIS_OPEN,
            propertyExpression.toSiddhiEpl(),
            SiddhiConstants.PARENTHESIS_CLOSE);
      }
}

class AggregationFunction {
    public void toAggregationFunction() {}
}

class PropertyExpression {
    public void toSiddhiEpl() {}
}",1
82913,MathExpression,toSiddhiEpl,"class MathExpression {
      public String toSiddhiEpl() {
        return joinWithParenthesis(SiddhiConstants.WHITESPACE,
            op1.toSiddhiEpl(),
            operator.toOperatorString(),
            op2.toSiddhiEpl());
      }
}

class Op1 {
    public void toSiddhiEpl() {}
}

class Operator {
    public void toOperatorString() {}
}

class Op2 {
    public void toSiddhiEpl() {}
}",1
82914,OrderByExpression,toSiddhiEpl,"class OrderByExpression {
      public String toSiddhiEpl() {
        return join(SiddhiConstants.WHITESPACE, property.toSiddhiEpl(), order.name().toLowerCase());
      }
}

class Property {
    public void toSiddhiEpl() {}
}

class Order {
    public void name() {}
}",1
82915,EveryExpression,toSiddhiEpl,"class EveryExpression {
      public String toSiddhiEpl() {
        return joinWithParenthesis(SiddhiConstants.WHITESPACE, SiddhiConstants.EVERY, streamExpression.toSiddhiEpl());
      }
}

class StreamExpression {
      public String toSiddhiEpl() {
        String streamName = this.streamAlias == null ? this.streamName :
                join(SiddhiConstants.EMPTY, this.streamAlias, SiddhiConstants.EQUALS, this.streamName);
        if (this.windowExpression != null) {
          streamName = join(SiddhiConstants.EMPTY, streamName, this.windowExpression.toSiddhiEpl());
        }
        return streamName;
      }
}",1
82916,SiddhiOutputStreamCallback,sendEvents,"class SiddhiOutputStreamCallback {
      private void sendEvents(List<Event> events) {
        collector.collect(SiddhiUtils.toSpEvent(events,
            ((SiddhiListOutputConfig) outputConfig).getListFieldName(),
            runtimeParameters.getOutputSchemaInfo(),
            runtimeParameters.getOutputSourceInfo(),
            streamAttributes));
      }
}

class Collector {
      void collect(T elem);
}",0
82917,SiddhiOutputStreamCallback,sendEvent,"class SiddhiOutputStreamCallback {
      private void sendEvent(Event event) {
        collector.collect(SiddhiUtils.toSpEvent(event,
            runtimeParameters.getOutputSchemaInfo(),
            runtimeParameters.getOutputSourceInfo(),
            streamAttributes));
      }
}

class Collector {
      void collect(T elem);
}",0
82918,KafkaStreamsOutputCollector,collect,"class KafkaStreamsOutputCollector {
      public void collect(Event event) {
        this.outputProducer.publish(outputFormatConverter.fromMap(event.getRaw()));
      }
}

class Event {
    public void getRaw() {}
}",1
82919,FlinkDataSinkRuntime,appendExecutionConfig,"class FlinkDataSinkRuntime {
      public void appendExecutionConfig(IDataSinkProgram program,
                                        DataStream<Event>... convertedStream) {
        program.getSink(convertedStream);
      }
}

class Program {
    public void getSink() {}
}",1
82920,EventToMapConverter,flatMap,"class EventToMapConverter {
      public void flatMap(Event event, Collector<Map<String, Object>> collector) throws Exception {
        collector.collect(new EventConverter(event).toMap());
      }
}

class Collector {
      void collect(T elem);
}",0
82921,MapToEventConverter,flatMap,"class MapToEventConverter {
      public void flatMap(Map<String, Object> inMap, Collector<Event> collector) throws Exception {
        collector.collect(internalRuntimeParameters.makeEvent(runtimeParams, inMap, sourceId));
      }
}

class Collector {
      void collect(T elem);
}",0
82922,ByteArraySerializer,serialize,"class ByteArraySerializer {
      public byte[] serialize(Map<String, Object> event) {
        try {
          return spDataFormatDefinition.fromMap(event);
        } catch (SpRuntimeException e) {
          e.printStackTrace();
          return new byte[0];
        }
      }
}

class e {
    public void printStackTrace() {}
}",0
82923,SimpleJmsSerializer,serialize,"class SimpleJmsSerializer {
      public byte[] serialize(Map<String, Object> payload) {
        try {
          return objectMapper.writeValueAsBytes(payload);
        } catch (JsonProcessingException e) {
          e.printStackTrace();
          return null;
        }
      }
}

class ObjectMapper {
    public void writeValueAsBytes() {}
}

class e {
    public void printStackTrace() {}
}",0
82924,SimpleKafkaSerializer,serialize,"class SimpleKafkaSerializer {
      public byte[] serialize(Map<String, Object> element) {
        return serializer.serialize(element);
      }
}

class Serializer {
        public abstract void serialize(Object object, ObjectContext context, SerializationContext serializationContext);
}",1
82925,InternalRuntimeParameters,makeEvent,"class InternalRuntimeParameters {
      public Event makeEvent(IPipelineElementParameters<?, ?> parameters,
                             Map<String, Object> mapEvent,
                             String sourceId) {
        var index = parameters.getSourceIndex(sourceId);
        return EventFactory.fromMap(
            mapEvent,
            parameters.getInputSourceInfo(index),
            parameters.getInputSchemaInfo(index));
      }
}

class Parameters {
    public void getSourceIndex() {}
    public void getInputSourceInfo() {}
    public void getInputSchemaInfo() {}
}

class EventFactory {
    public void fromMap() {}
}",1
82926,PipelineElementRuntime,onRuntimeInvoked,"class PipelineElementRuntime {
      public Response onRuntimeInvoked(String instanceId,
                                       PeT pipelineElement,
                                       IvT pipelineElementInvocation) {
        try {
          var context = contextGenerator.makeContext(pipelineElementInvocation);
          var parameters = parameterGenerator.makeParameters(pipelineElementInvocation);
          elementId = pipelineElementInvocation.getElementId();
          startRuntime(pipelineElementInvocation, pipelineElement, parameters, context);
          return new Response(elementId, true);
        } catch (Exception e) {
          e.printStackTrace();
          return new Response(elementId, false, e.getMessage());
        }
      }
}

class ContextGenerator {
    public void makeContext() {}
}

class e {
    public void printStackTrace() {}
    public void getMessage() {}
}",1
82927,PipelineElementRuntime,onRuntimeDetached,"class PipelineElementRuntime {
      public Response onRuntimeDetached(String instanceId) {
        try {
          stopRuntime();
          return new Response(elementId, true);
        } catch (Exception e) {
          e.printStackTrace();
          return new Response(elementId, false, e.getMessage());
        }
      }
}

class e {
    public void printStackTrace() {}
    public void getMessage() {}
}",0
82928,DataProcessorContextGenerator,makeContext,"class DataProcessorContextGenerator {
      public EventProcessorRuntimeContext makeContext(DataProcessorInvocation invocation) {
        return new SpEventProcessorRuntimeContext(
            invocation.getCorrespondingUser(),
            RuntimeContextUtils.makeConfigExtractor(),
            RuntimeContextUtils.makeStreamPipesClient(),
            new ExtensionsLogger(invocation.getElementId()));
      }
}

class Invocation {
    public void getCorrespondingUser() {}
    public void getElementId() {}
}

class RuntimeContextUtils {
    public void makeConfigExtractor() {}
    public void makeStreamPipesClient() {}
}",1
82929,DataSinkContextGenerator,makeContext,"class DataSinkContextGenerator {
      public EventSinkRuntimeContext makeContext(DataSinkInvocation invocation) {
        return new SpEventSinkRuntimeContext(
            invocation.getCorrespondingUser(),
            RuntimeContextUtils.makeConfigExtractor(),
            RuntimeContextUtils.makeStreamPipesClient(),
            new ExtensionsLogger(invocation.getElementId()));
      }
}

class Invocation {
    public void getCorrespondingUser() {}
    public void getElementId() {}
}

class RuntimeContextUtils {
    public void makeConfigExtractor() {}
    public void makeStreamPipesClient() {}
}",1
82930,StreamPipesCredentialsMatcher,encode,"class StreamPipesCredentialsMatcher {
      public String encode(CharSequence charSequence) {
        try {
          return PasswordUtil.encryptPassword(charSequence.toString());
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
          e.printStackTrace();
        }
        return null;
      }
}

class CharSequence {
        public String toString();
}

class e {
    public void printStackTrace() {}
}",1
82931,StreamPipesCredentialsMatcher,matches,"class StreamPipesCredentialsMatcher {
      public boolean matches(CharSequence charSequence, String s) {
        try {
          return PasswordUtil.validatePassword(charSequence.toString(), s);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
          e.printStackTrace();
        }
        return false;
      }
}

class CharSequence {
        public String toString();
}

class e {
    public void printStackTrace() {}
}",1
82932,PrivilegeManager,makeDefaultPrivileges,"class PrivilegeManager {
      public List<Privilege> makeDefaultPrivileges() {
        return List.of(
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_PIPELINE_ELEMENT_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_PIPELINE_ELEMENT_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_DASHBOARD_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_DASHBOARD_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_DASHBOARD_WIDGET_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_DASHBOARD_WIDGET_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_DATA_EXPLORER_VIEW_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_DATA_EXPLORER_VIEW_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_DATA_EXPLORER_WIDGET_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_DATA_EXPLORER_WIDGET_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_NOTIFICATIONS_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_FILES_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_FILES_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_ASSETS_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_ASSETS_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_READ_GENERIC_STORAGE_VALUE),
            Privilege.create(DefaultPrivilege.Constants.PRIVILEGE_WRITE_GENERIC_STORAGE_VALUE)
        );
      }
}

class List {
    public void of() {}
}

class Privilege {
    public void create() {}
}",0
82933,SecretEncryptionManager,getEncryptor,"class SecretEncryptionManager {
      private static StringEncryptor getEncryptor() {
        var env = Environments.getEnvironment();
        StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
        encryptor.setPassword(env.getEncryptionPasscode().getValueOrDefault());
        encryptor.setIvGenerator(new RandomIvGenerator());
        return encryptor;
      }
}

class Encryptor {
    public void setIvGenerator() {}
    public void setPassword() {}
}",1
82934,TokenUtil,hashToken,"class TokenUtil {
      public static String hashToken(String token) {
        return DigestUtils.sha256Hex(token);
      }
}

class DigestUtils {
        public static String sha256Hex(final String data) {
            return Hex.encodeHexString(sha256(data));
        }
}",1
82935,UserInfoUtil,toUserInfo,"class UserInfoUtil {
      private static UserInfo toUserInfo(UserAccount userAccount,
                                         Set<String> roles) {
        UserInfo userInfo = prepareUserInfo(userAccount, roles);
        userInfo.setShowTutorial(!userAccount.isHideTutorial());
        userInfo.setHasAcknowledged(userAccount.isHasAcknowledged());
        return userInfo;
      }
}

class UserInfo {
    public void setHasAcknowledged() {}
    public void setShowTutorial() {}
}

class UserAccount {
    public void isHasAcknowledged() {}
    public void isHideTutorial() {}
}",1
82936,UserInfoUtil,prepareUserInfo,"class UserInfoUtil {
      private static UserInfo prepareUserInfo(Principal principal,
                                              Set<String> roles) {
        UserInfo userInfo = new UserInfo();
        userInfo.setUsername(principal.getUsername());
        userInfo.setDisplayName(principal.getUsername());
        userInfo.setRoles(roles);
        return userInfo;
      }
}

class UserInfo {
    public void setDisplayName() {}
        public UserInfo setUsername(String username) {
            this.username = username;
            return this;
        }
    public void setRoles() {}
}

class Principal {
    public void getUsername() {}
}",1
82937,FindCommand,executeCommand,"class FindCommand {
      protected Optional<T> executeCommand(CouchDbClient couchDbClient) {
        try {
          T result = couchDbClient.find(clazz, id);
          return Optional.of(result);
        } catch (NoDocumentException e) {
          return Optional.empty();
        }
      }
}

class Optional {
    public void empty() {}
        public static <T> Optional<T> of(final T value) {
            return new Optional<T>() {
                public boolean isAvailable() {
                    return true;
                }
                public T getValue() {
                    return value;
                }
                public Stream<T> stream() {
                    return Stream.of(value);
                }
            };
        }
}",0
82938,PersistCommand,executeCommand,"class PersistCommand {
      protected Tuple2<Boolean, String> executeCommand(CouchDbClient couchDbClient) {
        Response response = couchDbClient.save(objectToPersist);
        return new Tuple2<>(response.getError() == null, response.getId());
      }
}

class Response {
    public void getError() {}
    public void getId() {}
}",1
82939,DefaultCrudStorage,updateElement,"class DefaultCrudStorage {
      public T updateElement(T element) {
        update(element);
        return findWithNullIfEmpty(element.getElementId());
      }
}

class Element {
    public void getElementId() {}
}",1
82940,DefaultCrudStorage,deleteElement,"class DefaultCrudStorage {
      public void deleteElement(T element) {
        delete(element.getElementId());
      }
}

class Element {
    public void getElementId() {}
}",1
82941,PipelineElementDescriptionStorageImpl,exists,"class PipelineElementDescriptionStorageImpl {
      public boolean exists(DataSinkDescription sec) {
        return getDataSinkById(sec.getElementId()) != null;
      }
}

class sec {
    public void getElementId() {}
}",1
82942,UriSerializer,deserialize,"class UriSerializer {
      public URI deserialize(final JsonElement src, final Type srcType,
                             final JsonDeserializationContext context) throws JsonParseException {
        return URI.create(src.getAsString());
      }
}

class URI {
    public void create() {}
}",1
82943,CustomOAuth2UserService,loadUser,"class CustomOAuth2UserService {
      public OAuth2User loadUser(OAuth2UserRequest oAuth2UserRequest) throws OAuth2AuthenticationException {
        OAuth2User oAuth2User = super.loadUser(oAuth2UserRequest);
        try {
          var attributes = new HashMap<>(oAuth2User.getAttributes());
          var provider = oAuth2UserRequest.getClientRegistration().getRegistrationId();
          return new UserService().processUserRegistration(provider, attributes);
        } catch (AuthenticationException e) {
          throw e;
        } catch (Exception e) {
          throw new OAuth2AuthenticationProcessingException(e.getMessage(), e.getCause());
        }
      }
}

class e {
    public void getMessage() {}
    public void getCause() {}
}",0
82944,CustomOidcUserService,loadUser,"class CustomOidcUserService {
      public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {
        OidcUser oidcUser = super.loadUser(userRequest);
        try {
          var provider = userRequest.getClientRegistration().getRegistrationId();
          return new UserService().processUserRegistration(
              provider,
              oidcUser.getAttributes(),
              oidcUser.getIdToken(),
              oidcUser.getUserInfo()
          );
        } catch (AuthenticationException e) {
          throw e;
        } catch (Exception e) {
          throw new OAuth2AuthenticationProcessingException(e.getMessage(), e.getCause());
        }
      }
}

class UserRequest {
    public void getClientRegistration() {}
}

class e {
    public void getMessage() {}
    public void getCause() {}
}",1
82945,RestResponseExceptionHandler,handleException,"class RestResponseExceptionHandler {
      protected ResponseEntity<Object> handleException(
          RuntimeException ex, WebRequest request) {
        var notificationException = (SpNotificationException) ex;
        return ResponseEntity
            .status(notificationException.getStatus())
            .body(notificationException.getNotification());
      }
}

class NotificationException {
    public void getStatus() {}
    public void getNotification() {}
}",1
82946,RestResponseLogMessageExceptionHandler,handleException,"class RestResponseLogMessageExceptionHandler {
      protected ResponseEntity<Object> handleException(
          RuntimeException ex, WebRequest request) {
        var exception = (SpLogMessageException) ex;
        return ResponseEntity
            .status(exception.getStatus())
            .body(exception.getSpMessage());
      }
}

class Exception {
    public void getStatus() {}
    public void getSpMessage() {}
}",1
82947,AbstractSharedRestInterface,serverError,"class AbstractSharedRestInterface {
      protected <T> ResponseEntity<T> serverError(T entity) {
        return error(entity, HttpStatus.INTERNAL_SERVER_ERROR.value());
      }
}

class HttpStatus {
    public void value() {}
}",1
82948,Description,equals,"class Description {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        Description that = (Description) o;
        if (!name.equals(that.name)) {
          return false;
        }
        if (!description.equals(that.description)) {
          return false;
        }
        return descriptionUrl.equals(that.descriptionUrl);
      }
}

class Name {
        public boolean equals(Object o) {
            if (isReference()) {
                return getRef().equals(o);
            }
            return o != null && (o == this || o.getClass().equals(getClass()));
        }
}

class Description {
    public void equals() {}
}",1
82949,Description,hashCode,"class Description {
      public int hashCode() {
        int result = name.hashCode();
        result = 31 * result + description.hashCode();
        result = 31 * result + descriptionUrl.hashCode();
        return result;
      }
}

class Name {
        public synchronized int hashCode() {
            if (isReference()) {
                return getRef().hashCode();
            }
            return getClass().hashCode();
        }
}

class Description {
    public void hashCode() {}
}",1
82950,DefaultCRUDRestResource,findAll,"class DefaultCRUDRestResource {
      public List<T> findAll() {
        return storage.findAll();
      }
}

class Storage {
    public void findAll() {}
}",1
82951,DefaultCRUDRestResource,findById,"class DefaultCRUDRestResource {
      public T findById(@PathVariable String id) {
        return storage.getElementById(id);
      }
}

class Storage {
    public void getElementById() {}
}",1
82952,DefaultCRUDRestResource,create,"class DefaultCRUDRestResource {
      public void create(@RequestBody T entity) {
        storage.persist(entity);
      }
}

class Storage {
    public void persist() {}
}",1
82953,DefaultCRUDRestResource,update,"class DefaultCRUDRestResource {
      public Void update(@RequestBody T entity) {
        storage.updateElement(entity);
        return null;
      }
}

class Storage {
    public void updateElement() {}
}",1
82954,DefaultCRUDRestResource,delete,"class DefaultCRUDRestResource {
      public void delete(@PathVariable String id) {
        storage.deleteElementById(id);
      }
}

class Storage {
    public void deleteElementById() {}
}",1
82955,AbstractCRUDResourceManager,findAll,"class AbstractCRUDResourceManager {
      public List<T> findAll() {
        return db.findAll();
      }
}

class DB {
    public void findAll() {}
}",1
82956,AbstractCRUDResourceManager,find,"class AbstractCRUDResourceManager {
      public T find(String elementId) {
        return db.getElementById(elementId);
      }
}

class DB {
    public void getElementById() {}
}",1
82957,AbstractCRUDResourceManager,delete,"class AbstractCRUDResourceManager {
      public void delete(String elementId) {
        db.deleteElementById(elementId);
        deletePermissions(elementId);
      }
}

class DB {
    public void deleteElementById() {}
}",1
82958,AbstractCRUDResourceManager,create,"class AbstractCRUDResourceManager {
      public T create(T element,
                         String principalSid) {
        if (element.getElementId() == null) {
          element.setElementId(ElementIdGenerator.makeElementId(elementClass));
        }
        db.persist(element);
        new PermissionResourceManager().createDefault(element.getElementId(), elementClass, principalSid,
            false);
        return find(element.getElementId());
      }
}

class Element {
    public void setElementId() {}
    public void getElementId() {}
}

class DB {
    public void persist() {}
}",1
82959,AbstractCRUDResourceManager,update,"class AbstractCRUDResourceManager {
      public void update(T element) {
        db.updateElement(element);
      }
}

class DB {
    public void updateElement() {}
}",1
82960,AbstractCRUDResourceManager,deletePermissions,"class AbstractCRUDResourceManager {
      private void deletePermissions(String elementId) {
        PermissionResourceManager manager = new PermissionResourceManager();
        List<Permission> permissions = manager.findForObjectId(elementId);
        permissions.forEach(manager::method);
      }
}

class Manager {
    public void findForObjectId() {}
}

class Permissions {
    public void forEach() {}
}",1
82961,DataStreamResourceManager,update,"class DataStreamResourceManager {
      public void update(SpDataStream dataStream) {
        db.updateElement(dataStream);
      }
}

class DB {
    public void updateElement() {}
}",1
82962,PermissionResourceManager,findAll,"class PermissionResourceManager {
      public List<Permission> findAll() {
        return db.findAll();
      }
}

class DB {
    public void findAll() {}
}",1
82963,PermissionResourceManager,find,"class PermissionResourceManager {
      public Permission find(String elementId) {
        return db.getElementById(elementId);
      }
}

class DB {
    public void getElementById() {}
}",1
82964,PermissionResourceManager,findForObjectId,"class PermissionResourceManager {
      public List<Permission> findForObjectId(String objectInstanceId) {
        return db.getUserPermissionsForObject(objectInstanceId);
      }
}

class DB {
    public void getUserPermissionsForObject() {}
}",1
82965,PermissionResourceManager,create,"class PermissionResourceManager {
      public void create(Permission permission) {
        db.persist(permission);
      }
}

class DB {
    public void persist() {}
}",1
82966,PermissionResourceManager,update,"class PermissionResourceManager {
      public void update(Permission permission) {
        if (!readAnonymousAllowedClasses.contains(permission.getObjectClassName())) {
          permission.setReadAnonymous(false);
        }
        db.updateElement(permission);
      }
}

class Permission {
    public void getObjectClassName() {}
    public void setReadAnonymous() {}
}

class DB {
    public void updateElement() {}
}",0
82967,PermissionResourceManager,delete,"class PermissionResourceManager {
      public void delete(Permission permission) {
        db.deleteElementById(permission.getPermissionId());
      }
}

class DB {
    public void deleteElementById() {}
}

class Permission {
    public void getPermissionId() {}
}",1
82968,SecretDecrypter,apply,"class SecretDecrypter {
      public String apply(String extractedValue) {
        return SecretEncryptionManager.decrypt(extractedValue);
      }
}

class SecretEncryptionManager {
      public static String decrypt(String property) {
        return getEncryptor().decrypt(property);
      }
}",1
82969,SecretEncrypter,apply,"class SecretEncrypter {
      public String apply(String extractedValue) {
        return SecretEncryptionManager.encrypt(extractedValue);
      }
}

class SecretEncryptionManager {
      public static String encrypt(String property) {
        return getEncryptor().encrypt(property);
      }
}",1
82970,AssetManager,existsAssetDir,"class AssetManager {
      public static boolean existsAssetDir(String appId) {
        var directory = new File(getAssetDir(appId));
        return directory.exists() && directory.isDirectory();
      }
}

class Directory {
    public void isDirectory() {}
    public void exists() {}
}",1
82971,AssetManager,deleteAsset,"class AssetManager {
      public static void deleteAsset(String appId) throws IOException {
        Path path = Paths.get(getAssetDir(appId));
        if (Files.exists(path)) {
          FileUtils.deleteDirectory(path.toFile());
        }
      }
}

class Files {
    public void exists() {}
}

class FileUtils {
    public void deleteDirectory() {}
}

class Path {
    public void toFile() {}
}",1
82972,DocumentationParser,replaceImageUrls,"class DocumentationParser {
      public void replaceImageUrls() {
        try {
          String fileContents = getFileContents();
          String newFileContents = new ImagePathReplacer(fileContents, appId).replaceContent();
          FileUtils.writeStringToFile(file, newFileContents, StandardCharsets.UTF_8);
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
}

class FileUtils {
    public void writeStringToFile() {}
}

class e {
    public void printStackTrace() {}
}",0
82973,PipelineExecutionInfo,findProcessorsAndSinks,"class PipelineExecutionInfo {
      private List<InvocableStreamPipesEntity> findProcessorsAndSinks(Pipeline pipeline) {
        return Stream
            .concat(
                pipeline.getSepas().stream(),
                pipeline.getActions().stream()
            ).collect(Collectors.toList());
      }
}

class Stream {
    public void concat() {}
}

class Pipeline {
    public void getSepas() {}
    public void getActions() {}
}",1
82974,PipelineExecutionTaskFactory,makeStartPipelineTasks,"class PipelineExecutionTaskFactory {
      public static List<PipelineExecutionTask> makeStartPipelineTasks(Pipeline pipeline) {
        return List.of(
            new UpdateGroupIdTask(),
            new SecretEncryptionTask(SecretProvider.getDecryptionService()),
            new DiscoverEndpointsTask(),
            new SubmitRequestTask(new InvokePipelineElementSubmitter(pipeline), new CurrentPipelineElementProvider()),
            new SecretEncryptionTask(SecretProvider.getEncryptionService()),
            new AfterInvocationTask(PipelineStatusMessageType.PIPELINE_STARTED),
            new StorePipelineStatusTask(true, false)
        );
      }
}

class List {
    public void of() {}
}

class SecretProvider {
      public static SecretService getEncryptionService() {
        return new SecretService(new SecretEncrypter()) {
        };
      }
      public static SecretService getDecryptionService() {
        return new SecretService(new SecretDecrypter());
      }
}",0
82975,PipelineExecutionTaskFactory,makeStopPipelineTasks,"class PipelineExecutionTaskFactory {
      public static List<PipelineExecutionTask> makeStopPipelineTasks(Pipeline pipeline,
                                                                      boolean forceStop) {
        return List.of(
            new SubmitRequestTask(new DetachPipelineElementSubmitter(pipeline), new StoredPipelineElementProvider()),
            new AfterInvocationTask(PipelineStatusMessageType.PIPELINE_STOPPED),
            new StorePipelineStatusTask(false, forceStop)
        );
      }
}

class List {
    public void of() {}
}",0
82976,VersionInfoProvider,makeVersionInfo,"class VersionInfoProvider {
      public VersionInfo makeVersionInfo() {
        VersionInfo versionInfo = new VersionInfo();
        versionInfo.setBackendVersion(getClass().getPackage().getImplementationVersion());
        return versionInfo;
      }
}

class VersionInfo {
    public void setBackendVersion() {}
}",0
82977,PermissionManager,makePermission,"class PermissionManager {
      public Permission makePermission(Pipeline pipeline,
                                       String ownerSid) {
        return PermissionBuilder
            .create(pipeline.getPipelineId(), pipeline.getClass(), ownerSid)
            .build();
      }
}

class Pipeline {
    public void getPipelineId() {}
    public void getClass() {}
}",1
82978,PropertyFinder,findProperty,"class PropertyFinder {
      public List<EventProperty> findProperty(List<EventProperty> properties, Integer currentPointer) {
        for (EventProperty property : properties) {
          if (property.getRuntimeName().equals(propertySelectors[currentPointer])) {
            if (currentPointer == (propertySelectors.length - 1)) {
              return Collections.singletonList(property);
            } else {
              return findProperty(((EventPropertyNested) property).getEventProperties(),
                  currentPointer + 1);
            }
          }
        }
        return Collections.emptyList();
      }
}

class Property {
    public void getRuntimeName() {}
}",1
82979,InstallationConfiguration,getInstallationSteps,"class InstallationConfiguration {
      public static List<InstallationStep> getInstallationSteps(InitialSettings settings) {
        List<InstallationStep> steps = new ArrayList<>();
        steps.add(new SpCoreConfigurationStep());
        steps.add(new CouchDbInstallationStep());
        steps.add(new UserRegistrationInstallationStep(
            settings.getAdminEmail(),
            settings.getAdminPassword(),
            settings.getInitialServiceAccountName(),
            settings.getInitialServiceAccountSecret(),
            settings.getInitialAdminUserSid()));
        return steps;
      }
}

class Settings {
    public void getInitialServiceAccountName() {}
    public void getInitialServiceAccountSecret() {}
    public void getInitialAdminUserSid() {}
    public void getAdminPassword() {}
    public void getAdminEmail() {}
}",1
82980,InstallationStep,logSuccess,"class InstallationStep {
      public void logSuccess(String info) {
        LOG.info(info);
      }
}

class Log {
    public void info() {}
}",1
82981,InstallationStep,logFailure,"class InstallationStep {
      public void logFailure(String error, Exception e) {
        errorCount++;
        LOG.error(error, e);
      }
}

class Log {
    public void error() {}
}",1
82982,AbstractTemplateHandler,applyTemplateOnPipelineElement,"class AbstractTemplateHandler {
      public T applyTemplateOnPipelineElement() {
        PipelineElementTemplateVisitor visitor = new PipelineElementTemplateVisitor(template.getTemplateConfigs());
        visitStaticProperties(visitor);
        if (overwriteNameAndDescription) {
          applyNameAndDescription(template.getTemplateName(), template.getTemplateDescription());
        }
        return element;
      }
}

class Template {
    public void getTemplateDescription() {}
    public void getTemplateName() {}
    public void getTemplateConfigs() {}
}",1
82983,AdapterVerifier,storeAssets,"class AdapterVerifier {
      protected void storeAssets() throws IOException, NoServiceEndpointsAvailableException {
        if (elementDescription.isIncludesAssets()) {
          AssetManager.storeAsset(SpServiceUrlProvider.ADAPTER, elementDescription.getAppId());
        }
      }
}

class AssetManager {
      public static void storeAsset(SpServiceUrlProvider spServiceUrlProvider,
                                    String appId) throws IOException, NoServiceEndpointsAvailableException {
        InputStream assetStream = new AssetFetcher(spServiceUrlProvider, appId)
            .fetchPipelineElementAssets();
        new AssetExtractor(assetStream, appId).extractAssetContents();
      }
}",0
82984,AdapterVerifier,updateAssets,"class AdapterVerifier {
      protected void updateAssets() throws IOException, NoServiceEndpointsAvailableException {
        if (elementDescription.isIncludesAssets()) {
          AssetManager.deleteAsset(elementDescription.getAppId());
          storeAssets();
        }
      }
}

class AssetManager {
      public static void deleteAsset(String appId) throws IOException {
        Path path = Paths.get(getAssetDir(appId));
        if (Files.exists(path)) {
          FileUtils.deleteDirectory(path.toFile());
        }
      }
}",0
82985,DataProcessorVerifier,storeAssets,"class DataProcessorVerifier {
      protected void storeAssets() throws IOException, NoServiceEndpointsAvailableException {
        if (elementDescription.isIncludesAssets()) {
          AssetManager.storeAsset(SpServiceUrlProvider.DATA_PROCESSOR, elementDescription.getAppId());
        }
      }
}

class AssetManager {
      public static void storeAsset(SpServiceUrlProvider spServiceUrlProvider,
                                    String appId) throws IOException, NoServiceEndpointsAvailableException {
        InputStream assetStream = new AssetFetcher(spServiceUrlProvider, appId)
            .fetchPipelineElementAssets();
        new AssetExtractor(assetStream, appId).extractAssetContents();
      }
}",0
82986,DataSinkVerifier,storeAssets,"class DataSinkVerifier {
      protected void storeAssets() throws IOException, NoServiceEndpointsAvailableException {
        if (elementDescription.isIncludesAssets()) {
          AssetManager.storeAsset(SpServiceUrlProvider.DATA_SINK, elementDescription.getAppId());
        }
      }
}

class AssetManager {
      public static void storeAsset(SpServiceUrlProvider spServiceUrlProvider,
                                    String appId) throws IOException, NoServiceEndpointsAvailableException {
        InputStream assetStream = new AssetFetcher(spServiceUrlProvider, appId)
            .fetchPipelineElementAssets();
        new AssetExtractor(assetStream, appId).extractAssetContents();
      }
}",0
82987,DataStreamVerifier,storeAssets,"class DataStreamVerifier {
      protected void storeAssets() throws IOException, NoServiceEndpointsAvailableException {
        if (elementDescription.isIncludesAssets()) {
          AssetManager.storeAsset(SpServiceUrlProvider.DATA_STREAM, elementDescription.getAppId());
        }
      }
}

class AssetManager {
      public static void storeAsset(SpServiceUrlProvider spServiceUrlProvider,
                                    String appId) throws IOException, NoServiceEndpointsAvailableException {
        InputStream assetStream = new AssetFetcher(spServiceUrlProvider, appId)
            .fetchPipelineElementAssets();
        new AssetExtractor(assetStream, appId).extractAssetContents();
      }
}",0
82988,AbstractVerifier,addWarning,"class AbstractVerifier {
      protected void addWarning(NotificationType notificationType) {
        validationResults.add(new VerificationWarning(notificationType));
      }
}

class ValidationResults {
    public void add() {}
}",0
82989,AbstractVerifier,addError,"class AbstractVerifier {
      protected void addError(NotificationType notificationType) {
        validationResults.add(new VerificationError(notificationType));
      }
}

class ValidationResults {
    public void add() {}
}",0
82990,GeneralVerifier,validate,"class GeneralVerifier {
      public List<VerificationResult> validate() {
        if (!description.isIncludesAssets() || !description.getIncludedAssets().contains(ExtensionAssetType.ICON)) {
          addWarning(NotificationType.WARNING_NO_ICON);
        }
        if (description.getName() == null) {
          addWarning(NotificationType.WARNING_NO_NAME);
        }
        return validationResults;
      }
}

class Description {
    public void getIncludedAssets() {}
    public void isIncludesAssets() {}
    public void getName() {}
}",1
82991,CompactPipelineManagement,convertPipeline,"class CompactPipelineManagement {
      public CompactPipeline convertPipeline(Pipeline pipeline) {
        return new CompactPipeline(
            pipeline.getElementId() != null ? pipeline.getElementId() : UUID.randomUUID().toString(),
            pipeline.getName(),
            pipeline.getDescription(),
            new CompactPipelineConverter().convert(pipeline),
            new CreateOptions(null, false)
        );
      }
}

class Pipeline {
    public void getName() {}
    public void getDescription() {}
    public void getElementId() {}
}",1
82992,CompactPipelineManagement,applyPipelineBasics,"class CompactPipelineManagement {
      private void applyPipelineBasics(CompactPipeline compactPipeline,
                                       Pipeline pipeline) {
        pipeline.setElementId(compactPipeline.id());
        pipeline.setName(compactPipeline.name());
        pipeline.setDescription(compactPipeline.description());
      }
}

class Pipeline {
    public void setDescription() {}
    public void setName() {}
    public void setElementId() {}
}",0
82993,OutputStrategyGenerator,visit,"class OutputStrategyGenerator {
      public void visit(UserDefinedOutputStrategy userDefinedOutputStrategy) {
        var userDefinedConfig = config.userDefined();
        if (userDefinedConfig != null && !userDefinedConfig.isEmpty()) {
          userDefinedOutputStrategy.setEventProperties(
              toEp(userDefinedConfig)
          );
        }
      }
}

class Config {
    public void userDefined() {}
}",1
82994,AppendOutputSchemaGenerator,buildFromOneStream,"class AppendOutputSchemaGenerator {
      public Tuple2<EventSchema, AppendOutputStrategy> buildFromOneStream(SpDataStream stream) {
        List<String> selectors =
            new PropertySelectorGenerator(stream.getEventSchema(), true).generateSelectors();
        Tuple2<List<EventProperty>, List<PropertyRenameRule>> generatedOutputProperties = new
            PropertySelector(stream.getEventSchema())
            .createRenamedPropertyList(selectors, appendProperties);
        EventSchema outputSchema = new EventSchema(generatedOutputProperties.k);
        return new Tuple2<>(outputSchema, getModifiedOutputStrategy(generatedOutputProperties.v));
      }
}

class Stream {
    public void getEventSchema() {}
}",1
82995,CustomOutputSchemaGenerator,buildFromOneStream,"class CustomOutputSchemaGenerator {
      public Tuple2<EventSchema, CustomOutputStrategy> buildFromOneStream(SpDataStream stream) {
        return new Tuple2<>(new EventSchema(new PropertySelector(stream.getEventSchema())
            .createPropertyList(selectedPropertyKeys)), outputStrategy);
      }
}

class Stream {
    public void getEventSchema() {}
}",1
82996,ListOutputSchemaGenerator,buildFromOneStream,"class ListOutputSchemaGenerator {
      public Tuple2<EventSchema, ListOutputStrategy> buildFromOneStream(SpDataStream stream) {
        return makeTuple(makeList(stream.getEventSchema().getEventProperties()));
      }
}

class Stream {
    public void getEventSchema() {}
}",1
82997,ListOutputSchemaGenerator,makeList,"class ListOutputSchemaGenerator {
      private EventSchema makeList(List<EventProperty> schemaProperties) {
        EventPropertyList list = new EventPropertyList();
        list.setRuntimeName(propertyName);
        EventSchema schema = new EventSchema();
        schema.setEventProperties(Utils.createList(list));
        return schema;
      }
}

class List {
    public void setRuntimeName() {}
}

class Schema {
    public void setEventProperties() {}
}

class Utils {
    public void createList() {}
}",0
82998,OutputSchemaFactory,getOuputSchemaGenerator,"class OutputSchemaFactory {
      public OutputSchemaGenerator<?> getOuputSchemaGenerator() {
        if (outputStrategy instanceof AppendOutputStrategy) {
          return AppendOutputSchemaGenerator.from(outputStrategy);
        } else if (outputStrategy instanceof KeepOutputStrategy) {
          return RenameOutputSchemaGenerator.from(outputStrategy);
        } else if (outputStrategy instanceof FixedOutputStrategy) {
          return FixedOutputSchemaGenerator.from(outputStrategy);
        } else if (outputStrategy instanceof CustomOutputStrategy) {
          return CustomOutputSchemaGenerator.from(outputStrategy);
        } else if (outputStrategy instanceof ListOutputStrategy) {
          return ListOutputSchemaGenerator.from(outputStrategy);
        } else if (outputStrategy instanceof TransformOutputStrategy) {
          return TransformOutputSchemaGenerator.from(outputStrategy, dataProcessorInvocation);
        } else if (outputStrategy instanceof CustomTransformOutputStrategy) {
          return CustomTransformOutputSchemaGenerator.from(outputStrategy, dataProcessorInvocation);
        } else if (outputStrategy instanceof UserDefinedOutputStrategy) {
          return UserDefinedOutputSchemaGenerator.from(outputStrategy);
        } else {
          throw new IllegalArgumentException();
        }
      }
}

class AppendOutputSchemaGenerator {
      public static AppendOutputSchemaGenerator from(OutputStrategy strategy) {
        return new AppendOutputSchemaGenerator((AppendOutputStrategy) strategy);
      }
}

class FixedOutputSchemaGenerator {
      public static FixedOutputSchemaGenerator from(OutputStrategy strategy) {
        return new FixedOutputSchemaGenerator((FixedOutputStrategy) strategy);
      }
}

class CustomOutputSchemaGenerator {
      public static CustomOutputSchemaGenerator from(OutputStrategy strategy) {
        return new CustomOutputSchemaGenerator((CustomOutputStrategy) strategy);
      }
}

class ListOutputSchemaGenerator {
      public static ListOutputSchemaGenerator from(OutputStrategy strategy) {
        return new ListOutputSchemaGenerator((ListOutputStrategy) strategy);
      }
}",0
82999,RenameOutputSchemaGenerator,buildFromOneStream,"class RenameOutputSchemaGenerator {
      public Tuple2<EventSchema, KeepOutputStrategy> buildFromOneStream(SpDataStream stream) {
        return makeTuple(stream.getEventSchema());
      }
}

class Stream {
    public void getEventSchema() {}
}",1
83000,RenameOutputSchemaGenerator,buildFromTwoStreams,"class RenameOutputSchemaGenerator {
      public Tuple2<EventSchema, KeepOutputStrategy> buildFromTwoStreams(SpDataStream stream1,
                                                                         SpDataStream stream2) {
        EventSchema resultSchema = new EventSchema();
        List<EventProperty> properties = new ArrayList<>();
        properties.addAll(stream1.getEventSchema().getEventProperties());
        if (outputStrategy.isKeepBoth()) {
          properties.addAll(new PropertyDuplicateRemover(properties,
              stream2.getEventSchema().getEventProperties()).rename());
        }
        resultSchema.setEventProperties(properties);
        return makeTuple(resultSchema);
      }
}

class Properties {
    public void addAll() {}
}",1
83001,DatatypeMatch,subClassOf,"class DatatypeMatch {
      private boolean subClassOf(String offer, String requirement) {
        if (!requirement.equals(SO.NUMBER)) {
          return false;
        } else {
          if (offer.equals(XSD.INTEGER.toString())
              || offer.equals(XSD.LONG.toString())
              || offer.equals(XSD.DOUBLE.toString())
              || offer.equals(XSD.FLOAT.toString())) {
            return true;
          }
        }
        return false;
      }
}

class Offer {
    public void equals() {}
}",1
83002,ElementVerification,verify,"class ElementVerification {
      public boolean verify(SpDataStream offer, InvocableStreamPipesEntity requirement) {
        return new StreamMatch().matchIgnoreGrounding(offer, requirement.getStreamRequirements().get(0), errorLog)
            && new GroundingMatch().match(offer.getEventGrounding(), requirement.getSupportedGrounding(), errorLog);
      }
}

class Offer {
    public void getEventGrounding() {}
}",1
83003,ListPropertyMatch,semanticTypeMatch,"class ListPropertyMatch {
      private boolean semanticTypeMatch(EventPropertyList offer, EventPropertyList requirement,
                                          List<MatchingResultMessage> errorLog) {
        return new SemanticTypeMatch().match(offer.getSemanticType(), requirement.getSemanticType(),
            errorLog);
      }
}

class Offer {
    public void getSemanticType() {}
}",1
83004,ListPropertyMatch,listItemMatch,"class ListPropertyMatch {
      private boolean listItemMatch(EventPropertyList offer, EventPropertyList requirement,
                                    List<MatchingResultMessage> errorLog) {
        return new PropertyMatch().match(offer.getEventProperty(), requirement.getEventProperty(),
            errorLog);
      }
}

class Offer {
    public void getEventProperty() {}
}",1
83005,MeasurementUnitMatch,match,"class MeasurementUnitMatch {
      public boolean match(URI offer, URI requirement, List<MatchingResultMessage> errorLog) {
        return requirement == null || (requirement.toString().equals(StreamPipes.ANYTHING) && offer != null)
            || (offer != null && requirement.toString().equals(offer.toString()));
      }
}

class Offer {
    public void toString() {}
}",1
83006,PrimitivePropertyMatch,match,"class PrimitivePropertyMatch {
      public boolean match(EventPropertyPrimitive offer,
                           EventPropertyPrimitive requirement, List<MatchingResultMessage> errorLog) {
        boolean matchesUnit = unitMatch(offer.getMeasurementUnit(), requirement.getMeasurementUnit(), errorLog);
        boolean matchesDatatype = datatypeMatch(offer.getRuntimeType(), requirement.getRuntimeType(), errorLog);
        boolean matchesSemanticType = semanticTypeMatch(offer.getSemanticType(), requirement.getSemanticType(), errorLog);
        return MatchingUtils.nullCheck(offer, requirement)
            || (matchesUnit && matchesDatatype && matchesSemanticType);
      }
}

class Offer {
    public void getSemanticType() {}
    public void getRuntimeType() {}
    public void getMeasurementUnit() {}
}",1
83007,ProtocolMatch,canonicalName,"class ProtocolMatch {
      private String canonicalName(TransportProtocol protocol) {
        return protocol.getClass().getCanonicalName();
      }
}

class Protocol {
    public void getClass() {}
}",1
83008,StreamMatch,match,"class StreamMatch {
      public boolean match(SpDataStream offer, SpDataStream requirement, List<MatchingResultMessage> errorLog) {
        return MatchingUtils.nullCheck(offer, requirement)
            || (checkSchemaMatch(offer.getEventSchema(), requirement.getEventSchema(), errorLog)
            && checkGroundingMatch(offer.getEventGrounding(), requirement.getEventGrounding(), errorLog));
      }
}

class Offer {
    public void getEventSchema() {}
    public void getEventGrounding() {}
}",1
83009,StreamMatch,matchIgnoreGrounding,"class StreamMatch {
      public boolean matchIgnoreGrounding(SpDataStream offer, SpDataStream requirement,
                                          List<MatchingResultMessage> errorLog) {
        boolean match =
            (checkSchemaMatch(offer.getEventSchema(), requirement.getEventSchema(), errorLog));
        return match;
      }
}

class Offer {
    public void getEventSchema() {}
}",1
83010,ApplyGroundingStep,apply,"class ApplyGroundingStep {
      public void apply(NamedStreamPipesEntity source,
                        InvocableStreamPipesEntity target,
                        Set<InvocableStreamPipesEntity> allTargets,
                        List<PipelineElementValidationInfo> validationInfos) throws SpValidationException {
        List<MatchingResultMessage> errorLog = getNewErrorLog();
        boolean match = new GroundingMatch().match(
            getSourceGrounding(source),
            target.getSupportedGrounding(),
            errorLog
        );
        if (!match) {
          throw new SpValidationException(errorLog);
        } else {
          EventGrounding selectedGrounding;
          if (!sourceGroundingVisitorMap.containsKey(source.getDom())) {
            selectedGrounding = new GroundingBuilder(source, allTargets).getEventGrounding();
            sourceGroundingVisitorMap.put(source.getDom(), selectedGrounding);
          } else {
            selectedGrounding = new EventGrounding(sourceGroundingVisitorMap.get(source.getDom()));
          }
          if (source instanceof DataProcessorInvocation) {
            ((DataProcessorInvocation) source)
                .getOutputStream()
                .setEventGrounding(selectedGrounding);
          }
          if (!target.getInputStreams().isEmpty()) {
            target
                .getInputStreams()
                .get(getIndex(target))
                .setEventGrounding(selectedGrounding);
            if (target.getInputStreams().size() > 1) {
              this.visitorHistory.put(target.getDom(), 1);
            }
          }
        }
      }
}

class Target {
    public void getSupportedGrounding() {}
    public void getInputStreams() {}
    public void getDom() {}
}

class Source {
    public void getDom() {}
}",1
83011,ComputeOutputStep,apply,"class ComputeOutputStep {
      public void apply(NamedStreamPipesEntity source,
                        InvocableStreamPipesEntity target,
                        Set<InvocableStreamPipesEntity> allTargets,
                        List<PipelineElementValidationInfo> validationInfos) throws SpValidationException {
        if (target instanceof DataProcessorInvocation) {
          DataProcessorInvocation pe = (DataProcessorInvocation) target;
          Tuple2<EventSchema, ? extends OutputStrategy> outputSettings;
          OutputSchemaGenerator<?> schemaGenerator = new OutputSchemaFactory(pe)
              .getOuputSchemaGenerator();
          if (target.getInputStreams().size() == 1) {
            outputSettings = schemaGenerator.buildFromOneStream(
                pe.getInputStreams()
                    .get(0));
          } else if (relatedPes.containsKey(pe.getDom())) {
            DataProcessorInvocation existingInvocation = relatedPes.get(pe.getDom());
            outputSettings = schemaGenerator.buildFromTwoStreams(existingInvocation
                .getInputStreams().get(0), pe.getInputStreams().get(1));
          } else {
            relatedPes.put(target.getDom(), pe);
            outputSettings = new Tuple2<>(new EventSchema(), pe
                .getOutputStrategies().get(0));
          }
          pe.setOutputStrategies(Collections.singletonList(outputSettings.v));
          ((DataProcessorInvocation) target).getOutputStream().setEventSchema(outputSettings.k);
        }
      }
}

class Target {
    public void getInputStreams() {}
    public void getDom() {}
}

class SchemaGenerator {
    public void buildFromOneStream() {}
    public void buildFromTwoStreams() {}
}",1
83012,PipelineValidator,apply,"class PipelineValidator {
      public void apply(NamedStreamPipesEntity source,
                        InvocableStreamPipesEntity target,
                        Set<InvocableStreamPipesEntity> allTargets,
                        List<PipelineElementValidationInfo> validationInfos) throws SpValidationException {
        for (var step : steps) {
          step.apply(source, target, allTargets, validationInfos);
        }
      }
}

class Step {
    public void apply() {}
}",1
83013,PrepareStep,apply,"class PrepareStep {
      public void apply(NamedStreamPipesEntity source,
                        InvocableStreamPipesEntity target,
                        Set<InvocableStreamPipesEntity> allTargets,
                        List<PipelineElementValidationInfo> validationInfos) throws SpValidationException {
        if (target instanceof DataProcessorInvocation) {
          if (target.getInputStreams() == null || target.getInputStreams().isEmpty()) {
            target.setInputStreams(new ArrayList<>());
            for (int i = 0; i < target.getStreamRequirements().size(); i++) {
              target.getInputStreams().add(new SpDataStream());
            }
          }
          if (((DataProcessorInvocation) target).getOutputStream() == null) {
            ((DataProcessorInvocation) target).setOutputStream(new SpDataStream());
          }
        }
      }
}

class Target {
    public void getStreamRequirements() {}
    public void getInputStreams() {}
    public void setInputStreams() {}
}",1
83014,SchemaValidationStep,apply,"class SchemaValidationStep {
      public void apply(NamedStreamPipesEntity source,
                        InvocableStreamPipesEntity target,
                        Set<InvocableStreamPipesEntity> allTargets,
                        List<PipelineElementValidationInfo> validationInfos) throws SpValidationException {
        List<MatchingResultMessage> errorLog = getNewErrorLog();
        boolean matches = new SchemaMatch().match(getSourceSchema(source), getTargetRequirement(target), errorLog);
        if (!matches) {
          throw new SpValidationException(errorLog);
        } else {
          target.getInputStreams().get(getIndex(target)).setEventSchema(getSourceSchema(source));
        }
        if (target.getInputStreams().size() > 1) {
          this.visitorHistory.put(target.getDom(), 1);
        }
      }
}

class Target {
    public void getInputStreams() {}
    public void getDom() {}
}",1
83015,PipelineStatusManager,getPipelineStatus,"class PipelineStatusManager {
      public static List<PipelineStatusMessage> getPipelineStatus(String pipelineId, int numberOfLatestEntries) {
        List<PipelineStatusMessage> messages = getPipelineStatus(pipelineId);
        int statusMessageCount = messages.size();
        if (statusMessageCount <= numberOfLatestEntries) {
          return messages;
        } else {
          return messages.subList(messages.size() - numberOfLatestEntries, messages.size());
        }
      }
}

class Messages {
    public void subList() {}
    public void size() {}
}",1
83016,AfterInvocationTask,executeTask,"class AfterInvocationTask {
      public void executeTask(Pipeline pipeline,
                              PipelineExecutionInfo executionInfo) {
        var graphs = executionInfo.getProcessorsAndSinks();
        storeInvocationGraphs(pipeline.getPipelineId(), graphs);
        addPipelineStatus(pipeline);
      }
}

class Pipeline {
    public void getPipelineId() {}
}",1
83017,AfterInvocationTask,addPipelineStatus,"class AfterInvocationTask {
      private void addPipelineStatus(Pipeline pipeline) {
        PipelineStatusManager.addPipelineStatus(pipeline.getPipelineId(),
            new PipelineStatusMessage(pipeline.getPipelineId(), System.currentTimeMillis(), statusMessageType));
      }
}

class PipelineStatusManager {
      public static void addPipelineStatus(String pipelineId, PipelineStatusMessage message) {
        if (isInitialized(pipelineId)) {
          pipelineStatusMessages.get(pipelineId).add(message);
        } else {
          List<PipelineStatusMessage> statusMessageList = new ArrayList<>();
          statusMessageList.add(message);
          pipelineStatusMessages.put(pipelineId, statusMessageList);
        }
      }
}

class Pipeline {
    public void getPipelineId() {}
}",0
83018,SubmitRequestTask,executeTask,"class SubmitRequestTask {
      public void executeTask(Pipeline pipeline, PipelineExecutionInfo executionInfo) {
        var processorsAndSinks = elementProvider.getProcessorsAndSinks(executionInfo);
        var status = submitter.submit(processorsAndSinks);
        executionInfo.applyPipelineOperationStatus(status);
      }
}

class Submitter {
        Future<J> submit(E executable, JsonObject config);
}",1
83019,MatchingResultFactory,build,"class MatchingResultFactory {
      public static MatchingResultMessage build(MatchingResultType type, boolean success, String rightSubject) {
        MatchingResultMessage message = new MatchingResultMessage();
        message.setMatchingSuccessful(success);
        message.setTitle(type.getTitle());
        message.setDescription(type.getDescription());
        message.setRequirementSubject(rightSubject);
        return message;
      }
}

class Message {
    public void setMatchingSuccessful() {}
    public void setRequirementSubject() {}
    public void setDescription() {}
    public void setTitle() {}
}

class Type {
    public void getTitle() {}
    public void getDescription() {}
}",1
83020,ServiceAccount,from,"class ServiceAccount {
      public static ServiceAccount from(String serviceAccountName,
                                        String clientSecret,
                                        Set<String> roles) {
        ServiceAccount account = new ServiceAccount();
        account.setUsername(serviceAccountName);
        account.setClientSecret(clientSecret);
        account.setRoles(roles);
        account.setAccountEnabled(true);
        account.setAccountLocked(false);
        return account;
      }
}

class Account {
    public void setAccountLocked() {}
    public void setUsername() {}
    public void setClientSecret() {}
    public void setRoles() {}
    public void setAccountEnabled() {}
}",0
83021,AssetLink,equals,"class AssetLink {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        AssetLink assetLink = (AssetLink) o;
        return resourceId.equals(assetLink.resourceId) && queryHint.equals(assetLink.queryHint);
      }
}

class ResourceId {
    public void equals() {}
}

class QueryHint {
    public void equals() {}
}",1
83022,AssetLink,hashCode,"class AssetLink {
      public int hashCode() {
        return Objects.hash(resourceId, queryHint);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83023,EmailConfig,fromDefaults,"class EmailConfig {
      public static EmailConfig fromDefaults() {
        EmailConfig config = new EmailConfig();
        config.setEmailConfigured(false);
        return config;
      }
}

class Config {
    public void setEmailConfigured() {}
}",0
83024,PipelineModificationMessage,existsModification,"class PipelineModificationMessage {
      public boolean existsModification(String domId) {
        for (PipelineModification modification : pipelineModifications) {
          if (modification.getDomId().contains(domId)) {
            return true;
          }
        }
        return false;
      }
}

class Modification {
    public void getDomId() {}
}",1
83025,AppendOutputStrategy,accept,"class AppendOutputStrategy {
      public void accept(OutputStrategyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83026,CustomOutputStrategy,accept,"class CustomOutputStrategy {
      public void accept(OutputStrategyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83027,FixedOutputStrategy,accept,"class FixedOutputStrategy {
      public void accept(OutputStrategyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83028,KeepOutputStrategy,accept,"class KeepOutputStrategy {
      public void accept(OutputStrategyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83029,ListOutputStrategy,accept,"class ListOutputStrategy {
      public void accept(OutputStrategyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83030,UserDefinedOutputStrategy,accept,"class UserDefinedOutputStrategy {
      public void accept(OutputStrategyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83031,SchemaInfo,equals,"class SchemaInfo {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        SchemaInfo that = (SchemaInfo) o;
        return Objects.equals(eventSchema, that.eventSchema);
      }
}

class Objects {
    public void equals() {}
}",0
83032,Enumeration,equals,"class Enumeration {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        Enumeration that = (Enumeration) o;
        return Objects.equals(label, that.label) && Objects.equals(description, that.description)
               && Objects.equals(runtimeValues, that.runtimeValues);
      }
}

class Objects {
    public void equals() {}
}",0
83033,Enumeration,hashCode,"class Enumeration {
      public int hashCode() {
        return Objects.hash(label, description, runtimeValues);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83034,EventPropertyList,equals,"class EventPropertyList {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        if (!super.equals(o)) {
          return false;
        }
        EventPropertyList that = (EventPropertyList) o;
        return Objects.equals(eventProperty, that.eventProperty);
      }
}

class Objects {
    public void equals() {}
}",0
83035,EventPropertyList,hashCode,"class EventPropertyList {
      public int hashCode() {
        return Objects.hash(eventProperty);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83036,EventPropertyNested,equals,"class EventPropertyNested {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        if (!super.equals(o)) {
          return false;
        }
        EventPropertyNested that = (EventPropertyNested) o;
        return Objects.equals(eventProperties, that.eventProperties);
      }
}

class Objects {
    public void equals() {}
}",0
83037,EventPropertyNested,hashCode,"class EventPropertyNested {
      public int hashCode() {
        return Objects.hash(eventProperties);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83038,QuantitativeValue,equals,"class QuantitativeValue {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        QuantitativeValue that = (QuantitativeValue) o;
        return Objects.equals(minValue, that.minValue) && Objects.equals(maxValue, that.maxValue)
               && Objects.equals(step, that.step);
      }
}

class Objects {
    public void equals() {}
}",0
83039,QuantitativeValue,hashCode,"class QuantitativeValue {
      public int hashCode() {
        return Objects.hash(minValue, maxValue, step);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83040,AnyStaticProperty,accept,"class AnyStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83041,CodeInputStaticProperty,accept,"class CodeInputStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83042,CollectionStaticProperty,accept,"class CollectionStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83043,ColorPickerStaticProperty,accept,"class ColorPickerStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83044,FileStaticProperty,accept,"class FileStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83045,MappingPropertyNary,accept,"class MappingPropertyNary {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83046,MappingPropertyUnary,accept,"class MappingPropertyUnary {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83047,MatchingStaticProperty,accept,"class MatchingStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83048,OneOfStaticProperty,accept,"class OneOfStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83049,RuntimeResolvableTreeInputStaticProperty,accept,"class RuntimeResolvableTreeInputStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83050,SecretStaticProperty,accept,"class SecretStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83051,SelectionStaticProperty,addOption,"class SelectionStaticProperty {
      public boolean addOption(Option option) {
        return options.add(option);
      }
}

class Options {
    public void add() {}
}",1
83052,SlideToggleStaticProperty,accept,"class SlideToggleStaticProperty {
      public void accept(StaticPropertyVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83053,TreeInputNode,hasChildren,"class TreeInputNode {
      public boolean hasChildren() {
        return children.size() > 0;
      }
}

class Children {
    public void size() {}
}",1
83054,ListUtils,isEqualList,"class ListUtils {
      public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2) {
        if (list1 == list2) {
          return true;
        }
        if (list1 == null || list2 == null || list1.size() != list2.size()) {
          return false;
        }
        final Iterator<?> it1 = list1.iterator();
        final Iterator<?> it2 = list2.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          final Object obj1 = it1.next();
          final Object obj2 = it2.next();
          if (!Objects.equals(obj1, obj2)) {
            return false;
          }
        }
        return !(it1.hasNext() || it2.hasNext());
      }
}

class Objects {
    public void equals() {}
}",0
83055,AbstractField,parse,"class AbstractField {
      public <T> T parse(FieldParser<V, T> fieldParser) {
        return fieldParser.parseField(value);
      }
}

class FieldParser {
        protected abstract int parseField(byte[] bytes, int startPos, int limit, byte[] delim, T reuse);
}",1
83056,ConfigItem,from,"class ConfigItem {
      public static <T> ConfigItem from(String key,
                                        T defaultValue,
                                        String description,
                                        String valueType,
                                        ConfigurationScope configurationScope,
                                        boolean isPassword) {
        ConfigItem configItem = new ConfigItem();
        configItem.setKey(key);
        configItem.setValue(String.valueOf(defaultValue));
        configItem.setValueType(valueType);
        configItem.setDescription(description);
        configItem.setConfigurationScope(configurationScope);
        configItem.setPassword(isPassword);
        return configItem;
      }
}

class ConfigItem {
    public void setValueType() {}
    public void setDescription() {}
    public void setValue() {}
    public void setConfigurationScope() {}
    public void setKey() {}
    public void setPassword() {}
}",0
83057,ConfigItem,equals,"class ConfigItem {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        ConfigItem that = (ConfigItem) o;
        return isPassword == that.isPassword
            && Objects.equals(key, that.key)
            && Objects.equals(description, that.description)
            && Objects.equals(value, that.value)
            && Objects.equals(valueType, that.valueType)
            && configurationScope == that.configurationScope;
      }
}

class Objects {
    public void equals() {}
}",0
83058,ConfigItem,hashCode,"class ConfigItem {
      public int hashCode() {
        return Objects.hash(key, description, value, valueType, configurationScope, isPassword);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83059,FieldStatusInfo,good,"class FieldStatusInfo {
      public static FieldStatusInfo good() {
        var info = new FieldStatusInfo();
        info.setFieldStatus(FieldStatus.GOOD);
        return info;
      }
}

class Info {
    public void setFieldStatus() {}
}",0
83060,FieldStatusInfo,bad,"class FieldStatusInfo {
      public static FieldStatusInfo bad(String additionalInfo,
                                        boolean changesRequired) {
        var info = new FieldStatusInfo();
        info.setFieldStatus(FieldStatus.BAD);
        info.setAdditionalInfo(additionalInfo);
        info.setChangesRequired(changesRequired);
        return info;
      }
}

class Info {
    public void setChangesRequired() {}
    public void setAdditionalInfo() {}
    public void setFieldStatus() {}
}",0
83061,FieldStatusInfo,equals,"class FieldStatusInfo {
      public boolean equals(Object o) {
        if (this == o) {
          return true;
        }
        if (o == null || getClass() != o.getClass()) {
          return false;
        }
        FieldStatusInfo that = (FieldStatusInfo) o;
        return changesRequired == that.changesRequired && fieldStatus == that.fieldStatus && Objects.equals(
            additionalInfo, that.additionalInfo);
      }
}

class Objects {
    public void equals() {}
}",0
83062,FieldStatusInfo,hashCode,"class FieldStatusInfo {
      public int hashCode() {
        return Objects.hash(fieldStatus, additionalInfo, changesRequired);
      }
}

class Objects {
        public static int hash( int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object...objs )
        {
            int result = initialNonZeroOddNumber;
            for ( Object obj : objs )
            {
                result = multiplierNonZeroOddNumber * result + ( obj != null ? obj.hashCode() : 0 );
            }
            return result;
        }
}",1
83063,DeleteRuleDescription,accept,"class DeleteRuleDescription {
      public void accept(ITransformationRuleVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83064,MoveRuleDescription,accept,"class MoveRuleDescription {
      public void accept(ITransformationRuleVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83065,RenameRuleDescription,accept,"class RenameRuleDescription {
      public void accept(ITransformationRuleVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83066,AddTimestampRuleDescription,accept,"class AddTimestampRuleDescription {
      public void accept(ITransformationRuleVisitor visitor) {
        visitor.visit(this);
      }
}

class Visitor {
        public void visit(KahaRewrittenDataFileCommand kahaUpdateMessageCommand) throws IOException {
        }
}",1
83067,PulsarProducer,connect,"class PulsarProducer {
      public void connect() throws SpRuntimeException {
        try {
          pulsarClient = PulsarClient.builder()
              .serviceUrl(protocolSettings.getBrokerHostname())
              .build();
          producer = pulsarClient.newProducer()
              .topic(protocolSettings.getTopicDefinition().getActualTopicName())
              .create();
        } catch (PulsarClientException e) {
          throw new SpRuntimeException(e);
        }
      }
}

class PulsarClient {
        static ClientBuilder builder() {
            return DefaultImplementation.getDefaultImplementation().newClientBuilder();
        }
}

class PulsarClient {
        <T> ProducerBuilder<T> newProducer(Schema<T> schema);
}",0
83068,PulsarProducer,publish,"class PulsarProducer {
      public void publish(byte[] event) throws SpRuntimeException {
        try {
          producer.send(event);
        } catch (PulsarClientException e) {
          throw new SpRuntimeException(e);
        }
      }
}

class Producer {
    public void send() {}
}",1
83069,PulsarProducer,disconnect,"class PulsarProducer {
      public void disconnect() throws SpRuntimeException {
        try {
          producer.close();
          pulsarClient.close();
        } catch (PulsarClientException e) {
          throw new SpRuntimeException(e);
        }
      }
}

class Producer {
    public void close() {}
}

class PulsarClient {
        void close() throws PulsarClientException;
}",0
83070,NatsPublisher,connect,"class NatsPublisher {
      public void connect() throws SpRuntimeException {
        try {
          makeBrokerConnection(protocol);
        } catch (IOException | InterruptedException e) {
          e.printStackTrace();
        }
      }
}

class e {
    public void printStackTrace() {}
}",0
83071,NatsPublisher,disconnect,"class NatsPublisher {
      public void disconnect() throws SpRuntimeException {
        try {
          super.disconnect();
        } catch (InterruptedException | TimeoutException e) {
          e.printStackTrace();
        }
      }
}

class e {
    public void printStackTrace() {}
}",0
83072,MqttConsumer,connect,"class MqttConsumer {
      public void connect(InternalEventProcessor<byte[]> eventProcessor)
          throws SpRuntimeException {
        try {
          this.createBrokerConnection(protocol);
          Topic[] topics = {new Topic(protocol.getTopicDefinition().getActualTopicName(), QoS.AT_LEAST_ONCE)};
          connection.subscribe(topics);
          new Thread(new ConsumerThread(eventProcessor)).start();
        } catch (Exception e) {
          throw new SpRuntimeException(e);
        }
      }
}

class Protocol {
    public void getTopicDefinition() {}
}

class Connection {
    public void subscribe() {}
}",1
83073,MqttPublisher,connect,"class MqttPublisher {
      public void connect() throws SpRuntimeException {
        try {
          this.createBrokerConnection(protocol);
          this.currentTopic = protocol.getTopicDefinition().getActualTopicName();
        } catch (Exception e) {
          throw new SpRuntimeException(e);
        }
      }
}

class Protocol {
    public void getTopicDefinition() {}
}",1
83074,MqttPublisher,publish,"class MqttPublisher {
      public void publish(byte[] event) {
        if (connected && currentTopic != null) {
          try {
            this.connection.publish(currentTopic, event, QoS.AT_LEAST_ONCE, false);
          } catch (Exception e) {
            LOG.error(e.getMessage());
          }
        }
      }
}

class Log {
    public void error() {}
}

class e {
    public void getMessage() {}
}",1
83075,MqttPublisher,disconnect,"class MqttPublisher {
      public void disconnect() throws SpRuntimeException {
        try {
          this.connection.disconnect();
        } catch (Exception e) {
          e.printStackTrace();
        } finally {
          this.connected = false;
        }
      }
}

class e {
    public void printStackTrace() {}
}",0
83076,SimpleConfigAppender,appendConfig,"class SimpleConfigAppender {
      public void appendConfig(Properties props) throws SpRuntimeException {
        configs.forEach(props::method);
      }
}

class Configs {
    public void forEach() {}
}",0
83077,PlaceholderReplacer,replace,"class PlaceholderReplacer {
      public String replace() {
        Matcher matcher = getPattern().matcher(markdown);
        markdown = matcher.replaceAll(newContent);
        return markdown;
      }
}

class Matcher {
    public void replaceAll() {}
}",1
83078,DirectoryManager,createIfNotExists,"class DirectoryManager {
      public static void createIfNotExists(Path directory) throws IOException {
        if (!Files.exists(directory)) {
          Files.createDirectories(directory);
        }
      }
}

class Files {
    public void createDirectories() {}
    public void exists() {}
}",1
83079,AbstractMailTemplate,encodeUrlPart,"class AbstractMailTemplate {
      protected String encodeUrlPart(String content) {
        return URLEncoder.encode(content, Charsets.UTF_8);
      }
}

class URLEncoder {
    public void encode() {}
}",1
83080,BaseUrlPart,generate,"class BaseUrlPart {
      public String generate() {
        return MailUtils.extractBaseUrl();
      }
}

class MailUtils {
    public void extractBaseUrl() {}
}",1
83081,LinkPart,generate,"class LinkPart {
      public String generate() {
        return MailUtils.extractBaseUrl() + path;
      }
}

class MailUtils {
    public void extractBaseUrl() {}
}",1
83082,AbstractAdapterIncludedStream,declareConfig,"class AbstractAdapterIncludedStream {
      public IDataStreamConfiguration declareConfig() {
        return DataStreamConfiguration.create(
                () -> null,
                declareModel()
        );
      }
}

class DataStreamConfiguration {
      public static DataStreamConfiguration create(Supplier<IStreamPipesDataStream> supplier,
                                                   SpDataStream dataStream) {
        return new DataStreamConfiguration(supplier, dataStream);
      }
}",0
83083,AbstractAlreadyExistingStream,declareConfig,"class AbstractAlreadyExistingStream {
      public IDataStreamConfiguration declareConfig() {
        return DataStreamConfiguration.create(
                () -> null,
                declareModel()
        );
      }
}

class DataStreamConfiguration {
      public static DataStreamConfiguration create(Supplier<IStreamPipesDataStream> supplier,
                                                   SpDataStream dataStream) {
        return new DataStreamConfiguration(supplier, dataStream);
      }
}",0
83084,EventSchemaUtils,getTimstampProperty,"class EventSchemaUtils {
      private static Optional<EventPropertyPrimitive> getTimstampProperty(List<EventProperty> eventProperties) {
        for (EventProperty ep : eventProperties) {
          if (ep instanceof EventPropertyPrimitive && SO.DATE_TIME.equalsIgnoreCase(ep.getSemanticType())) {
            return Optional.of((EventPropertyPrimitive) ep);
          }
          if (ep instanceof EventPropertyNested) {
            return getTimstampProperty(((EventPropertyNested) ep).getEventProperties());
          }
        }
        return Optional.empty();
      }
}

class Optional {
    public void empty() {}
        public static <T> Optional<T> of(final T value) {
            return new Optional<T>() {
                public boolean isAvailable() {
                    return true;
                }
                public T getValue() {
                    return value;
                }
                public Stream<T> stream() {
                    return Stream.of(value);
                }
            };
        }
}",0
83085,EventCollector,collect,"class EventCollector {
      public void collect(Map<String, Object> event) {
        try {
          adapterPipeline.process(event);
        } catch (RuntimeException e) {
          runtimeContext.getLogger().error(e);
        }
      }
}

class RuntimeContext {
    public void getLogger() {}
}",1
83086,Parsers,defaultParsers,"class Parsers {
      public static List<IParser> defaultParsers() {
        return List.of(
            new JsonParsers(),
            new CsvParser(),
            new XmlParser(),
            new ImageParser(),
            new AvroParser()
        );
      }
}

class List {
    public void of() {}
}",0
83087,JsonObjectParser,parse,"class JsonObjectParser {
      public void parse(InputStream inputStream, IParserEventHandler handler) throws ParseException {
        Map<String, Object> event = toMap(inputStream, Map.class);
        handler.handle(event);
      }
}

class Handler {
    	void handle(T e);
}",1
83088,AdapterPipeline,process,"class AdapterPipeline {
      public void process(Map<String, Object> event) {
        for (IAdapterPipelineElement pipelineElement : pipelineElements) {
          event = pipelineElement.process(event);
        }
        if (pipelineSink != null) {
          pipelineSink.process(event);
        }
      }
}

class PipelineSink {
    public void process() {}
}",1
83089,InputStreamParams,makeSourceInfo,"class InputStreamParams {
      private SourceInfo makeSourceInfo(Integer streamId) {
        return new SourceInfo(eventGrounding.getTransportProtocol().getTopicDefinition()
            .getActualTopicName(), makeStreamPrefix(streamId));
      }
}

class EventGrounding {
      public TransportProtocol getTransportProtocol() {
        if (transportProtocols.isEmpty()) {
          return null;
        } else {
          return transportProtocols.get(0);
        }
      }
}",1
83090,NotificationsExtensionModuleExport,pipelineElements,"class NotificationsExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new EmailSink(),
            new MSTeamsSink(),
            new OneSignalSink(),
            new SlackNotificationSink(),
            new TelegramSink()
        );
      }
}

class List {
    public void of() {}
}",0
83091,NotificationsExtensionModuleExport,migrators,"class NotificationsExtensionModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new OneSignalSinkMigrationV1(),
            new SlackNotificationSinkMigrationV1(),
            new TelegramSinkMigrationV1(),
            new MsTeamsSinkMigrationV1()
        );
      }
}

class List {
    public void of() {}
}",0
83092,MsTeamsSinkMigrationV1,migrate,"class MsTeamsSinkMigrationV1 {
      public MigrationResult<DataSinkInvocation> migrate(DataSinkInvocation element,
                                                         IDataSinkParameterExtractor extractor) throws RuntimeException {
        var proxyConfiguration = StaticProperties.alternatives(
            Labels.withId(KEY_PROXY_ALTERNATIVES),
            Alternatives.from(Labels.withId(KEY_PROXY_DISABLED)),
            Alternatives.from(Labels.withId(KEY_PROXY_ENABLED),
                StaticProperties.group(Labels.withId(KEY_PROXY_GROUP),
                    StaticProperties.stringFreeTextProperty(Labels.withId(KEY_PROXY_URL))
                )
            ));
        proxyConfiguration.getAlternatives().get(0).setSelected(true);
        element.getStaticProperties().add(1, proxyConfiguration);
        return MigrationResult.success(element);
      }
}

class Alternatives {
      public static StaticPropertyAlternative from(Label label, boolean selected) {
        StaticPropertyAlternative alternative = new StaticPropertyAlternative(label.getInternalId(),
            label.getLabel(), label.getInternalId());
        alternative.setSelected(selected);
        return alternative;
      }
}

class ProxyConfiguration {
    public void getAlternatives() {}
}

class Element {
    public void getStaticProperties() {}
}",0
83093,InternalSinksExtensionModuleExports,pipelineElements,"class InternalSinksExtensionModuleExports {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new DataLakeSink(),
            new InternalStreamPipesNotificationSink()
        );
      }
}

class List {
    public void of() {}
}",0
83094,InternalSinksExtensionModuleExports,migrators,"class InternalSinksExtensionModuleExports {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new DataLakeSinkMigrationV1(),
            new DataLakeSinkMigrationV2());
      }
}

class List {
    public void of() {}
}",0
83095,DatabaseSinksExtensionModuleExport,pipelineElements,"class DatabaseSinksExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new CouchDbSink(),
            new PostgreSqlSink(),
            new IotDbSink(),
            new DittoSink(),
            new RedisSink(),
            new MilvusSink(),
            new QdrantSink(),
            new TsFileSink(),
            new ParquetSink());
      }
}

class List {
    public void of() {}
}",0
83096,BrokerSinksExtensionModuleExport,pipelineElements,"class BrokerSinksExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new JmsPublisherSink(),
            new RestSink(),
            new BufferRestPublisherSink(),
            new RabbitMqPublisherSink(),
            new WebsocketServerSink()
        );
      }
}

class List {
    public void of() {}
}",0
83097,BrokerSinksExtensionModuleExport,migrators,"class BrokerSinksExtensionModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new RestSinkMigrationV1()
        );
      }
}

class List {
    public void of() {}
}",0
83098,Md5HashAlgorithm,toHashValue,"class Md5HashAlgorithm {
      public String toHashValue(Object value) {
        return DigestUtils.md5Hex(String.valueOf(value));
      }
}

class DigestUtils {
        public static String md5Hex(final String data) {
            return Hex.encodeHexString(md5(data));
        }
}",1
83099,Sha1HashAlgorithm,toHashValue,"class Sha1HashAlgorithm {
      public String toHashValue(Object value) {
        return DigestUtils.shaHex(String.valueOf(value));
      }
}

class DigestUtils {
        public static String shaHex(final String data) {
            return sha1Hex(data);
        }
}",1
83100,Sha2HashAlgorithm,toHashValue,"class Sha2HashAlgorithm {
      public String toHashValue(Object value) {
        return DigestUtils.sha256Hex(String.valueOf(value));
      }
}

class DigestUtils {
        public static String sha256Hex(final String data) {
            return Hex.encodeHexString(sha256(data));
        }
}",1
83101,TextMiningExtensionModuleExport,pipelineElements,"class TextMiningExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new TokenizerProcessor(),
            new PartOfSpeechProcessor(),
            new ChunkerProcessor(),
            new NameFinderProcessor(),
            new SentenceDetectionProcessor()
        );
      }
}

class List {
    public void of() {}
}",0
83102,LlmExtensionModuleExport,pipelineElements,"class LlmExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(new MultiModelPromptProcessor());
      }
}

class List {
    public void of() {}
}",0
83103,ImageProcessingExtensionModuleExport,pipelineElements,"class ImageProcessingExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new ImageEnrichmentProcessor(),
            new ImageCropperProcessor(),
            new QrCodeReaderProcessor(),
            new GenericImageClassificationProcessor()
        );
      }
}

class List {
    public void of() {}
}",0
83104,ImageProcessingExtensionModuleExport,migrators,"class ImageProcessingExtensionModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new ImageEnrichmentProcessorMigrationv1()
        );
      }
}

class List {
    public void of() {}
}",0
83105,KDTree,findNearest,"class KDTree {
      private KDNode<T> findNearest(KDNode<T> currentNode, T search, int depth) {
        int direction = search.getComparator(depth % 3).compare(search, currentNode.location);
        KDNode<T> next = (direction < 0) ? currentNode.left : currentNode.right;
        KDNode<T> other = (direction < 0) ? currentNode.right : currentNode.left;
        KDNode<T> best = (next == null) ? currentNode : findNearest(next, search, depth + 1);
        if (currentNode.location.squaredDistance(search) < best.location.squaredDistance(search)) {
          best = currentNode;
        }
        if (other != null) {
          if (currentNode.location.axisSquaredDistance(search, depth % 3) < best.location.squaredDistance(search)) {
            KDNode<T> possibleBest = findNearest(other, search, depth + 1);
            if (possibleBest.location.squaredDistance(search) < best.location.squaredDistance(search)) {
              best = possibleBest;
            }
          }
        }
        return best;
      }
}

class Search {
    public void getComparator() {}
}",1
83106,KDTree,createKDTree,"class KDTree {
      private KDNode<T> createKDTree(List<T> items, int depth) {
        if (items.isEmpty()) {
          return null;
        }
        Collections.sort(items, items.get(0).getComparator(depth % 3));
        int currentIndex = items.size() / 2;
        return new KDNode<T>(createKDTree(new ArrayList<T>(items.subList(0, currentIndex)), depth + 1),
            createKDTree(new ArrayList<T>(items.subList(currentIndex + 1, items.size())), depth + 1),
            items.get(currentIndex));
      }
}

class Items {
    public void subList() {}
    public void size() {}
    public void get() {}
    public void isEmpty() {}
}",0
83107,SiddhiFilterExtensionModuleExport,pipelineElements,"class SiddhiFilterExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new TrendProcessor(),
            new NumericalFilterSiddhiProcessor(),
            new ListFilter(),
            new ListCollector(),
            new CountAggregation(),
            new TopK()
        );
      }
}

class List {
    public void of() {}
}",0
83108,FilterExtensionModuleExport,pipelineElements,"class FilterExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new BooleanFilterProcessor(),
            new TextFilterProcessor(),
            new NumericalFilterProcessor(),
            new ThresholdDetectionProcessor(),
            new ThroughputMonitorProcessor(),
            new ProjectionProcessor(),
            new MergeByEnrichProcessor(),
            new MergeByTimeProcessor(),
            new MergeBySchemaProcessor(),
            new ComposeProcessor(),
            new NumericalTextFilterProcessor(),
            new RateLimitProcessor(),
            new MovingAverageProcessor(),
            new SwingingDoorTrendingFilterProcessor()
        );
      }
}

class List {
    public void of() {}
}",1
83109,StreamBuffer,add,"class StreamBuffer {
        public void add(Event event) {
            buffer.add(event);
        }
}

class Buffer {
    public void add() {}
}",1
83110,StreamBuffer,removeOldEvents,"class StreamBuffer {
        public void removeOldEvents(long timestamp) {
            Iterator itr = this.buffer.iterator();
            while (itr.hasNext())
            {
                Event e = (Event) itr.next();
                if (e.getFieldBySelector(timestampProperty).getAsPrimitive().getAsLong() <= timestamp)
                    itr.remove();
            }
        }
}

class Itr {
    public void next() {}
    public void hasNext() {}
    public void remove() {}
}

class e {
    public void getFieldBySelector() {}
}",0
83111,SwingingDoorTrendingFilter,forward,"class SwingingDoorTrendingFilter {
      public void forward(SpOutputCollector collector) {
        collector.collect(lastStoredEvent);
      }
}

class Collector {
      void collect(T elem);
}",1
83112,ProcessJob,execute,"class ProcessJob {
        public void execute(JobExecutionContext context) {
            JobDataMap dataMap = context.getJobDetail().getJobDataMap();
            Window window = (Window) dataMap.get(SchedulerUtil.WINDOW_KEY);
            window.onTrigger();
        }
}

class Context {
    public void getJobDetail() {}
}

class Datamap {
    public void get() {}
}",1
83113,EnricherExtensionModuleExport,pipelineElements,"class EnricherExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new JSEvalProcessor(),
            new QualityControlLimitsEnrichmentProcessor(),
            new SensorLimitAlertProcessor(),
            new MathOpProcessor(),
            new StaticMathOpProcessor(),
            new TrigonometryProcessor(),
            new ValueChangeProcessor(),
            new MathExpressionProcessor()
        );
      }
}

class List {
    public void of() {}
}",0
83114,JexlEvaluator,evaluate,"class JexlEvaluator {
      public void evaluate(MapContext context,
                           Event event) {
        event.addField(jexlDescription.getFieldName(), script.execute(context));
      }
}

class Event {
    public void addField() {}
}

class Script {
    public void execute() {}
}",1
83115,ChangeDetectionExtensionModuleExport,pipelineElements,"class ChangeDetectionExtensionModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new WelfordChangeDetection()
        );
      }
}

class List {
    public void of() {}
}",0
83116,MapKeySelector,getKeySelector,"class MapKeySelector {
      public KeySelector<Event, String> getKeySelector() {
        return new KeySelector<Event, String>() {
          public String getKey(Event in) throws Exception {
            return in.getFieldBySelector(groupBy).getAsPrimitive().getAsString();
          }
        };
      }
}

class In {
    public void getFieldBySelector() {}
}",1
83117,AggregationProgram,getKeyedStream,"class AggregationProgram {
      private DataStream<Event> getKeyedStream(DataStream<Event> dataStream) {
        if (params.getGroupBy().size() > 0) {
          KeyedStream<Event, Map<String, String>> keyedStream = dataStream.keyBy(getKeySelector());
          if (params.getTimeWindow()) {
            return keyedStream
                .window(SlidingEventTimeWindows.of(Time.seconds(params.getWindowSize()),
                    Time.seconds(params.getOutputEvery())))
                .apply(new TimeAggregation(params.getAggregationType(), params.getAggregateKeyList(),
                    params.getGroupBy()));
          } else {
            return keyedStream
                .countWindow(params.getWindowSize(), params.getOutputEvery())
                .apply(new CountAggregation(params.getAggregationType(), params.getAggregateKeyList(),
                    params.getGroupBy()));
          }
        } else {
          if (params.getTimeWindow()) {
            return dataStream
                .timeWindowAll(Time.seconds(params.getWindowSize()), Time.seconds(params.getOutputEvery()))
                .apply(new TimeAggregation(params.getAggregationType(), params.getAggregateKeyList()));
          } else {
            return dataStream
                .countWindowAll(params.getWindowSize(), params.getOutputEvery())
                .apply(new CountAggregation(params.getAggregationType(), params.getAggregateKeyList()));
          }
        }
      }
}

class Params {
    public void getAggregateKeyList() {}
    public void getOutputEvery() {}
    public void getAggregationType() {}
    public void getTimeWindow() {}
    public void getWindowSize() {}
    public void getGroupBy() {}
}

class DataStream {
    public void countWindowAll() {}
    public void keyBy() {}
    public void timeWindowAll() {}
}

class Time {
    public void seconds() {}
}",1
83118,AggregationProgram,getKeySelector,"class AggregationProgram {
      private KeySelector<Event, Map<String, String>> getKeySelector() {
        List<String> groupBy = params.getGroupBy();
        return new KeySelector<Event, Map<String, String>>() {
          public Map<String, String> getKey(Event event) throws Exception {
            Map<String, String> keys = new HashMap<>();
            for (String groupBy : groupBy) {
              keys.put(groupBy, event.getFieldBySelector(groupBy).getAsPrimitive().getAsString());
            }
            return keys;
          }
        };
      }
}

class Params {
    public void getGroupBy() {}
}

class Keys {
    public void put() {}
}

class Event {
    public void getFieldBySelector() {}
}",1
83119,TimeUnitConverter,toTime,"class TimeUnitConverter {
      public static Time toTime(TimeUnit timeUnit, long value) {
        if (timeUnit == TimeUnit.Seconds) {
          return Time.seconds(value);
        } else if (timeUnit == TimeUnit.Minutes) {
          return Time.minutes(value);
        } else {
          return Time.hours(value);
        }
      }
}

class Time {
    public void seconds() {}
    public void hours() {}
    public void minutes() {}
}",0
83120,TimestampExtractor,extractAscendingTimestamp,"class TimestampExtractor {
      public long extractAscendingTimestamp(Event in) {
        return in.getFieldBySelector(timestampField).getAsPrimitive().getAsLong();
      }
}

class In {
    public void getFieldBySelector() {}
}",1
83121,CountProgram,getApplicationLogic,"class CountProgram {
      public DataStream<Event> getApplicationLogic(DataStream<Event>... dataStreams) {
        return dataStreams[0]
            .map(new CountMapper(params.getFieldToCount()))
            .keyBy(1)
            .timeWindow(new TimeWindowConverter().makeTimeWindow(params.getTimeWindowSize(),
                params.getTimeWindowScale()))
            .trigger(new CountTrigger())
            .sum(2)
            .map(new Tuple2MapMapper());
      }
}

class Params {
    public void getTimeWindowSize() {}
    public void getTimeWindowScale() {}
    public void getFieldToCount() {}
}",1
83122,EventCountProgram,getApplicationLogic,"class EventCountProgram {
      public DataStream<Event> getApplicationLogic(DataStream<Event>... dataStreams) {
        return dataStreams[0]
            .map(new EventCountMapper())
            .timeWindowAll(new TimeWindowConverter().makeTimeWindow(params.getTimeWindowSize(),
                params.getTimeWindowScale()))
            .sum(0)
            .map(new EventCountOutputMapper());
      }
}

class Params {
    public void getTimeWindowSize() {}
    public void getTimeWindowScale() {}
}",1
83123,SpatialGridEnricher,flatMap,"class SpatialGridEnricher {
      public void flatMap(Event in, Collector<Event> out) throws
          Exception {
        Double latitude = in.getFieldBySelector(settings.getLatPropertyName()).getAsPrimitive()
            .getAsDouble();
        Double longitude = in.getFieldBySelector(settings.getLngPropertyName()).getAsPrimitive().getAsDouble();
        CellOption result = calculator.computeCells(latitude, longitude);
        out.collect(toOutput(in, result));
      }
}

class In {
    public void getFieldBySelector() {}
}

class Settings {
    public void getLatPropertyName() {}
    public void getLngPropertyName() {}
}

class Calculator {
    public void computeCells() {}
}",1
83124,SpatialGridEnricher,toOutput,"class SpatialGridEnricher {
      private Event toOutput(Event in, CellOption result) {
        in.addField(SpatialGridConstants.GRID_X_KEY, result.getCellX());
        in.addField(SpatialGridConstants.GRID_Y_KEY, result.getCellY());
        in.addField(SpatialGridConstants.GRID_CELLSIZE_KEY, result.getCellSize());
        in.addField(SpatialGridConstants.GRID_LAT_NW_KEY, result.getLatitudeNW());
        in.addField(SpatialGridConstants.GRID_LON_NW_KEY, result.getLongitudeNW());
        in.addField(SpatialGridConstants.GRID_LAT_SE_KEY, result.getLatitudeSE());
        in.addField(SpatialGridConstants.GRID_LON_SE_KEY, result.getLongitudeSE());
        return in;
      }
}

class In {
    public void addField() {}
}

class Result {
    public void getLatitudeNW() {}
    public void getLatitudeSE() {}
    public void getCellX() {}
    public void getCellSize() {}
    public void getLongitudeNW() {}
    public void getCellY() {}
    public void getLongitudeSE() {}
}",1
83125,MeasurementUnitConverter,flatMap,"class MeasurementUnitConverter {
      public void flatMap(Event in, Collector<Event> out) throws Exception {
        Unit inputUnit = UnitProvider.INSTANCE.getUnit(inputUnitUri);
        Unit outputUnit = UnitProvider.INSTANCE.getUnit(outputUnitUri);
        Double value = (double) in.getFieldBySelector(convertProperty).getAsPrimitive()
            .getAsDouble();
        Quantity obs = new Quantity(value, inputUnit);
        Double newValue = obs.convertTo(outputUnit).getValue();
        in.updateFieldBySelector(convertProperty, newValue);
        out.collect(in);
      }
}

class In {
    public void getFieldBySelector() {}
    public void updateFieldBySelector() {}
}",0
83126,MeasurementUnitConverterProgram,getApplicationLogic,"class MeasurementUnitConverterProgram {
      public DataStream<Event> getApplicationLogic(DataStream<Event>...
                                                          dataStreams) {
        return dataStreams[0].flatMap(new MeasurementUnitConverter(params.getInputUnit()
            .getResource().toString(), params.getOutputUnit().getResource().toString(),
            params.getConvertProperty()));
      }
}

class Params {
    public void getOutputUnit() {}
    public void getConvertProperty() {}
    public void getInputUnit() {}
}",1
83127,EventRate,apply,"class EventRate {
      public void apply(TimeWindow timeWindow, Iterable<Event> iterable, Collector<Float> collector)
          throws Exception {
        collector.collect((float) Iterables.size(iterable) / timeWindowSize);
      }
}

class Collector {
      void collect(T elem);
}

class Iterables {
    public void size() {}
}",1
83128,FieldRenamer,flatMap,"class FieldRenamer {
      public void flatMap(Event in,
                          Collector<Event> out) throws Exception {
        AbstractField<?> propertyValue = in.getFieldBySelector(oldPropertyName);
        in.removeFieldBySelector(oldPropertyName);
        in.addField(newPropertyName, propertyValue);
        out.collect(in);
      }
}

class In {
    public void addField() {}
    public void removeFieldBySelector() {}
    public void getFieldBySelector() {}
}",0
83129,SequenceProgram,getApplicationLogic,"class SequenceProgram {
      public DataStream<Event> getApplicationLogic(DataStream<Event>... dataStreams) {
        return dataStreams[0].keyBy(getKeySelector()).connect(dataStreams[1].keyBy(getKeySelector()))
            .process(new Sequence(params
                .getTimeUnit(),
                params
                    .getTimeWindow
                        ()));
      }
}

class Params {
    public void getTimeWindow() {}
    public void getTimeUnit() {}
}",1
83130,TimestampEnricher,flatMap,"class TimestampEnricher {
      public void flatMap(Event in,
                          Collector<Event> out) throws Exception {
        in.addField(appendTimePropertyName, System.currentTimeMillis());
        out.collect(in);
      }
}

class In {
    public void addField() {}
}",0
83131,ArticleExtractor,process,"class ArticleExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return
        TerminatingBlocksFinder.INSTANCE.process(doc)
            | new DocumentTitleMatchClassifier(doc.getTitle()).process(doc)
            | NumWordsRulesClassifier.INSTANCE.process(doc)
            | IgnoreBlocksAfterContentFilter.DEFAULT_INSTANCE.process(doc)
            | TrailingHeadlineToBoilerplateFilter.INSTANCE.process(doc)
            | BlockProximityFusion.MAX_DISTANCE_1.process(doc)
            | BoilerplateBlockFilter.INSTANCE_KEEP_TITLE.process(doc)
            | BlockProximityFusion.MAX_DISTANCE_1_CONTENT_ONLY_SAME_TAGLEVEL.process(doc)
            | KeepLargestBlockFilter.INSTANCE_EXPAND_TO_SAME_TAGLEVEL_MIN_WORDS.process(doc)
            | ExpandTitleToContentFilter.INSTANCE.process(doc)
            | LargeBlockSameTagLevelToContentFilter.INSTANCE.process(doc)
            | ListAtEndFilter.INSTANCE.process(doc);
      }
}

class Doc {
    public void getTitle() {}
}

class NumWordsRulesClassifier {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        ListIterator<TextBlock> it = textBlocks.listIterator();
        if (!it.hasNext()) {
          return false;
        }
        TextBlock prevBlock = TextBlock.EMPTY_START;
        TextBlock currentBlock = it.next();
        TextBlock nextBlock = it.hasNext() ? it.next() : TextBlock.EMPTY_START;
        hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        if (nextBlock != TextBlock.EMPTY_START) {
          while (it.hasNext()) {
            prevBlock = currentBlock;
            currentBlock = nextBlock;
            nextBlock = it.next();
            hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
          }
          prevBlock = currentBlock;
          currentBlock = nextBlock;
          nextBlock = TextBlock.EMPTY_START;
          hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        }
        return hasChanges;
      }
}

class IgnoreBlocksAfterContentFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int numWords = 0;
        boolean foundEndOfText = false;
        for (Iterator<TextBlock> it = doc.getTextBlocks().iterator(); it.hasNext();) {
          TextBlock block = it.next();
          final boolean endOfText = block.hasLabel(DefaultLabels.INDICATES_END_OF_TEXT);
          if (block.isContent()) {
            numWords += getNumFullTextWords(block);
          }
          if (endOfText && numWords >= minNumWords) {
            foundEndOfText = true;
          }
          if (foundEndOfText) {
            changes = true;
            block.setIsContent(false);
          }
        }
        return changes;
      }
}

class TrailingHeadlineToBoilerplateFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        List<TextBlock> list = doc.getTextBlocks();
        for (ListIterator<TextBlock> it = list.listIterator(list.size()); it.hasPrevious();) {
          TextBlock tb = it.previous();
          if (tb.isContent()) {
            if (tb.hasLabel(DefaultLabels.HEADING)) {
              tb.setIsContent(false);
              changes = true;
            } else {
              break;
            }
          }
        }
        return changes;
      }
}

class BlockProximityFusion {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        boolean changes = false;
        TextBlock prevBlock;
        int offset;
        if (contentOnly) {
          prevBlock = null;
          offset = 0;
          for (TextBlock tb : textBlocks) {
            offset++;
            if (tb.isContent()) {
              prevBlock = tb;
              break;
            }
          }
          if (prevBlock == null) {
            return false;
          }
        } else {
          prevBlock = textBlocks.get(0);
          offset = 1;
        }
        for (Iterator<TextBlock> it = textBlocks.listIterator(offset); it.hasNext();) {
          TextBlock block = it.next();
          if (!block.isContent()) {
            prevBlock = block;
            continue;
          }
          int diffBlocks = block.getOffsetBlocksStart() - prevBlock.getOffsetBlocksEnd() - 1;
          if (diffBlocks <= maxBlocksDistance) {
            boolean ok = true;
            if (contentOnly) {
              if (!prevBlock.isContent() || !block.isContent()) {
                ok = false;
              }
            }
            if (ok && sameTagLevelOnly && prevBlock.getTagLevel() != block.getTagLevel()) {
              ok = false;
            }
            if (ok) {
              prevBlock.mergeNext(block);
              it.remove();
              changes = true;
            } else {
              prevBlock = block;
            }
          } else {
            prevBlock = block;
          }
        }
        return changes;
      }
}

class BoilerplateBlockFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        for (Iterator<TextBlock> it = textBlocks.iterator(); it.hasNext();) {
          TextBlock tb = it.next();
          if (!tb.isContent() && (labelToKeep == null || !tb.hasLabel(DefaultLabels.TITLE))) {
            it.remove();
            hasChanges = true;
          }
        }
        return hasChanges;
      }
}

class KeepLargestBlockFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        int maxNumWords = -1;
        TextBlock largestBlock = null;
        int level = -1;
        int i = 0;
        int n = -1;
        for (TextBlock tb : textBlocks) {
          if (tb.isContent()) {
            final int nw = tb.getNumWords();
            if (nw > maxNumWords) {
              largestBlock = tb;
              maxNumWords = nw;
              n = i;
              if (expandToSameLevelText) {
                level = tb.getTagLevel();
              }
            }
          }
          i++;
        }
        for (TextBlock tb : textBlocks) {
          if (tb == largestBlock) {
            tb.setIsContent(true);
            tb.addLabel(DefaultLabels.VERY_LIKELY_CONTENT);
          } else {
            tb.setIsContent(false);
            tb.addLabel(DefaultLabels.MIGHT_BE_CONTENT);
          }
        }
        if (expandToSameLevelText && n != -1) {
          for (ListIterator<TextBlock> it = textBlocks.listIterator(n); it.hasPrevious();) {
            TextBlock tb = it.previous();
            final int tl = tb.getTagLevel();
            if (tl < level) {
              break;
            } else if (tl == level) {
              if (tb.getNumWords() >= minWords) {
                tb.setIsContent(true);
              }
            }
          }
          for (ListIterator<TextBlock> it = textBlocks.listIterator(n); it.hasNext();) {
            TextBlock tb = it.next();
            final int tl = tb.getTagLevel();
            if (tl < level) {
              break;
            } else if (tl == level) {
              if (tb.getNumWords() >= minWords) {
                tb.setIsContent(true);
              }
            }
          }
        }
        return true;
      }
}

class ExpandTitleToContentFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        int i = 0;
        int title = -1;
        int contentStart = -1;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (contentStart == -1 && tb.hasLabel(DefaultLabels.TITLE)) {
            title = i;
            contentStart = -1;
          }
          if (contentStart == -1 && tb.isContent()) {
            contentStart = i;
          }
          i++;
        }
        if (contentStart <= title || title == -1) {
          return false;
        }
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks().subList(title, contentStart)) {
          if (tb.hasLabel(DefaultLabels.MIGHT_BE_CONTENT)) {
            changes = tb.setIsContent(true) | changes;
          }
        }
        return changes;
      }
}

class LargeBlockSameTagLevelToContentFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int tagLevel = -1;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (tb.isContent() && tb.hasLabel(DefaultLabels.VERY_LIKELY_CONTENT)) {
            tagLevel = tb.getTagLevel();
            break;
          }
        }
        if (tagLevel == -1) {
          return false;
        }
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            if (tb.getNumWords() >= 100 && tb.getTagLevel() == tagLevel) {
              tb.setIsContent(true);
              changes = true;
            }
          }
        }
        return changes;
      }
}

class ListAtEndFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int tagLevel = Integer.MAX_VALUE;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (tb.isContent() && tb.hasLabel(DefaultLabels.VERY_LIKELY_CONTENT)) {
            tagLevel = tb.getTagLevel();
          } else {
            if (tb.getTagLevel() > tagLevel && tb.hasLabel(DefaultLabels.MIGHT_BE_CONTENT)
                && tb.hasLabel(DefaultLabels.LI) && tb.getLinkDensity() == 0) {
              tb.setIsContent(true);
              changes = true;
            } else {
              tagLevel = Integer.MAX_VALUE;
            }
          }
        }
        return changes;
      }
}",0
83132,ArticleSentencesExtractor,process,"class ArticleSentencesExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return
        ArticleExtractor.INSTANCE.process(doc) | SplitParagraphBlocksFilter.INSTANCE.process(doc)
            | MinClauseWordsFilter.INSTANCE.process(doc);
      }
}

class ArticleExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return
        TerminatingBlocksFinder.INSTANCE.process(doc)
            | new DocumentTitleMatchClassifier(doc.getTitle()).process(doc)
            | NumWordsRulesClassifier.INSTANCE.process(doc)
            | IgnoreBlocksAfterContentFilter.DEFAULT_INSTANCE.process(doc)
            | TrailingHeadlineToBoilerplateFilter.INSTANCE.process(doc)
            | BlockProximityFusion.MAX_DISTANCE_1.process(doc)
            | BoilerplateBlockFilter.INSTANCE_KEEP_TITLE.process(doc)
            | BlockProximityFusion.MAX_DISTANCE_1_CONTENT_ONLY_SAME_TAGLEVEL.process(doc)
            | KeepLargestBlockFilter.INSTANCE_EXPAND_TO_SAME_TAGLEVEL_MIN_WORDS.process(doc)
            | ExpandTitleToContentFilter.INSTANCE.process(doc)
            | LargeBlockSameTagLevelToContentFilter.INSTANCE.process(doc)
            | ListAtEndFilter.INSTANCE.process(doc);
      }
}

class MinClauseWordsFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            continue;
          }
          final String text = tb.getText();
          Matcher m = PAT_CLAUSE_DELIMITER.matcher(text);
          boolean found = m.find();
          int start = 0;
          int end;
          boolean hasClause = false;
          while (found) {
            end = m.start() + 1;
            hasClause = isClause(text.subSequence(start, end));
            start = m.end();
            if (hasClause) {
              break;
            }
            found = m.find();
          }
          end = text.length();
          if (acceptClausesWithoutDelimiter) {
            hasClause |= isClause(text.subSequence(start, end));
          }
          if (!hasClause) {
            tb.setIsContent(false);
            changes = true;
          }
        }
        return changes;
      }
}",0
83133,CanolaExtractor,process,"class CanolaExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return CLASSIFIER.process(doc);
      }
}

class Classifier {
    public void process() {}
}",1
83134,DefaultExtractor,process,"class DefaultExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return
        SimpleBlockFusionProcessor.INSTANCE.process(doc)
            | BlockProximityFusion.MAX_DISTANCE_1.process(doc)
            | DensityRulesClassifier.INSTANCE.process(doc);
      }
}

class SimpleBlockFusionProcessor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean changes = false;
        if (textBlocks.size() < 2) {
          return false;
        }
        TextBlock b1 = textBlocks.get(0);
        for (Iterator<TextBlock> it = textBlocks.listIterator(1); it.hasNext();) {
          TextBlock b2 = it.next();
          final boolean similar = (b1.getTextDensity() == b2.getTextDensity());
          if (similar) {
            b1.mergeNext(b2);
            it.remove();
            changes = true;
          } else {
            b1 = b2;
          }
        }
        return changes;
      }
}

class BlockProximityFusion {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        boolean changes = false;
        TextBlock prevBlock;
        int offset;
        if (contentOnly) {
          prevBlock = null;
          offset = 0;
          for (TextBlock tb : textBlocks) {
            offset++;
            if (tb.isContent()) {
              prevBlock = tb;
              break;
            }
          }
          if (prevBlock == null) {
            return false;
          }
        } else {
          prevBlock = textBlocks.get(0);
          offset = 1;
        }
        for (Iterator<TextBlock> it = textBlocks.listIterator(offset); it.hasNext();) {
          TextBlock block = it.next();
          if (!block.isContent()) {
            prevBlock = block;
            continue;
          }
          int diffBlocks = block.getOffsetBlocksStart() - prevBlock.getOffsetBlocksEnd() - 1;
          if (diffBlocks <= maxBlocksDistance) {
            boolean ok = true;
            if (contentOnly) {
              if (!prevBlock.isContent() || !block.isContent()) {
                ok = false;
              }
            }
            if (ok && sameTagLevelOnly && prevBlock.getTagLevel() != block.getTagLevel()) {
              ok = false;
            }
            if (ok) {
              prevBlock.mergeNext(block);
              it.remove();
              changes = true;
            } else {
              prevBlock = block;
            }
          } else {
            prevBlock = block;
          }
        }
        return changes;
      }
}

class DensityRulesClassifier {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        ListIterator<TextBlock> it = textBlocks.listIterator();
        if (!it.hasNext()) {
          return false;
        }
        TextBlock prevBlock = TextBlock.EMPTY_START;
        TextBlock currentBlock = it.next();
        TextBlock nextBlock = it.hasNext() ? it.next() : TextBlock.EMPTY_START;
        hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        if (nextBlock != TextBlock.EMPTY_START) {
          while (it.hasNext()) {
            prevBlock = currentBlock;
            currentBlock = nextBlock;
            nextBlock = it.next();
            hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
          }
          prevBlock = currentBlock;
          currentBlock = nextBlock;
          nextBlock = TextBlock.EMPTY_START;
          hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        }
        return hasChanges;
      }
}",0
83135,KeepEverythingExtractor,process,"class KeepEverythingExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return MarkEverythingContentFilter.INSTANCE.process(doc);
      }
}

class MarkEverythingContentFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            tb.setIsContent(true);
            changes = true;
          }
        }
        return changes;
      }
}",0
83136,KeepEverythingWithMinKWordsExtractor,process,"class KeepEverythingWithMinKWordsExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return SimpleBlockFusionProcessor.INSTANCE.process(doc)
            | MarkEverythingContentFilter.INSTANCE.process(doc) | filter.process(doc);
      }
}

class SimpleBlockFusionProcessor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean changes = false;
        if (textBlocks.size() < 2) {
          return false;
        }
        TextBlock b1 = textBlocks.get(0);
        for (Iterator<TextBlock> it = textBlocks.listIterator(1); it.hasNext();) {
          TextBlock b2 = it.next();
          final boolean similar = (b1.getTextDensity() == b2.getTextDensity());
          if (similar) {
            b1.mergeNext(b2);
            it.remove();
            changes = true;
          } else {
            b1 = b2;
          }
        }
        return changes;
      }
}

class MarkEverythingContentFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            tb.setIsContent(true);
            changes = true;
          }
        }
        return changes;
      }
}

class Filter {
    public void process() {}
}",0
83137,LargestContentExtractor,process,"class LargestContentExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return NumWordsRulesClassifier.INSTANCE.process(doc)
            | BlockProximityFusion.MAX_DISTANCE_1.process(doc)
            | KeepLargestBlockFilter.INSTANCE.process(doc);
      }
}

class NumWordsRulesClassifier {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        ListIterator<TextBlock> it = textBlocks.listIterator();
        if (!it.hasNext()) {
          return false;
        }
        TextBlock prevBlock = TextBlock.EMPTY_START;
        TextBlock currentBlock = it.next();
        TextBlock nextBlock = it.hasNext() ? it.next() : TextBlock.EMPTY_START;
        hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        if (nextBlock != TextBlock.EMPTY_START) {
          while (it.hasNext()) {
            prevBlock = currentBlock;
            currentBlock = nextBlock;
            nextBlock = it.next();
            hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
          }
          prevBlock = currentBlock;
          currentBlock = nextBlock;
          nextBlock = TextBlock.EMPTY_START;
          hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        }
        return hasChanges;
      }
}

class BlockProximityFusion {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        boolean changes = false;
        TextBlock prevBlock;
        int offset;
        if (contentOnly) {
          prevBlock = null;
          offset = 0;
          for (TextBlock tb : textBlocks) {
            offset++;
            if (tb.isContent()) {
              prevBlock = tb;
              break;
            }
          }
          if (prevBlock == null) {
            return false;
          }
        } else {
          prevBlock = textBlocks.get(0);
          offset = 1;
        }
        for (Iterator<TextBlock> it = textBlocks.listIterator(offset); it.hasNext();) {
          TextBlock block = it.next();
          if (!block.isContent()) {
            prevBlock = block;
            continue;
          }
          int diffBlocks = block.getOffsetBlocksStart() - prevBlock.getOffsetBlocksEnd() - 1;
          if (diffBlocks <= maxBlocksDistance) {
            boolean ok = true;
            if (contentOnly) {
              if (!prevBlock.isContent() || !block.isContent()) {
                ok = false;
              }
            }
            if (ok && sameTagLevelOnly && prevBlock.getTagLevel() != block.getTagLevel()) {
              ok = false;
            }
            if (ok) {
              prevBlock.mergeNext(block);
              it.remove();
              changes = true;
            } else {
              prevBlock = block;
            }
          } else {
            prevBlock = block;
          }
        }
        return changes;
      }
}

class KeepLargestBlockFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        int maxNumWords = -1;
        TextBlock largestBlock = null;
        int level = -1;
        int i = 0;
        int n = -1;
        for (TextBlock tb : textBlocks) {
          if (tb.isContent()) {
            final int nw = tb.getNumWords();
            if (nw > maxNumWords) {
              largestBlock = tb;
              maxNumWords = nw;
              n = i;
              if (expandToSameLevelText) {
                level = tb.getTagLevel();
              }
            }
          }
          i++;
        }
        for (TextBlock tb : textBlocks) {
          if (tb == largestBlock) {
            tb.setIsContent(true);
            tb.addLabel(DefaultLabels.VERY_LIKELY_CONTENT);
          } else {
            tb.setIsContent(false);
            tb.addLabel(DefaultLabels.MIGHT_BE_CONTENT);
          }
        }
        if (expandToSameLevelText && n != -1) {
          for (ListIterator<TextBlock> it = textBlocks.listIterator(n); it.hasPrevious();) {
            TextBlock tb = it.previous();
            final int tl = tb.getTagLevel();
            if (tl < level) {
              break;
            } else if (tl == level) {
              if (tb.getNumWords() >= minWords) {
                tb.setIsContent(true);
              }
            }
          }
          for (ListIterator<TextBlock> it = textBlocks.listIterator(n); it.hasNext();) {
            TextBlock tb = it.next();
            final int tl = tb.getTagLevel();
            if (tl < level) {
              break;
            } else if (tl == level) {
              if (tb.getNumWords() >= minWords) {
                tb.setIsContent(true);
              }
            }
          }
        }
        return true;
      }
}",0
83138,NumWordsRulesExtractor,process,"class NumWordsRulesExtractor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        return NumWordsRulesClassifier.INSTANCE.process(doc);
      }
}

class NumWordsRulesClassifier {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        ListIterator<TextBlock> it = textBlocks.listIterator();
        if (!it.hasNext()) {
          return false;
        }
        TextBlock prevBlock = TextBlock.EMPTY_START;
        TextBlock currentBlock = it.next();
        TextBlock nextBlock = it.hasNext() ? it.next() : TextBlock.EMPTY_START;
        hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        if (nextBlock != TextBlock.EMPTY_START) {
          while (it.hasNext()) {
            prevBlock = currentBlock;
            currentBlock = nextBlock;
            nextBlock = it.next();
            hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
          }
          prevBlock = currentBlock;
          currentBlock = nextBlock;
          nextBlock = TextBlock.EMPTY_START;
          hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        }
        return hasChanges;
      }
}",0
83139,BoilerpipeHTMLParser,toTextDocument,"class BoilerpipeHTMLParser {
      public TextDocument toTextDocument() {
        return contentHandler.toTextDocument();
      }
}

class ContentHandler {
    public void toTextDocument() {}
}",1
83140,BoilerpipeSAXInput,getTextDocument,"class BoilerpipeSAXInput {
      public TextDocument getTextDocument(final BoilerpipeHTMLParser parser)
          throws BoilerpipeProcessingException {
        try {
          parser.parse(is);
        } catch (IOException e) {
          throw new BoilerpipeProcessingException(e);
        } catch (SAXException e) {
          throw new BoilerpipeProcessingException(e);
        }
        return parser.toTextDocument();
      }
}

class Parser {
    public void toTextDocument() {}
        <T extends Element> Document<T> parse(ReadableByteChannel buf, ParserOptions options) throws ParseException;
}",1
83141,TagActionMap,setTagAction,"class TagActionMap {
      protected void setTagAction(final String tag, final TagAction action) {
        put(tag.toUpperCase(), action);
        put(tag.toLowerCase(), action);
        put(tag, action);
      }
}

class Tag {
    public void toUpperCase() {}
    public void toLowerCase() {}
}",0
83142,PrintDebugFilter,process,"class PrintDebugFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        out.println(doc.debugString());
        return false;
      }
}

class Doc {
    public void debugString() {}
}",1
83143,DensityRulesClassifier,process,"class DensityRulesClassifier {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        ListIterator<TextBlock> it = textBlocks.listIterator();
        if (!it.hasNext()) {
          return false;
        }
        TextBlock prevBlock = TextBlock.EMPTY_START;
        TextBlock currentBlock = it.next();
        TextBlock nextBlock = it.hasNext() ? it.next() : TextBlock.EMPTY_START;
        hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        if (nextBlock != TextBlock.EMPTY_START) {
          while (it.hasNext()) {
            prevBlock = currentBlock;
            currentBlock = nextBlock;
            nextBlock = it.next();
            hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
          }
          prevBlock = currentBlock;
          currentBlock = nextBlock;
          nextBlock = TextBlock.EMPTY_START;
          hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        }
        return hasChanges;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83144,IgnoreBlocksAfterContentFilter,process,"class IgnoreBlocksAfterContentFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int numWords = 0;
        boolean foundEndOfText = false;
        for (Iterator<TextBlock> it = doc.getTextBlocks().iterator(); it.hasNext();) {
          TextBlock block = it.next();
          final boolean endOfText = block.hasLabel(DefaultLabels.INDICATES_END_OF_TEXT);
          if (block.isContent()) {
            numWords += getNumFullTextWords(block);
          }
          if (endOfText && numWords >= minNumWords) {
            foundEndOfText = true;
          }
          if (foundEndOfText) {
            changes = true;
            block.setIsContent(false);
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class Block {
    public void setIsContent() {}
    public void hasLabel() {}
    public void isContent() {}
}",1
83145,IgnoreBlocksAfterContentFromEndFilter,process,"class IgnoreBlocksAfterContentFromEndFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int words = 0;
        List<TextBlock> blocks = doc.getTextBlocks();
        if (!blocks.isEmpty()) {
          ListIterator<TextBlock> it = blocks.listIterator(blocks.size());
          TextBlock tb;
          while (it.hasPrevious()) {
            tb = it.previous();
            if (tb.hasLabel(DefaultLabels.INDICATES_END_OF_TEXT)) {
              tb.addLabel(DefaultLabels.STRICTLY_NOT_CONTENT);
              tb.removeLabel(DefaultLabels.MIGHT_BE_CONTENT);
              tb.setIsContent(false);
              changes = true;
            } else if (tb.isContent()) {
              words += tb.getNumWords();
              if (words > 200) {
                break;
              }
            }
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class Blocks {
    public void listIterator() {}
    public void size() {}
    public void isEmpty() {}
}",1
83146,KeepLargestFulltextBlockFilter,process,"class KeepLargestFulltextBlockFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        int max = -1;
        TextBlock largestBlock = null;
        for (TextBlock tb : textBlocks) {
          if (!tb.isContent()) {
            continue;
          }
          int numWords = getNumFullTextWords(tb);
          if (numWords > max) {
            largestBlock = tb;
            max = numWords;
          }
        }
        if (largestBlock == null) {
          return false;
        }
        for (TextBlock tb : textBlocks) {
          if (tb == largestBlock) {
            tb.setIsContent(true);
          } else {
            tb.setIsContent(false);
            tb.addLabel(DefaultLabels.MIGHT_BE_CONTENT);
          }
        }
        return true;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83147,MinFulltextWordsFilter,process,"class MinFulltextWordsFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            continue;
          }
          if (getNumFullTextWords(tb) < minWords) {
            tb.setIsContent(false);
            changes = true;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83148,NumWordsRulesClassifier,process,"class NumWordsRulesClassifier {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        ListIterator<TextBlock> it = textBlocks.listIterator();
        if (!it.hasNext()) {
          return false;
        }
        TextBlock prevBlock = TextBlock.EMPTY_START;
        TextBlock currentBlock = it.next();
        TextBlock nextBlock = it.hasNext() ? it.next() : TextBlock.EMPTY_START;
        hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        if (nextBlock != TextBlock.EMPTY_START) {
          while (it.hasNext()) {
            prevBlock = currentBlock;
            currentBlock = nextBlock;
            nextBlock = it.next();
            hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
          }
          prevBlock = currentBlock;
          currentBlock = nextBlock;
          nextBlock = TextBlock.EMPTY_START;
          hasChanges = classify(prevBlock, currentBlock, nextBlock) | hasChanges;
        }
        return hasChanges;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83149,BlockProximityFusion,process,"class BlockProximityFusion {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        boolean changes = false;
        TextBlock prevBlock;
        int offset;
        if (contentOnly) {
          prevBlock = null;
          offset = 0;
          for (TextBlock tb : textBlocks) {
            offset++;
            if (tb.isContent()) {
              prevBlock = tb;
              break;
            }
          }
          if (prevBlock == null) {
            return false;
          }
        } else {
          prevBlock = textBlocks.get(0);
          offset = 1;
        }
        for (Iterator<TextBlock> it = textBlocks.listIterator(offset); it.hasNext();) {
          TextBlock block = it.next();
          if (!block.isContent()) {
            prevBlock = block;
            continue;
          }
          int diffBlocks = block.getOffsetBlocksStart() - prevBlock.getOffsetBlocksEnd() - 1;
          if (diffBlocks <= maxBlocksDistance) {
            boolean ok = true;
            if (contentOnly) {
              if (!prevBlock.isContent() || !block.isContent()) {
                ok = false;
              }
            }
            if (ok && sameTagLevelOnly && prevBlock.getTagLevel() != block.getTagLevel()) {
              ok = false;
            }
            if (ok) {
              prevBlock.mergeNext(block);
              it.remove();
              changes = true;
            } else {
              prevBlock = block;
            }
          } else {
            prevBlock = block;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class Block {
    public void getTagLevel() {}
    public void getOffsetBlocksStart() {}
    public void isContent() {}
}",1
83150,ContentFusion,process,"class ContentFusion {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        TextBlock prevBlock = textBlocks.get(0);
        boolean changes = false;
        do {
          changes = false;
          for (ListIterator<TextBlock> it = textBlocks.listIterator(1); it.hasNext();) {
            TextBlock block = it.next();
            if (prevBlock.isContent() && block.getLinkDensity() < 0.56
                && !block.hasLabel(DefaultLabels.STRICTLY_NOT_CONTENT)) {
              prevBlock.mergeNext(block);
              it.remove();
              changes = true;
            } else {
              prevBlock = block;
            }
          }
        } while (changes);
        return true;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class Block {
    public void getLinkDensity() {}
    public void hasLabel() {}
}",1
83151,ExpandTitleToContentFilter,process,"class ExpandTitleToContentFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        int i = 0;
        int title = -1;
        int contentStart = -1;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (contentStart == -1 && tb.hasLabel(DefaultLabels.TITLE)) {
            title = i;
            contentStart = -1;
          }
          if (contentStart == -1 && tb.isContent()) {
            contentStart = i;
          }
          i++;
        }
        if (contentStart <= title || title == -1) {
          return false;
        }
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks().subList(title, contentStart)) {
          if (tb.hasLabel(DefaultLabels.MIGHT_BE_CONTENT)) {
            changes = tb.setIsContent(true) | changes;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83152,KeepLargestBlockFilter,process,"class KeepLargestBlockFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        if (textBlocks.size() < 2) {
          return false;
        }
        int maxNumWords = -1;
        TextBlock largestBlock = null;
        int level = -1;
        int i = 0;
        int n = -1;
        for (TextBlock tb : textBlocks) {
          if (tb.isContent()) {
            final int nw = tb.getNumWords();
            if (nw > maxNumWords) {
              largestBlock = tb;
              maxNumWords = nw;
              n = i;
              if (expandToSameLevelText) {
                level = tb.getTagLevel();
              }
            }
          }
          i++;
        }
        for (TextBlock tb : textBlocks) {
          if (tb == largestBlock) {
            tb.setIsContent(true);
            tb.addLabel(DefaultLabels.VERY_LIKELY_CONTENT);
          } else {
            tb.setIsContent(false);
            tb.addLabel(DefaultLabels.MIGHT_BE_CONTENT);
          }
        }
        if (expandToSameLevelText && n != -1) {
          for (ListIterator<TextBlock> it = textBlocks.listIterator(n); it.hasPrevious();) {
            TextBlock tb = it.previous();
            final int tl = tb.getTagLevel();
            if (tl < level) {
              break;
            } else if (tl == level) {
              if (tb.getNumWords() >= minWords) {
                tb.setIsContent(true);
              }
            }
          }
          for (ListIterator<TextBlock> it = textBlocks.listIterator(n); it.hasNext();) {
            TextBlock tb = it.next();
            final int tl = tb.getTagLevel();
            if (tl < level) {
              break;
            } else if (tl == level) {
              if (tb.getNumWords() >= minWords) {
                tb.setIsContent(true);
              }
            }
          }
        }
        return true;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83153,LargeBlockSameTagLevelToContentFilter,process,"class LargeBlockSameTagLevelToContentFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int tagLevel = -1;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (tb.isContent() && tb.hasLabel(DefaultLabels.VERY_LIKELY_CONTENT)) {
            tagLevel = tb.getTagLevel();
            break;
          }
        }
        if (tagLevel == -1) {
          return false;
        }
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            if (tb.getNumWords() >= 100 && tb.getTagLevel() == tagLevel) {
              tb.setIsContent(true);
              changes = true;
            }
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",0
83154,ListAtEndFilter,process,"class ListAtEndFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        int tagLevel = Integer.MAX_VALUE;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (tb.isContent() && tb.hasLabel(DefaultLabels.VERY_LIKELY_CONTENT)) {
            tagLevel = tb.getTagLevel();
          } else {
            if (tb.getTagLevel() > tagLevel && tb.hasLabel(DefaultLabels.MIGHT_BE_CONTENT)
                && tb.hasLabel(DefaultLabels.LI) && tb.getLinkDensity() == 0) {
              tb.setIsContent(true);
              changes = true;
            } else {
              tagLevel = Integer.MAX_VALUE;
            }
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83155,SimpleBlockFusionProcessor,process,"class SimpleBlockFusionProcessor {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean changes = false;
        if (textBlocks.size() < 2) {
          return false;
        }
        TextBlock b1 = textBlocks.get(0);
        for (Iterator<TextBlock> it = textBlocks.listIterator(1); it.hasNext();) {
          TextBlock b2 = it.next();
          final boolean similar = (b1.getTextDensity() == b2.getTextDensity());
          if (similar) {
            b1.mergeNext(b2);
            it.remove();
            changes = true;
          } else {
            b1 = b2;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83156,TrailingHeadlineToBoilerplateFilter,process,"class TrailingHeadlineToBoilerplateFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        List<TextBlock> list = doc.getTextBlocks();
        for (ListIterator<TextBlock> it = list.listIterator(list.size()); it.hasPrevious();) {
          TextBlock tb = it.previous();
          if (tb.isContent()) {
            if (tb.hasLabel(DefaultLabels.HEADING)) {
              tb.setIsContent(false);
              changes = true;
            } else {
              break;
            }
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class List {
    public void listIterator() {}
    public void size() {}
}",1
83157,BoilerplateBlockFilter,process,"class BoilerplateBlockFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> textBlocks = doc.getTextBlocks();
        boolean hasChanges = false;
        for (Iterator<TextBlock> it = textBlocks.iterator(); it.hasNext();) {
          TextBlock tb = it.next();
          if (!tb.isContent() && (labelToKeep == null || !tb.hasLabel(DefaultLabels.TITLE))) {
            it.remove();
            hasChanges = true;
          }
        }
        return hasChanges;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83158,InvertedFilter,process,"class InvertedFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> tbs = doc.getTextBlocks();
        if (tbs.isEmpty()) {
          return false;
        }
        for (TextBlock tb : tbs) {
          tb.setIsContent(!tb.isContent());
        }
        return true;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83159,MarkEverythingBoilerplateFilter,process,"class MarkEverythingBoilerplateFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (tb.isContent()) {
            tb.setIsContent(false);
            changes = true;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83160,MarkEverythingContentFilter,process,"class MarkEverythingContentFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            tb.setIsContent(true);
            changes = true;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83161,MinClauseWordsFilter,process,"class MinClauseWordsFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            continue;
          }
          final String text = tb.getText();
          Matcher m = PAT_CLAUSE_DELIMITER.matcher(text);
          boolean found = m.find();
          int start = 0;
          int end;
          boolean hasClause = false;
          while (found) {
            end = m.start() + 1;
            hasClause = isClause(text.subSequence(start, end));
            start = m.end();
            if (hasClause) {
              break;
            }
            found = m.find();
          }
          end = text.length();
          if (acceptClausesWithoutDelimiter) {
            hasClause |= isClause(text.subSequence(start, end));
          }
          if (!hasClause) {
            tb.setIsContent(false);
            changes = true;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class Text {
    public void subSequence() {}
    public void length() {}
}",1
83162,MinWordsFilter,process,"class MinWordsFilter {
      public boolean process(final TextDocument doc) throws BoilerpipeProcessingException {
        boolean changes = false;
        for (TextBlock tb : doc.getTextBlocks()) {
          if (!tb.isContent()) {
            continue;
          }
          if (tb.getNumWords() < minWords) {
            tb.setIsContent(false);
            changes = true;
          }
        }
        return changes;
      }
}

class Doc {
    public void getTextBlocks() {}
}",1
83163,SurroundingToContentFilter,process,"class SurroundingToContentFilter {
      public boolean process(TextDocument doc) throws BoilerpipeProcessingException {
        List<TextBlock> tbs = doc.getTextBlocks();
        if (tbs.size() < 3) {
          return false;
        }
        TextBlock a = tbs.get(0);
        TextBlock b = tbs.get(1);
        TextBlock c;
        boolean hasChanges = false;
        for (Iterator<TextBlock> it = tbs.listIterator(2); it.hasNext();) {
          c = it.next();
          if (!b.isContent() && a.isContent() && c.isContent() && cond.meetsCondition(b)) {
            b.setIsContent(true);
            hasChanges = true;
          }
          a = c;
          if (!it.hasNext()) {
            break;
          }
          b = it.next();
        }
        return hasChanges;
      }
}

class Doc {
    public void getTextBlocks() {}
}

class B {
    public void setIsContent() {}
    public void isContent() {}
}

class A {
    public void isContent() {}
}",0
83164,TubeMQConnectorsModuleExport,adapters,"class TubeMQConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new TubeMQProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83165,TubeMQConnectorsModuleExport,pipelineElements,"class TubeMQConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new TubeMQPublisherSink()
        );
      }
}

class List {
    public void of() {}
}",0
83166,RosConnectorsModuleExport,adapters,"class RosConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new RosBridgeAdapter()
        );
      }
}

class List {
    public void of() {}
}",0
83167,RosConnectorsModuleExport,pipelineElements,"class RosConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new RosBridgeSink()
        );
      }
}

class List {
    public void of() {}
}",0
83168,RosConnectorsModuleExport,migrators,"class RosConnectorsModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(new RosBridgeAdapterMigrationV1());
      }
}

class List {
    public void of() {}
}",0
83169,RocketMqConnectorsModuleExport,adapters,"class RocketMqConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new RocketMQProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83170,RocketMqConnectorsModuleExport,pipelineElements,"class RocketMqConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new RocketMQPublisherSink()
        );
      }
}

class List {
    public void of() {}
}",0
83171,PulsarConnectorsModuleExport,adapters,"class PulsarConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new PulsarProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83172,PulsarConnectorsModuleExport,pipelineElements,"class PulsarConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new PulsarPublisherSink()
        );
      }
}

class List {
    public void of() {}
}",0
83173,PlcConnectorsModuleExport,adapters,"class PlcConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        var env = Environments.getEnvironment();
        var driverManager = PlcDriverManager.getDefault();
        var cachedConnectionManager =  CachedPlcConnectionManager
            .getBuilder(driverManager.getConnectionManager())
            .withMaxWaitTime(Duration.ofMillis(env.getPlc4xMaxWaitTimeMs().getValueOrDefault()))
            .withMaxLeaseTime(Duration.ofMillis(env.getPlc4xMaxLeaseTimeMs().getValueOrDefault()))
            .build();
        var adapters = new ArrayList<>(List.of(
            new Plc4xModbusAdapter(cachedConnectionManager),
            new Plc4xS7Adapter(cachedConnectionManager)
        ));
        adapters.addAll(new GenericAdapterGenerator().makeAvailableAdapters(driverManager, cachedConnectionManager));
        return adapters;
      }
}

class PlcDriverManager {
        static PlcDriverManager getDefault() {
            return new DefaultPlcDriverManager();
        }
}

class Duration {
    public void ofMillis() {}
}

class List {
    public void of() {}
}",0
83174,PlcConnectorsModuleExport,migrators,"class PlcConnectorsModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new Plc4xS7AdapterMigrationV1(),
            new Plc4xModbusAdapterMigrationV1()
        );
      }
}

class List {
    public void of() {}
}",0
83175,PlcRequestProvider,makeReadRequest,"class PlcRequestProvider {
      public PlcReadRequest makeReadRequest(PlcConnection plcConnection,
                                            Map<String, String> nodes) {
        PlcReadRequest.Builder builder = plcConnection.readRequestBuilder();
        for (Map.Entry<String, String> entry : nodes.entrySet()) {
          builder.addTagAddress(entry.getKey(), entry.getValue());
        }
        return builder.build();
      }
}

class PlcConnection {
        PlcReadRequest.Builder readRequestBuilder();
}

class Entry {
    public void getKey() {}
    public void getValue() {}
}",1
83176,OpcUaConnectorsModuleExport,adapters,"class OpcUaConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new OpcUaAdapter(clientProvider)
        );
      }
}

class List {
    public void of() {}
}",0
83177,OpcUaConnectorsModuleExport,pipelineElements,"class OpcUaConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new OpcUaSink(clientProvider)
        );
      }
}

class List {
    public void of() {}
}",0
83178,OpcUaConnectorsModuleExport,migrators,"class OpcUaConnectorsModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new OpcUaAdapterMigrationV1(),
            new OpcUaAdapterMigrationV2(),
            new OpcUaAdapterMigrationV3(),
            new OpcUaAdapterMigrationV4(),
            new OpcUaAdapterMigrationV5(),
            new OpcUaSinkMigrationV1()
        );
      }
}

class List {
    public void of() {}
}",0
83179,SpOpcUaClient,connect,"class SpOpcUaClient {
      public ConnectedOpcUaClient connect()
          throws UaException, ExecutionException, InterruptedException, SpConfigurationException, URISyntaxException {
        OpcUaClientConfig clientConfig = new MiloOpcUaConfigurationProvider().makeClientConfig(spOpcConfig);
        var client = OpcUaClient.create(clientConfig);
        client.addSessionInitializer(new DataTypeDictionarySessionInitializer(new GenericBsdParser()));
        try {
          client.connect().get();
          return new ConnectedOpcUaClient(client);
        } catch (Exception e) {
          client.disconnect().get();
          throw e;
        }
      }
}

class Client {
    public void disconnect() {}
    public void addSessionInitializer() {}
    public void connect() {}
}",0
83180,OpcUaAdapterMigrationV5,migrate,"class OpcUaAdapterMigrationV5 {
      public MigrationResult<AdapterDescription> migrate(AdapterDescription element,
                                                         IStaticPropertyExtractor extractor) throws RuntimeException {
        var namingStrategyOption = SharedUserConfiguration.makeNamingStrategyOption();
        namingStrategyOption.getOptions().get(0).setSelected(true);
        element.getConfig().add(element.getConfig().size() - 1, namingStrategyOption);
        return MigrationResult.success(element);
      }
}

class Element {
    public void getConfig() {}
}",0
83181,OpcUaSinkMigrationV1,migrate,"class OpcUaSinkMigrationV1 {
      public MigrationResult<DataSinkInvocation> migrate(DataSinkInvocation element,
                                                         IDataSinkParameterExtractor extractor) throws RuntimeException {
        var config = element.getStaticProperties();
        var migratedConfigs = new OpcUaAdapterMigrationV4().migrate(config, extractor);
        element.setStaticProperties(migratedConfigs);
        return MigrationResult.success(element);
      }
}

class Element {
    public void setStaticProperties() {}
    public void getStaticProperties() {}
}",0
83182,OpcUaNodeFactory,createOpcUaNode,"class OpcUaNodeFactory {
      public static OpcUaNode createOpcUaNode(BasicVariableNodeInfo nodeInfo,
                                              List<String> runtimeNamesToDelete) {
        if (OpcUaTypes.isExtensionOrCustom(nodeInfo.getNode())) {
          return new ExtensionObjectOpcUaNode(nodeInfo, runtimeNamesToDelete);
        } else {
          return new PrimitiveOpcUaNode(nodeInfo, runtimeNamesToDelete);
        }
      }
}

class NodeInfo {
    public void getNode() {}
}",1
83183,NatsConnectorsModuleExport,adapters,"class NatsConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new NatsProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83184,NatsConnectorsModuleExport,pipelineElements,"class NatsConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new NatsSink()
        );
      }
}

class List {
    public void of() {}
}",0
83185,MqttConnectorsModuleExport,adapters,"class MqttConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new MqttProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83186,MqttConnectorsModuleExport,pipelineElements,"class MqttConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new MqttPublisherSink()
        );
      }
}

class List {
    public void of() {}
}",0
83187,KafkaConnectorsModuleExport,adapters,"class KafkaConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new KafkaProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83188,KafkaConnectorsModuleExport,pipelineElements,"class KafkaConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(
            new KafkaPublishSink()
        );
      }
}

class List {
    public void of() {}
}",0
83189,KafkaConnectorsModuleExport,migrators,"class KafkaConnectorsModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of(
            new KafkaAdapterMigrationV1(),
            new KafkaSinkMigrationV1(),
            new KafkaAdapterMigrationV2(),
            new KafkaSinkMigrationV2()
        );
      }
}

class List {
    public void of() {}
}",0
83190,KafkaAdapterMigrationV1,migrate,"class KafkaAdapterMigrationV1 {
      public MigrationResult<AdapterDescription> migrate(AdapterDescription element,
                                                         IStaticPropertyExtractor extractor) throws RuntimeException {
        migrateSecurity((StaticPropertyAlternatives) element.getConfig().get(0));
        migrateAvro((StaticPropertyAlternatives) element.getConfig().get(6));
        element.getConfig().add(3, makeConsumerGroup());
        return MigrationResult.success(element);
      }
}

class Element {
    public void getConfig() {}
}",1
83191,KafkaAdapterMigrationV1,migrateAvro,"class KafkaAdapterMigrationV1 {
      public void migrateAvro(StaticPropertyAlternatives formatAlternatives) {
        var parser = new AvroParser();
        var avroParserDescription = new StaticPropertyAlternative(
            parser.declareDescription().getName(),
            parser.declareDescription().getName(),
            parser.declareDescription().getDescription());
        avroParserDescription.setStaticProperty(parser.declareDescription().getConfig());
        formatAlternatives.getAlternatives().add(
            avroParserDescription
        );
      }
}

class Parser {
    public void declareDescription() {}
}",1
83192,KafkaSinkMigrationV1,migrate,"class KafkaSinkMigrationV1 {
      public MigrationResult<DataSinkInvocation> migrate(DataSinkInvocation element,
                                                         IDataSinkParameterExtractor extractor) throws RuntimeException {
        new KafkaAdapterMigrationV1().migrateSecurity(
            (StaticPropertyAlternatives) element.getStaticProperties().get(3));
        return MigrationResult.success(element);
      }
}

class Element {
    public void getStaticProperties() {}
}",1
83193,InfluxConnectorsModuleExport,adapters,"class InfluxConnectorsModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(new InfluxDbStreamAdapter());
      }
}

class List {
    public void of() {}
}",0
83194,InfluxConnectorsModuleExport,pipelineElements,"class InfluxConnectorsModuleExport {
      public List<IStreamPipesPipelineElement<?>> pipelineElements() {
        return List.of(new InfluxDbSink());
      }
}

class List {
    public void of() {}
}",0
83195,IIoTAdaptersExtensionModuleExport,adapters,"class IIoTAdaptersExtensionModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new MachineDataSimulatorAdapter(),
            new FileReplayAdapter(),
            new IfmAlMqttAdapter(),
            new Oi4Adapter(),
            new HttpStreamProtocol(),
            new HttpServerProtocol()
        );
      }
}

class List {
    public void of() {}
}",0
83196,IIoTAdaptersExtensionModuleExport,migrators,"class IIoTAdaptersExtensionModuleExport {
      public List<IModelMigrator<?, ?>> migrators() {
        return List.of();
      }
}

class List {
    public void of() {}
}",0
83197,GeneralAdaptersExtensionModuleExport,adapters,"class GeneralAdaptersExtensionModuleExport {
      public List<StreamPipesAdapter> adapters() {
        return List.of(
            new NetioRestAdapter(),
            new NetioMQTTAdapter(),
            new ImageStreamAdapter(),
            new IssAdapter()
        );
      }
}

class List {
    public void of() {}
}",0
83198,DashboardResolver,modifyDocumentForExport,"class DashboardResolver {
      public DashboardModel modifyDocumentForExport(DashboardModel doc) {
        doc.setRev(null);
        return doc;
      }
}

class Doc {
    public void setRev() {}
}",0
83199,DashboardResolver,existsDoc,"class DashboardResolver {
      protected boolean existsDoc(DashboardModel doc) {
        return Objects.nonNull(doc) && doc.getElementId() != null;
      }
}

class Objects {
    public void nonNull() {}
}

class Doc {
    public void getElementId() {}
}",0
83200,DashboardResolver,readDocument,"class DashboardResolver {
      public DashboardModel readDocument(String serializedDoc) throws JsonProcessingException {
        return SerializationUtils.getSpObjectMapper().readValue(serializedDoc, DashboardModel.class);
      }
}

class SerializationUtils {
    public void getSpObjectMapper() {}
}",0
83201,DashboardResolver,convert,"class DashboardResolver {
      public ExportItem convert(DashboardModel document) {
        return new ExportItem(document.getElementId(), document.getName(), true);
      }
}

class Document {
    public void getName() {}
    public void getElementId() {}
}",0
83202,DashboardResolver,deleteDocument,"class DashboardResolver {
      public void deleteDocument(String document) throws JsonProcessingException {
        var dashboard = readDocument(document);
        var resourceId = dashboard.getElementId();
        getNoSqlStore().getDataExplorerDashboardStorage().deleteElementById(resourceId);
      }
}

class Dashboard {
    public void getElementId() {}
}",1
83203,DataSourceResolver,modifyDocumentForExport,"class DataSourceResolver {
      public SpDataStream modifyDocumentForExport(SpDataStream doc) {
        doc.setRev(null);
        return doc;
      }
}

class Doc {
    public void setRev() {}
}",0
83204,DataSourceResolver,readDocument,"class DataSourceResolver {
      public SpDataStream readDocument(String serializedDoc) throws JsonProcessingException {
        return SerializationUtils.getSpObjectMapper().readValue(serializedDoc, SpDataStream.class);
      }
}

class SerializationUtils {
    public void getSpObjectMapper() {}
}",0
83205,DataSourceResolver,convert,"class DataSourceResolver {
      public ExportItem convert(SpDataStream document) {
        return new ExportItem(document.getElementId(), document.getName(), true);
      }
}

class Document {
    public void getName() {}
    public void getElementId() {}
}",0
83206,DataSourceResolver,writeDocument,"class DataSourceResolver {
      public void writeDocument(String document,
                                AssetExportConfiguration config) throws JsonProcessingException {
        var dataStream = deserializeDocument(document);
        if (config.isOverrideBrokerSettings()) {
          if (dataStream.getEventGrounding() != null) {
            overrideProtocol(dataStream.getEventGrounding());
          }
        }
        getNoSqlStore().getDataStreamStorage().persist(dataStream);
      }
}

class Config {
    public void isOverrideBrokerSettings() {}
}

class DataStream {
    public void getEventGrounding() {}
}",1
83207,DataSourceResolver,deleteDocument,"class DataSourceResolver {
      public void deleteDocument(String document) throws JsonProcessingException {
        var dataSource = readDocument(document);
        var resourceId = dataSource.getElementId();
        getNoSqlStore().getDataStreamStorage().deleteElementById(resourceId);
      }
}

class DataSource {
    public void getElementId() {}
}",1
83208,FileResolver,modifyDocumentForExport,"class FileResolver {
      public FileMetadata modifyDocumentForExport(FileMetadata doc) {
        doc.setRev(null);
        return doc;
      }
}

class Doc {
    public void setRev() {}
}",0
83209,FileResolver,readDocument,"class FileResolver {
      public FileMetadata readDocument(String serializedDoc) throws JsonProcessingException {
        return SerializationUtils.getSpObjectMapper().readValue(serializedDoc, FileMetadata.class);
      }
}

class SerializationUtils {
    public void getSpObjectMapper() {}
}",0
83210,FileResolver,convert,"class FileResolver {
      public ExportItem convert(FileMetadata document) {
        return new ExportItem(document.getFileId(), document.getFilename(), true);
      }
}

class Document {
    public void getFilename() {}
    public void getFileId() {}
}",0
83211,FileResolver,deserializeDocument,"class FileResolver {
      public FileMetadata deserializeDocument(String document) throws JsonProcessingException {
        return SerializationUtils.getSpObjectMapper().readValue(document, FileMetadata.class);
      }
}

class SerializationUtils {
    public void getSpObjectMapper() {}
}",0
83212,FileResolver,deleteDocument,"class FileResolver {
      public void deleteDocument(String document) throws JsonProcessingException {
        var fileMetadata = readDocument(document);
        var resourceId = fileMetadata.getElementId();
        getNoSqlStore().getFileMetadataStorage().deleteElementById(resourceId);
      }
}

class FileMetadata {
    public void getElementId() {}
}",1
83213,MeasurementResolver,modifyDocumentForExport,"class MeasurementResolver {
      public DataLakeMeasure modifyDocumentForExport(DataLakeMeasure doc) {
        doc.setRev(null);
        return doc;
      }
}

class Doc {
    public void setRev() {}
}",0
83214,MeasurementResolver,readDocument,"class MeasurementResolver {
      public DataLakeMeasure readDocument(String serializedDoc) throws JsonProcessingException {
        return SerializationUtils.getSpObjectMapper().readValue(serializedDoc, DataLakeMeasure.class);
      }
}

class SerializationUtils {
    public void getSpObjectMapper() {}
}",0
83215,MeasurementResolver,convert,"class MeasurementResolver {
      public ExportItem convert(DataLakeMeasure document) {
        return new ExportItem(document.getElementId(), document.getMeasureName(), true);
      }
}

class Document {
    public void getMeasureName() {}
    public void getElementId() {}
}",0
83216,MeasurementResolver,deleteDocument,"class MeasurementResolver {
      public void deleteDocument(String document) throws JsonProcessingException {
        var measurement = readDocument(document);
        var resourceId = measurement.getElementId();
        getNoSqlStore().getDataLakeStorage().deleteElementById(resourceId);
      }
}

class Measurement {
    public void getElementId() {}
}",1
83217,IotDbSessionProvider,getSessionPool,"class IotDbSessionProvider {
      public SessionPool getSessionPool(Environment environment) {
        return new SessionPool.Builder()
            .maxSize(environment.getIotDbSessionPoolSize().getValueOrDefault())
            .enableCompression(environment.getIotDbSessionEnableCompression().getValueOrDefault())
            .host(environment.getTsStorageHost().getValueOrDefault())
            .port(environment.getTsStoragePort().getValueOrDefault())
            .user(environment.getIotDbUser().getValueOrDefault())
            .password(environment.getIotDbPassword().getValueOrDefault())
            .build();
      }
}

class Environment {
    public void getIotDbPassword() {}
    public void getIotDbSessionPoolSize() {}
    public void getTsStoragePort() {}
    public void getIotDbUser() {}
    public void getTsStorageHost() {}
    public void getIotDbSessionEnableCompression() {}
}",1
83218,PropertyDuplicateFilter,shouldIgnoreField,"class PropertyDuplicateFilter {
      public boolean shouldIgnoreField(String sanitizedRuntimeName,
                                       PrimitiveField eventPropertyPrimitiveField) {
        var rawValue = eventPropertyPrimitiveField.getRawValue();
        boolean shouldIgnore = ignoreDuplicates && lastValues.containsKey(sanitizedRuntimeName)
            && Objects.equals(lastValues.get(sanitizedRuntimeName), rawValue);
        lastValues.put(sanitizedRuntimeName, rawValue);
        return shouldIgnore;
      }
}

class Objects {
    public void equals() {}
}",0
83219,RawFieldSerializer,serialize,"class RawFieldSerializer {
      public String serialize(Object object) {
        try {
          return objectMapper.writeValueAsString(object);
        } catch (JsonProcessingException e) {
          throw new SpRuntimeException(e.getCause());
        }
      }
}

class ObjectMapper {
    public void writeValueAsString() {}
}

class e {
    public void getCause() {}
}",1
83220,RawFieldSerializer,deserialize,"class RawFieldSerializer {
      public Object deserialize(String json) {
        try {
          return objectMapper.readValue(json, Object.class);
        } catch (JsonProcessingException e) {
          throw new SpRuntimeException(e.getCause());
        }
      }
}

class ObjectMapper {
    public void readValue() {}
}

class e {
    public void getCause() {}
}",1
83221,SelectQueryParams,getLimit,"class SelectQueryParams {
      public int getLimit() {
        if (Objects.nonNull(limitParams)) {
          return limitParams.limit();
        } else {
          return Integer.MIN_VALUE;
        }
      }
}

class Objects {
    public void nonNull() {}
}",0
83222,SelectQueryParams,prepareBuilder,"class SelectQueryParams {
      private <T> void prepareBuilder(IDataLakeQueryBuilder<T> builder) {
        if (Objects.nonNull(this.whereParams)) {
          this.whereParams.buildStatement(builder);
        }
        if (Objects.nonNull(this.groupByTimeClauseParams)) {
          this.groupByTimeClauseParams.buildStatement(builder);
        }
        if (Objects.nonNull(this.groupByTagsClauseParams)) {
          this.groupByTagsClauseParams.buildStatement(builder);
        }
        if (Objects.nonNull(this.orderByClauseParams)) {
          this.orderByClauseParams.buildStatement(builder);
        }
        if (Objects.nonNull(this.limitParams)) {
          this.limitParams.buildStatement(builder);
        }
        if (Objects.nonNull(this.offsetClauseParams)) {
          this.offsetClauseParams.buildStatement(builder);
        }
        if (Objects.nonNull(this.fillClauseParams)) {
          this.fillClauseParams.buildStatement(builder);
        }
      }
}

class Objects {
    public void nonNull() {}
}",0
83223,AdapterGenerationSteps,getGenerators,"class AdapterGenerationSteps {
      public List<AdapterModelGenerator> getGenerators() {
        return List.of(
            new AdapterBasicsGenerator(),
            new AdapterConfigGenerator(),
            new AdapterSchemaGenerator(
                new SchemaMetadataEnricher(),
                new GuessManagement()
            ),
            new AdapterEnrichmentRuleGenerator(),
            new AdapterTransformationRuleGenerator()
        );
      }
}

class List {
    public void of() {}
}",0
83224,CompactAdapterManagement,convertToCompactAdapter,"class CompactAdapterManagement {
      public CompactAdapter convertToCompactAdapter(AdapterDescription adapterDescription) throws Exception {
        var generator = new CompactAdapterGenerator(adapterDescription);
        return new CompactAdapter(
            adapterDescription.getElementId(),
            adapterDescription.getName(),
            adapterDescription.getDescription(),
            adapterDescription.getAppId(),
            generator.getConfig(),
            generator.getSchema(),
            generator.getEnrichmentConfig(),
            generator.getTransformationConfig(),
            generator.getCreateOptions()
        );
      }
}

class Generator {
    public void getTransformationConfig() {}
    public void getConfig() {}
    public void getSchema() {}
    public void getCreateOptions() {}
    public void getEnrichmentConfig() {}
}",1
83225,BooleanParser,parse,"class BooleanParser {
      public Boolean parse(String value) {
        return Boolean.parseBoolean(value);
      }
}

class Boolean {
        public static boolean parseBoolean(String s) {
            return ""true"".equalsIgnoreCase(s);
        }
}",0
83226,StreamPipesCollectorRegistry,registerGauge,"class StreamPipesCollectorRegistry {
      public static Gauge registerGauge(String name) {
        return Gauge.build()
          .name(name)
          .register(collectorRegistry);
      }
}

class Gauge {
    public void build() {}
}",0
83227,StreamPipesCollectorRegistry,registerCounter,"class StreamPipesCollectorRegistry {
      public static Counter registerCounter(String name) {
        return Counter.build()
          .name(name)
          .register(collectorRegistry);
      }
}

class Counter {
    public void build() {}
}",0
83228,StreamPipesCollectorRegistry,registerHistogram,"class StreamPipesCollectorRegistry {
      public static Histogram registerHistogram(String name) {
        return Histogram.build()
          .name(name)
          .register(collectorRegistry);
      }
}

class Histogram {
    public void build() {}
}",0
83229,StreamPipesCollectorRegistry,registerSummary,"class StreamPipesCollectorRegistry {
      public static Summary registerSummary(String name) {
        return Summary.build()
          .name(name)
          .register(collectorRegistry);
      }
}

class Summary {
    public void build() {}
}",0
83230,TokenGenerator,generateNewToken,"class TokenGenerator {
      public static String generateNewToken() {
        byte[] randomBytes = new byte[24];
        secureRandom.nextBytes(randomBytes);
        return base64Encoder.encodeToString(randomBytes);
      }
}

class Base64Encoder {
    public void encodeToString() {}
}",0
83231,BooleanEnvironmentVariable,parse,"class BooleanEnvironmentVariable {
      public Boolean parse(String value) {
        return Boolean.parseBoolean(value.toLowerCase());
      }
}

class Boolean {
        public static boolean parseBoolean(String s) {
            return ""true"".equalsIgnoreCase(s);
        }
}

class Value {
    public void toLowerCase() {}
}",0
83232,EnvironmentVariable,exists,"class EnvironmentVariable {
      public boolean exists() {
        return CustomEnvs.exists(envVariableName);
      }
}

class CustomEnvs {
      public static boolean exists(String envVariable) {
        return AllEnvs.INSTANCE.getEnvs().containsKey(envVariable);
      }
}",0
83233,AbstractClientApi,getSingleOpt,"class AbstractClientApi {
      protected <T> Optional<T> getSingleOpt(StreamPipesApiPath apiPath,
                                             Class<T> targetClass) throws SpRuntimeException {
        try {
          ObjectSerializer<Void, T> serializer = new ObjectSerializer<>();
          return Optional.of(new GetRequest<>(clientConfig, apiPath, targetClass, serializer).executeRequest());
        } catch (SpHttpErrorStatusCode e) {
          if (e.getHttpStatusCode() == HttpStatus.SC_NOT_FOUND) {
            return Optional.empty();
          } else {
            throw e;
          }
        }
      }
}

class Optional {
    public void empty() {}
        public static <T> Optional<T> of(final T value) {
            return new Optional<T>() {
                public boolean isAvailable() {
                    return true;
                }
                public T getValue() {
                    return value;
                }
                public Stream<T> stream() {
                    return Stream.of(value);
                }
            };
        }
}

class e {
    public void getHttpStatusCode() {}
}",1
83234,AbstractTypedClientApi,getSingle,"class AbstractTypedClientApi {
      protected Optional<T> getSingle(StreamPipesApiPath apiPath) throws SpRuntimeException {
        ObjectSerializer<Void, T> serializer = new ObjectSerializer<>();
        try {
          return Optional.of(new GetRequest<>(clientConfig, apiPath, targetClass, serializer).executeRequest());
        } catch (SpHttpErrorStatusCode e) {
          if (e.getHttpStatusCode() == HttpStatus.SC_NOT_FOUND) {
            return Optional.empty();
          } else {
            throw e;
          }
        }
      }
}

class Optional {
    public void empty() {}
        public static <T> Optional<T> of(final T value) {
            return new Optional<T>() {
                public boolean isAvailable() {
                    return true;
                }
                public T getValue() {
                    return value;
                }
                public Stream<T> stream() {
                    return Stream.of(value);
                }
            };
        }
}

class e {
    public void getHttpStatusCode() {}
}",1
83235,StreamPipesApiKeyCredentials,makeHeaders,"class StreamPipesApiKeyCredentials {
      public List<Header> makeHeaders() {
        return Arrays.asList(
            Headers.xApiUser(username),
            Headers.xApiKey(apiKey)
        );
      }
}

class Headers {
    public void xApiUser() {}
    public void xApiKey() {}
}",0
83236,StreamPipesTokenCredentials,makeExpirationDate,"class StreamPipesTokenCredentials {
      private Date makeExpirationDate() {
        Date now = new Date();
        return new Date(now.getTime() + TokenExpirationTime);
      }
}

class Now {
    public void getTime() {}
}",1
83237,StreamPipesTokenCredentials,makeHeaders,"class StreamPipesTokenCredentials {
      public List<Header> makeHeaders() {
        String jwtToken = makeJwtToken();
        return Collections.singletonList(Headers.authorizationBearer(jwtToken));
      }
}

class Headers {
    public void authorizationBearer() {}
}",0
83238,BinaryGetRequest,makeRequest,"class BinaryGetRequest {
      protected Request makeRequest(Serializer<Void, byte[], byte[]> serializer) {
        return Request
            .Get(makeUrl())
            .setHeaders(standardHeaders());
      }
}

class Request {
    public void Get() {}
}",0
83239,DeleteRequest,makeRequest,"class DeleteRequest {
      protected Request makeRequest(Serializer<K, V, T> serializer) {
        var req = Request
            .Delete(makeUrl())
            .setHeaders(standardJsonHeaders());
        if (this.body != null) {
          req.bodyString(serializer.serialize(body), ContentType.APPLICATION_JSON);
        }
        return req;
      }
}

class Request {
    public void Delete() {}
}

class Serializer {
        public abstract void serialize(Object object, ObjectContext context, SerializationContext serializationContext);
}",0
83240,DeleteRequest,afterRequest,"class DeleteRequest {
      protected T afterRequest(Serializer<K, V, T> serializer, HttpEntity entity) throws IOException {
        return serializer.deserialize(entityAsString(entity), responseClass);
      }
}

class Serializer {
    public void deserialize() {}
}",0
83241,GetRequest,makeRequest,"class GetRequest {
      protected Request makeRequest(Serializer<Void, K, V> serializer) {
        return Request
            .Get(makeUrl())
            .setHeaders(standardJsonHeaders());
      }
}

class Request {
    public void Get() {}
}",0
83242,GetRequest,afterRequest,"class GetRequest {
      protected V afterRequest(Serializer<Void, K, V> serializer, HttpEntity entity) throws IOException {
        return serializer.deserialize(entityAsString(entity), targetClass);
      }
}

class Serializer {
    public void deserialize() {}
}",0
83243,PostRequest,makeRequest,"class PostRequest {
      protected Request makeRequest(Serializer<K, V, T> serializer) {
        Request request = Request
            .Post(makeUrl())
            .setHeaders(standardPostHeaders());
        if (withBody) {
          addBody(request, serializer);
        }
        return request;
      }
}

class Request {
    public void Post() {}
}",0
83244,PostRequest,addBody,"class PostRequest {
      protected void addBody(Request request, Serializer<K, V, T> serializer) {
        request.bodyString(serializer.serialize(body), ContentType.APPLICATION_JSON);
      }
}

class Request {
    public void bodyString() {}
}

class Serializer {
        public abstract void serialize(Object object, ObjectContext context, SerializationContext serializationContext);
}",1
83245,PostRequestWithPayloadResponse,afterRequest,"class PostRequestWithPayloadResponse {
      protected T afterRequest(Serializer<K, V, T> serializer, HttpEntity entity) throws IOException {
        return serializer.deserialize(entityAsString(entity), responseClass);
      }
}

class Serializer {
    public void deserialize() {}
}",0
83246,PutRequest,makeRequest,"class PutRequest {
      protected Request makeRequest(Serializer<T, Void, Void> serializer) {
        Request request = Request
            .Put(makeUrl())
            .setHeaders(standardPostHeaders());
        request.bodyString(serializer.serialize(body), ContentType.APPLICATION_JSON);
        return request;
      }
}

class Request {
    public void Put() {}
}

class Request {
    public void bodyString() {}
}

class Serializer {
        public abstract void serialize(Object object, ObjectContext context, SerializationContext serializationContext);
}",1
83247,ProducerManager,makeProducer,"class ProducerManager {
      public IConfiguredEventProducer makeProducer() {
        EventProducer producer = findProducer();
        producer.connect();
        return new ConfiguredEventProducer(
            producer,
            SpDataFormatManager.getFormatDefinition()
        );
      }
}

class Producer {
    public void connect() {}
}",1
83248,Subscription,unsubscribe,"class Subscription {
      public void unsubscribe() {
        if (consumer.isConnected()) {
          consumer.disconnect();
        }
      }
}

class Consumer {
       void disconnect();
    public void isConnected() {}
}",1
83249,ListSerializer,deserialize,"class ListSerializer {
      public List<V> deserialize(String response, Class<V> targetClass) {
        CollectionType listType = objectMapper.getTypeFactory()
            .constructCollectionType(List.class, targetClass);
        try {
          return objectMapper.readValue(response, listType);
        } catch (JsonProcessingException e) {
          throw new SpRuntimeException(e.getCause());
        }
      }
}

class ObjectMapper {
    public void readValue() {}
    public void getTypeFactory() {}
}

class e {
    public void getCause() {}
}",1
83250,ObjectSerializer,deserialize,"class ObjectSerializer {
      public V deserialize(String response, Class<V> targetClass) {
        try {
          return objectMapper.readValue(response, targetClass);
        } catch (JsonProcessingException e) {
          e.printStackTrace();
          throw new SpRuntimeException(e.fillInStackTrace());
        }
      }
}

class ObjectMapper {
    public void readValue() {}
}

class e {
    public void printStackTrace() {}
    public void fillInStackTrace() {}
}",1
83251,Serializer,serialize,"class Serializer {
      public String serialize(K object) {
        try {
          return objectMapper.writeValueAsString(object);
        } catch (JsonProcessingException e) {
          throw new SpRuntimeException(e.getCause());
        }
      }
}

class ObjectMapper {
    public void writeValueAsString() {}
}

class e {
    public void getCause() {}
}",1
83252,Example,main,"class Example {
      public static void main(String[] args) {
        CredentialsProvider credentials = StreamPipesCredentials.withServiceToken(""sp-service-client"", ""my-apache-streampipes-secret-key-change-me"");
        StreamPipesClient client = StreamPipesClient
                .create(""localhost"", 8082, credentials, true);
        List<Pipeline> pipelines = client.pipelines().all();
        System.out.println(pipelines.size());
      }
}

class StreamPipesCredentials {
      public static CredentialsProvider withServiceToken(String username,
                                                         String tokenSecret) {
        return new StreamPipesTokenCredentials(username, tokenSecret);
      }
}

class StreamPipesClient {
      public static StreamPipesClient create(String streamPipesHost,
                                             Integer streamPipesPort,
                                             CredentialsProvider credentials,
                                             boolean httpsDisabled) {
        return new StreamPipesClient(streamPipesHost, streamPipesPort, credentials, httpsDisabled);
      }
}

class Client {
    public void pipelines() {}
}",0
83253,StreamPipesClientExample,main,"class StreamPipesClientExample {
      public static void main(String[] args) {
        CredentialsProvider credentials = StreamPipesCredentials
                .withApiKey(""admin@streampipes.apache.org"", ""oKv1uyNjAgXfuPcMBX5Sityy"");
        StreamPipesClient client = StreamPipesClient
                .create(""localhost"", 8082, credentials, true);
        List<SpDataStream> dataStreams = client.streams().all();
        System.out.println(dataStreams.size());
}

class StreamPipesCredentials {
      public static CredentialsProvider withApiKey(String username,
                                                   String apiKey) {
        return new StreamPipesApiKeyCredentials(username, apiKey);
      }
}

class StreamPipesClient {
      public static StreamPipesClient create(String streamPipesHost,
                                             Integer streamPipesPort,
                                             CredentialsProvider credentials,
                                             boolean httpsDisabled) {
        return new StreamPipesClient(streamPipesHost, streamPipesPort, credentials, httpsDisabled);
      }
}

class Client {
    public void streams() {}
}",0
83254,EmailPublisher,onInvocation,"class EmailPublisher {
        public void onInvocation(EmailParameters parameters, EventSinkRuntimeContext runtimeContext) {
            this.preparedEmail = new SpEmail();
            this.preparedEmail.setRecipients(Collections.singletonList(parameters.getToEmailAddress()));
            this.preparedEmail.setSubject(parameters.getSubject());
            this.silentPeriodInSeconds = parameters.getSilentPeriod() * 60;
            this.client = runtimeContext.getStreamPipesClient();
            this.originalContent = parameters.getContent();
        }
}

class Parameters {
    public void getToEmailAddress() {}
    public void getSilentPeriod() {}
    public void getSubject() {}
    public void getContent() {}
}

class RuntimeContext {
    public void getStreamPipesClient() {}
}",1
83255,EmailPublisher,onEvent,"class EmailPublisher {
        public void onEvent(Event inputEvent) {
            if (shouldSendMail()) {
                String message = PlaceholderExtractor.replacePlaceholders(inputEvent, this.originalContent);
                this.preparedEmail.setMessage(message);
                this.client.deliverEmail(this.preparedEmail);
                this.lastMailEpochSecond = Instant.now().getEpochSecond();
            }
        }
}

class Instant {
    public void now() {}
}",1
83256,EmailPublisher,shouldSendMail,"class EmailPublisher {
        private boolean shouldSendMail() {
            if (this.lastMailEpochSecond == -1) {
                return true;
            } else {
                return Instant.now().getEpochSecond() >= (this.lastMailEpochSecond + this.silentPeriodInSeconds);
            }
        }
}

class Instant {
    public void now() {}
}",0
83257,DataLakeController,onInvocation,"class DataLakeController {
      public ConfiguredEventSink<DataLakeParameters> onInvocation(DataSinkInvocation graph,
                                                                  DataSinkParameterExtractor extractor) {
        String measureName = extractor.singleValueParameter(DATABASE_MEASUREMENT_KEY, String.class);
        measureName = DataLake.prepareString(measureName);
        String timestampField = extractor.mappingPropertyValue(TIMESTAMP_MAPPING_KEY);
        Integer batch_size = 2000;
        Integer flush_duration = 500;
        DataLakeParameters params = new DataLakeParameters(graph,
                measureName,
                timestampField,
                batch_size,
                flush_duration);
        return new ConfiguredEventSink<>(params, DataLake::method);
      }
}

class Extractor {
    public void singleValueParameter() {}
    public void mappingPropertyValue() {}
}",1
83258,CalculateDuration,onEvent,"class CalculateDuration {
      public void onEvent(Event inputEvent, SpOutputCollector out) {
        Long start = inputEvent.getFieldBySelector(startTs).getAsPrimitive().getAsLong();
        Long end = inputEvent.getFieldBySelector(endTs).getAsPrimitive().getAsLong();
        Long duration = end - start;
        if (unit.equals(CalculateDurationController.MS)) {
          inputEvent.addField(durationName, duration);
        } else if (unit.equals(CalculateDurationController.SECONDS)) {
          inputEvent.addField(durationName, (duration + 500) / 1000);
        } else if (unit.equals(CalculateDurationController.MINUTES)) {
          inputEvent.addField(durationName, (duration + 30000) / 60000);
        } else {
          inputEvent.addField(durationName, (duration + 1800000) / 3600000);
        }
        out.collect(inputEvent);
      }
}

class Unit {
    public void equals() {}
}",0
83259,StringToState,onEvent,"class StringToState {
      public void onEvent(Event inputEvent, SpOutputCollector out) {
        List<String> states = new ArrayList<>();
        for (String stateField : stateFields) {
          states.add(inputEvent.getFieldBySelector(stateField).getAsPrimitive().getAsString());
        }
        inputEvent.addField(StringToStateController.CURRENT_STATE, states.toArray());
        out.collect(inputEvent);
      }
}

class States {
    public void toArray() {}
    public void add() {}
}",0
83260,StateBuffer,onEvent,"class StateBuffer {
      public void onEvent(Event inputEvent, SpOutputCollector out) {
        long timestamp = inputEvent.getFieldBySelector(this.timeProperty).getAsPrimitive().getAsLong();
        List<String> states = inputEvent.getFieldBySelector(this.stateProperty).getAsList().parseAsSimpleType(String.class);
        double value = inputEvent.getFieldBySelector(this.sensorValueProperty).getAsPrimitive().getAsDouble();
        for (String state : states) {
          if (stateBuffer.containsKey(state)) {
            stateBuffer.get(state).add(value);
          } else {
            List tmp = new ArrayList();
            tmp.add(value);
            stateBuffer.put(state, tmp);
          }
        }
        List<String> keysToRemove = new ArrayList<>();
        for (String key : stateBuffer.keySet()) {
          if (!states.contains(key)) {
              Event resultEvent  = new Event();
              resultEvent.addField(StateBufferController.VALUES, stateBuffer.get(key));
              resultEvent.addField(StateBufferController.STATE, Arrays.asList(key));
              resultEvent.addField(StateBufferController.TIMESTAMP, timestamp);
            out.collect(resultEvent);
              keysToRemove.add(key);
          }
        }
        for (String s : keysToRemove) {
          stateBuffer.remove(s);
        }
      }
}

class States {
    public void contains() {}
}",0
83261,BooleanToState,onInvocation,"class BooleanToState {
      public void onInvocation(BooleanToStateParameters booleanInverterParameters,
                               SpOutputCollector spOutputCollector,
                               EventProcessorRuntimeContext runtimeContext) {
        LOG = booleanInverterParameters.getGraph().getLogger(BooleanToState.class);
        this.stateFields = booleanInverterParameters.getStateFields();
        this.defaultState = booleanInverterParameters.getDefaultState();
        this.jsonConfiguration = booleanInverterParameters.getJsonConfiguration();
      }
}

class BooleanInverterParameters {
    public void getStateFields() {}
    public void getDefaultState() {}
    public void getGraph() {}
    public void getJsonConfiguration() {}
}",1
83262,CountArray,onInvocation,"class CountArray {
        public void onInvocation(CountArrayParameters params, SpOutputCollector spOutputCollector, EventProcessorRuntimeContext runtimeContext) {
            LOG = params.getGraph().getLogger(CountArray.class);
            this.splitArrayParameters = params;
        }
}

class Params {
    public void getGraph() {}
}",1
83263,CountArray,onEvent,"class CountArray {
        public void onEvent(Event event, SpOutputCollector out) {
            String arrayField = splitArrayParameters.getArrayField();
            List<AbstractField> allEvents = event.getFieldBySelector(arrayField).getAsList().getRawValue();
            event.addField(CountArrayController.COUNT_NAME, allEvents.size());
            out.collect(event);
        }
}

class Event {
    public void addField() {}
    public void getFieldBySelector() {}
}",1
83264,FieldHasher,flatMap,"class FieldHasher {
      public void flatMap(Event in,
                          Collector<Event> out) throws Exception {
        in.updateFieldBySelector(propertyName,
                hashAlgorithm.toHashValue(in.getFieldBySelector(propertyName).getAsPrimitive().getAsString()));
        out.collect(in);
      }
}

class In {
    public void getFieldBySelector() {}
    public void updateFieldBySelector() {}
}

class HashAlgorithm {
    public void toHashValue() {}
}",0
83265,MeasurementUnitConverter,flatMap,"class MeasurementUnitConverter {
        public void flatMap(Event in, Collector<Event> out) throws Exception {
            Unit inputUnit = UnitProvider.INSTANCE.getUnit(inputUnitUri);
            Unit outputUnit = UnitProvider.INSTANCE.getUnit(outputUnitUri);
            Double value = (double) in.getFieldBySelector(convertProperty).getAsPrimitive()
                    .getAsDouble();
            Quantity obs = new Quantity(value, inputUnit);
            Double newValue = obs.convertTo(outputUnit).getValue();
            in.updateFieldBySelector(convertProperty, newValue);
            out.collect(in);
        }
}

class In {
    public void getFieldBySelector() {}
    public void updateFieldBySelector() {}
}",0
83266,FieldRenamer,flatMap,"class FieldRenamer {
      public void flatMap(Event in,
                          Collector<Event> out) throws Exception {
        AbstractField<?> propertyValue = in.getFieldBySelector(oldPropertyName);
        in.removeFieldBySelector(oldPropertyName);
        in.addField(newPropertyName, propertyValue);
        out.collect(in);
      }
}

class In {
    public void addField() {}
    public void removeFieldBySelector() {}
    public void getFieldBySelector() {}
}",0
83267,Md5HashAlgorithm,toHashValue,"class Md5HashAlgorithm {
    	public String toHashValue(Object value) {
    		return DigestUtils.md5Hex(String.valueOf(value));
    	}
}

class DigestUtils {
        public static String md5Hex(final String data) {
            return Hex.encodeHexString(md5(data));
        }
}",1
83268,Sha1HashAlgorithm,toHashValue,"class Sha1HashAlgorithm {
    	public String toHashValue(Object value) {
    		return DigestUtils.shaHex(String.valueOf(value));
    	}
}

class DigestUtils {
        public static String shaHex(final String data) {
            return sha1Hex(data);
        }
}",1
83269,Sha2HashAlgorithm,toHashValue,"class Sha2HashAlgorithm {
    	public String toHashValue(Object value) {
    		return DigestUtils.sha256Hex(String.valueOf(value));
    	}
}

class DigestUtils {
        public static String sha256Hex(final String data) {
            return Hex.encodeHexString(sha256(data));
        }
}",1
83270,EntityExtraction,flatMap,"class EntityExtraction {
      public void flatMap(Map<String, Object> in, Collector<Map<String, Object>> out) throws Exception {
        String value = String.valueOf(in.get(fieldName));
        Span[] entities = nameFinder.find(new String[] {value});
        out.collect(in);
      }
}

class In {
    public void get() {}
}",0
83271,MapKeySelector,getKeySelector,"class MapKeySelector {
      public KeySelector<Event, String> getKeySelector() {
        return new KeySelector<Event, String>() {
          public String getKey(Event in) throws Exception {
            return in.getFieldBySelector(groupBy).getAsPrimitive().getAsString();
          }
        };
      }
}

class In {
    public void getFieldBySelector() {}
}",1
83272,TimeUnitConverter,toTime,"class TimeUnitConverter {
      public static Time toTime(TimeUnit timeUnit, long value) {
        if (timeUnit == TimeUnit.Seconds) {
          return Time.seconds(value);
        } else if (timeUnit == TimeUnit.Minutes) {
          return Time.minutes(value);
        } else {
          return Time.hours(value);
        }
      }
}

class Time {
    public void seconds() {}
    public void hours() {}
    public void minutes() {}
}",0
83273,TimestampExtractor,extractAscendingTimestamp,"class TimestampExtractor {
      public long extractAscendingTimestamp(Event in) {
        return in.getFieldBySelector(timestampField).getAsPrimitive().getAsLong();
      }
}

class In {
    public void getFieldBySelector() {}
}",1
83274,KDTree,findNearest,"class KDTree {
        private KDNode<T> findNearest(KDNode<T> currentNode, T search, int depth) {
            int direction = search.getComparator(depth % 3).compare( search, currentNode.location );
            KDNode<T> next = (direction < 0) ? currentNode.left : currentNode.right;
            KDNode<T> other = (direction < 0) ? currentNode.right : currentNode.left;
            KDNode<T> best = (next == null) ? currentNode : findNearest(next, search, depth + 1);
            if ( currentNode.location.squaredDistance(search) < best.location.squaredDistance(search) ) {
                best = currentNode;
            }
            if ( other != null ) {
                if ( currentNode.location.axisSquaredDistance(search, depth % 3) < best.location.squaredDistance(search) ) {
                    KDNode<T> possibleBest = findNearest( other, search, depth + 1 );
                    if (  possibleBest.location.squaredDistance(search) < best.location.squaredDistance(search) ) {
                        best = possibleBest;
                    }
                }
            }
            return best;
        }
}

class Search {
    public void getComparator() {}
}",0
83275,KDTree,createKDTree,"class KDTree {
        private KDNode<T> createKDTree( List<T> items, int depth ) {
            if ( items.isEmpty() ) {
                return null;
            }
            Collections.sort(items, items.get(0).getComparator(depth % 3));
            int currentIndex = items.size()/2;
            return new KDNode<T>(createKDTree(new ArrayList<T>(items.subList(0, currentIndex)), depth+1), createKDTree(new ArrayList<T>(items.subList(currentIndex + 1, items.size())), depth+1), items.get(currentIndex));
        }
}

class Items {
    public void subList() {}
    public void size() {}
    public void get() {}
    public void isEmpty() {}
}",1
83276,SetEPSG,onInvocation,"class SetEPSG {
      public void onInvocation(SetEpsgParameter params, SpOutputCollector spOutputCollector, EventProcessorRuntimeContext runtimeContext) {
        LOG = params.getGraph().getLogger(SetEPSG.class);
        this.epsg = params.getEpsg();
      }
}

class Params {
    public void getGraph() {}
    public void getEpsg() {}
}",1
83277,SetEPSG,onEvent,"class SetEPSG {
      public void onEvent(Event in, SpOutputCollector out) {
        in.addField(SetEpsgController.EPSG_RUNTIME, epsg);
        out.collect(in);
      }
}

class In {
    public void addField() {}
}",0
83278,CreateTrajectoryFromPoints,onInvocation,"class CreateTrajectoryFromPoints {
      public void onInvocation(CreateTrajectoryFromPointsParameter params, SpOutputCollector spOutputCollector, EventProcessorRuntimeContext runtimeContext) {
        LOG = params.getGraph().getLogger(CreateTrajectoryFromPointsParameter.class);
        this.geom_wkt = params.getWkt();
        this.epsg_code = params.getEpsg();
        this.m_value = params.getM();
        trajectory = new SpTrajectoryBuilder(params.getSubpoints(), params.getDescription());
      }
}

class Params {
    public void getSubpoints() {}
    public void getM() {}
    public void getWkt() {}
    public void getGraph() {}
    public void getDescription() {}
    public void getEpsg() {}
}",1
83279,CreateTrajectoryFromPoints,onEvent,"class CreateTrajectoryFromPoints {
      public void onEvent(Event in, SpOutputCollector out) {
        String wkt = in.getFieldBySelector(geom_wkt).getAsPrimitive().getAsString();
        Integer epsg = in.getFieldBySelector(epsg_code).getAsPrimitive().getAsInt();
        Integer m = in.getFieldBySelector(m_value).getAsPrimitive().getAsInt();
        Point eventGeom = (Point) SpGeometryBuilder.createSPGeom(wkt, epsg);
        trajectory.addPointToTrajectory(eventGeom, m);
        LineString geom = trajectory.returnAsLineString(eventGeom.getFactory());
        in.addField(CreateTrajectoryFromPointsController.DESCRIPTION_RUNTIME, trajectory.getDescription());
        in.addField(CreateTrajectoryFromPointsController.WKT_RUNTIME, geom.toString());
        out.collect(in);
      }
}

class In {
    public void addField() {}
    public void getFieldBySelector() {}
}",0
83280,SpatialGridEnricher,flatMap,"class SpatialGridEnricher {
      public void flatMap(Event in, Collector<Event> out) throws
              Exception {
        Double latitude = in.getFieldBySelector(settings.getLatPropertyName()).getAsPrimitive()
                .getAsDouble();
        Double longitude = in.getFieldBySelector(settings.getLngPropertyName()).getAsPrimitive().getAsDouble();
        CellOption result = calculator.computeCells(latitude, longitude);
        out.collect(toOutput(in, result));
      }
}

class In {
    public void getFieldBySelector() {}
}

class Settings {
    public void getLatPropertyName() {}
    public void getLngPropertyName() {}
}

class Calculator {
    public void computeCells() {}
}",1
83281,SpatialGridEnricher,toOutput,"class SpatialGridEnricher {
      private Event toOutput(Event in, CellOption result) {
        in.addField(SpatialGridConstants.GRID_X_KEY, result.getCellX());
        in.addField(SpatialGridConstants.GRID_Y_KEY, result.getCellY());
        in.addField(SpatialGridConstants.GRID_CELLSIZE_KEY, result.getCellSize());
        in.addField(SpatialGridConstants.GRID_LAT_NW_KEY, result.getLatitudeNW());
        in.addField(SpatialGridConstants.GRID_LON_NW_KEY, result.getLongitudeNW());
        in.addField(SpatialGridConstants.GRID_LAT_SE_KEY, result.getLatitudeSE());
        in.addField(SpatialGridConstants.GRID_LON_SE_KEY, result.getLongitudeSE());
        return in;
      }
}

class In {
    public void addField() {}
}

class Result {
    public void getLatitudeNW() {}
    public void getLatitudeSE() {}
    public void getCellX() {}
    public void getCellSize() {}
    public void getLongitudeNW() {}
    public void getCellY() {}
    public void getLongitudeSE() {}
}",1
83282,SizeMeasure,onEvent,"class SizeMeasure {
      public void onEvent(Event event, SpOutputCollector spOutputCollector) {
        try {
          double size = getSizeInBytes(event.getRaw());
          if (sizeMeasureParameters.getSizeUnit().equals(SizeMeasureController.KILOBYTE_SIZE)) {
            size /= 1024;
          } else if (sizeMeasureParameters.getSizeUnit().equals(SizeMeasureController.MEGABYTE_SIZE)) {
            size /= 1048576;
          }
          event.addField(SizeMeasureController.EVENT_SIZE, size);
          spOutputCollector.collect(event);
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
}

class Event {
    public void addField() {}
    public void getRaw() {}
}

class SpOutputCollector {
      void collect(Event event);
}

class e {
    public void printStackTrace() {}
}",0
83283,TimestampEnricher,flatMap,"class TimestampEnricher {
      public void flatMap(Event in,
                          Collector<Event> out) throws Exception {
        in.addField(appendTimePropertyName, System.currentTimeMillis());
        out.collect(in);
      }
}

class In {
    public void addField() {}
}",0
83284,Trigonometry,flatMap,"class Trigonometry {
        public void flatMap(Event in, Collector<Event> out) throws Exception {
            double value = in.getFieldBySelector(operand).getAsPrimitive().getAsDouble();
            double result;
            if (operation == Operation.SIN) {
                result = Math.sin(value);
            } else if (operation == Operation.COS) {
                result = Math.cos(value);
            } else {
                result = Math.tan(value);
            }
            in.addField(resultField, result);
            out.collect(in);
        }
}

class In {
    public void addField() {}
    public void getFieldBySelector() {}
}",0
83285,UrlDereferencingController,getRuntime,"class UrlDereferencingController {
        public FlinkDataProcessorRuntime<UrlDereferencingParameter> getRuntime(DataProcessorInvocation graph,
                                                                               ProcessingElementParameterExtractor extractor,
                                                                               ConfigExtractor configExtractor,
                                                                               StreamPipesClient streamPipesClient) {
            String urlString = extractor.mappingPropertyValue(URL);
            UrlDereferencingParameter staticParam = new UrlDereferencingParameter(graph, urlString, APPEND_HTML);
            return  new UrlDereferencingProgram(staticParam, EnricherFlinkConfig.INSTANCE.getDebug());
        }
}

class Extractor {
    public void mappingPropertyValue() {}
}",0
83286,MathOp,flatMap,"class MathOp {
        public void flatMap(Event in, Collector<Event> out) throws Exception {
            Double leftValue  = in.getFieldBySelector(leftOperand).getAsPrimitive().getAsDouble();
            Double rightValue = in.getFieldBySelector(rightOperand).getAsPrimitive().getAsDouble();
            Double result = operation.operate(leftValue, rightValue);
            in.addField(resulField, result);
            out.collect(in);
        }
}

class In {
    public void addField() {}
    public void getFieldBySelector() {}
}

class Operation {
    public void operate() {}
}",0
83287,StaticMathOp,flatMap,"class StaticMathOp {
        public void flatMap(Event in, Collector<Event> out) throws Exception {
            Double leftValue  = Double.parseDouble(String.valueOf(in.getFieldBySelector(leftOperand)
                    .getAsPrimitive().getAsDouble()));
            Double result = operation.operate(leftValue, rightOperandValue);
            in.updateFieldBySelector(leftOperand, result);
            out.collect(in);
        }
}

class In {
    public void getFieldBySelector() {}
    public void updateFieldBySelector() {}
}

class Operation {
    public void operate() {}
}",0
83288,Cusum,onInvocation,"class Cusum {
        public void onInvocation(CusumParameters parameters, SpOutputCollector spOutputCollector, EventProcessorRuntimeContext runtimeContext) throws SpRuntimeException {
            this.selectedNumberMapping = parameters.getSelectedNumberMapping();
            k = parameters.getParamK();
            h = parameters.getParamH();
            cusumLow = 0.0;
            cusumHigh = 0.0;
            welfordAggregate = new WelfordAggregate();
        }
}

class Parameters {
    public void getParamK() {}
    public void getSelectedNumberMapping() {}
    public void getParamH() {}
}",1
83289,Cusum,onEvent,"class Cusum {
        public void onEvent(Event event, SpOutputCollector collector) throws SpRuntimeException {
            Double number = event.getFieldBySelector(selectedNumberMapping).getAsPrimitive().getAsDouble();
            welfordAggregate.update(number);
            Double normalized = getZScoreNormalizedValue(number);
            updateStatistics(normalized);
            Boolean isChangeHigh = getTestResult(cusumHigh, h);
            Boolean isChangeLow = getTestResult(cusumLow, h);
            Event updatedEvent = updateEvent(event, cusumLow, cusumHigh, isChangeLow, isChangeHigh);
            collector.collect(updatedEvent);
            if (isChangeHigh || isChangeLow) {
                resetAfterChange();
            }
        }
}

class Event {
    public void getFieldBySelector() {}
}

class WelfordAggregate {
      public void update(Double newValue) {
        count++;
        Double delta = mean != null ? newValue - mean : 0.0;
        mean += delta / count;
        Double delta2 = newValue - mean;
        m2 += delta * delta2;
      }
}

class Collector {
      void collect(T elem);
}",0
83290,Cusum,updateEvent,"class Cusum {
        private Event updateEvent(Event event, Double cusumLow, Double cusumHigh, Boolean decisionLow, Boolean decisionHigh) {
            event.addField(CusumEventFields.VAL_LOW, cusumLow);
            event.addField(CusumEventFields.VAL_HIGH, cusumHigh);
            event.addField(CusumEventFields.DECISION_LOW, decisionLow);
            event.addField(CusumEventFields.DECISION_HIGH, decisionHigh);
            return event;
        }
}

class Event {
    public void addField() {}
}",0
83291,AggregationProgram,getKeyedStream,"class AggregationProgram {
      private DataStream<Event> getKeyedStream(DataStream<Event> dataStream) {
        if (bindingParams.getGroupBy().size() > 0) {
          KeyedStream<Event, Map<String, String>> keyedStream = dataStream.keyBy(getKeySelector());
          if (bindingParams.getTimeWindow()) {
            return keyedStream
                    .window(SlidingEventTimeWindows.of(Time.seconds(bindingParams.getWindowSize()), Time.seconds(bindingParams.getOutputEvery())))
                    .apply(new TimeAggregation(bindingParams.getAggregationType(), bindingParams.getAggregateKeyList(), bindingParams.getGroupBy()));
          } else {
            return keyedStream
                    .countWindow(bindingParams.getWindowSize(), bindingParams.getOutputEvery())
                    .apply(new CountAggregation(bindingParams.getAggregationType(), bindingParams.getAggregateKeyList(), bindingParams.getGroupBy()));
          }
        } else {
          if (bindingParams.getTimeWindow()) {
            return dataStream
                    .timeWindowAll(Time.seconds(bindingParams.getWindowSize()), Time.seconds(bindingParams.getOutputEvery()))
                    .apply(new TimeAggregation(bindingParams.getAggregationType(), bindingParams.getAggregateKeyList()));
          } else {
            return dataStream
                    .countWindowAll(bindingParams.getWindowSize(), bindingParams.getOutputEvery())
                    .apply(new CountAggregation(bindingParams.getAggregationType(), bindingParams.getAggregateKeyList()));
          }
        }
      }
}

class DataStream {
    public void countWindowAll() {}
    public void keyBy() {}
    public void timeWindowAll() {}
}

class Time {
    public void seconds() {}
}",1
83292,AggregationProgram,getKeySelector,"class AggregationProgram {
      private KeySelector<Event, Map<String, String>> getKeySelector() {
        List<String> groupBy = bindingParams.getGroupBy();
        return new KeySelector<Event, Map<String, String>>() {
          public Map<String, String> getKey(Event event) throws Exception {
            Map<String, String> keys = new HashMap<>();
            for (String groupBy : groupBy) {
              keys.put(groupBy, event.getFieldBySelector(groupBy).getAsPrimitive().getAsString());
            }
            return keys;
          }
        };
      }
}

class Keys {
    public void put() {}
}

class Event {
    public void getFieldBySelector() {}
}",1
83293,EventRate,apply,"class EventRate {
      public void apply(TimeWindow timeWindow, Iterable<Event> iterable, Collector<Float> collector)
              throws Exception {
        collector.collect((float) Iterables.size(iterable) / timeWindowSize);
      }
}

class Collector {
      void collect(T elem);
}

class Iterables {
    public void size() {}
}",1
83294,MqttConnectUtils,getAlternativesOne,"class MqttConnectUtils {
        public static StaticPropertyAlternative getAlternativesOne() {
            return Alternatives.from(Labels.withId(ANONYMOUS_ACCESS));
        }
}

class Alternatives {
      public static StaticPropertyAlternative from(Label label, boolean selected) {
        StaticPropertyAlternative alternative = new StaticPropertyAlternative(label.getInternalId(),
            label.getLabel(), label.getInternalId());
        alternative.setSelected(selected);
        return alternative;
      }
}",1
83295,MqttConnectUtils,getAlternativesTwo,"class MqttConnectUtils {
        public static StaticPropertyAlternative getAlternativesTwo() {
            return Alternatives.from(Labels.withId(USERNAME_ACCESS),
            StaticProperties.group(Labels.withId(USERNAME_GROUP),
                    StaticProperties.stringFreeTextProperty(Labels.withId(USERNAME)),
                    StaticProperties.secretValue(Labels.withId(PASSWORD))));
        }
}

class Alternatives {
      public static StaticPropertyAlternative from(Label label, boolean selected) {
        StaticPropertyAlternative alternative = new StaticPropertyAlternative(label.getInternalId(),
            label.getLabel(), label.getInternalId());
        alternative.setSelected(selected);
        return alternative;
      }
}",1
83296,MqttConnectUtils,getMqttConfig,"class MqttConnectUtils {
        public static MqttConfig getMqttConfig(StaticPropertyExtractor extractor, String topicInput) {
            MqttConfig mqttConfig;
            String brokerUrl = extractor.singleValueParameter(BROKER_URL, String.class);
            String topic;
            if (topicInput == null) {
                topic = extractor.singleValueParameter(TOPIC, String.class);
            } else {
                topic = topicInput;
            }
            String selectedAlternative = extractor.selectedAlternativeInternalId(ACCESS_MODE);
            if (selectedAlternative.equals(ANONYMOUS_ACCESS)) {
                mqttConfig = new MqttConfig(brokerUrl, topic);
            } else {
                String username = extractor.singleValueParameter(USERNAME, String.class);
                String password = extractor.secretValue(PASSWORD);
                mqttConfig = new MqttConfig(brokerUrl, topic, username, password);
            }
            return mqttConfig;
        }
}

class Extractor {
    public void singleValueParameter() {}
    public void selectedAlternativeInternalId() {}
    public void secretValue() {}
}",0
83297,MqttConsumer,run,"class MqttConsumer {
      public void run() {
        this.running = true;
        MQTT mqtt = new MQTT();
        try {
          mqtt.setHost(mqttConfig.getUrl());
          if (mqttConfig.getAuthenticated()) {
            mqtt.setUserName(mqttConfig.getUsername());
            mqtt.setPassword(mqttConfig.getPassword());
          }
          BlockingConnection connection = mqtt.blockingConnection();
          connection.connect();
          Topic[] topics = {new Topic(mqttConfig.getTopic(), QoS.AT_LEAST_ONCE)};
          byte[] qoses = connection.subscribe(topics);
          while (running && ((maxElementsToReceive == -1) || (this.messageCount <= maxElementsToReceive))) {
            Message message = connection.receive();
            byte[] payload = message.getPayload();
            consumer.onEvent(payload);
            message.ack();
            this.messageCount++;
          }
          connection.disconnect();
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
}

class MqttConfig {
      public String getUsername() {
        return username;
      }
      public String getUrl() {
        return url;
      }
      public String getPassword() {
        return password;
      }
      public Boolean getAuthenticated() {
        return authenticated;
      }
      public String getTopic() {
        return topic;
      }
}

class Connection {
    public void disconnect() {}
    public void connect() {}
    public void receive() {}
    public void subscribe() {}
}

class Message {
    public void ack() {}
    public void getPayload() {}
}

class Consumer {
    public void onEvent() {}
}

class e {
    public void printStackTrace() {}
}",1
83298,BrokerProtocol,getNElements,"class BrokerProtocol {
      public List<Map<String, Object>> getNElements(int n) throws ParseException {
        List<byte[]> resultEventsByte = getNByteElements(n);
        List<Map<String, Object>> result = new ArrayList<>();
        for (byte[] event : resultEventsByte) {
          result.add(format.parse(event));
        }
        return result;
      }
}

class Result {
    public void add() {}
}",0
83299,MqttProtocol,getInstance,"class MqttProtocol {
      public Protocol getInstance(ProtocolDescription protocolDescription, IParser parser, IFormat format) {
        MqttConfig mqttConfig;
        StaticPropertyExtractor extractor =
                StaticPropertyExtractor.from(protocolDescription.getConfig(), new ArrayList<>());
        mqttConfig = MqttConnectUtils.getMqttConfig(extractor);
        return new MqttProtocol(parser, format, mqttConfig);
      }
}

class StaticPropertyExtractor {
      public static IStaticPropertyExtractor from(List<StaticProperty> staticProperties) {
        return from(staticProperties, new ArrayList<>());
      }
}

class MqttConnectUtils {
        public static MqttConfig getMqttConfig(StaticPropertyExtractor extractor, String topicInput) {
            MqttConfig mqttConfig;
            String brokerUrl = extractor.singleValueParameter(BROKER_URL, String.class);
            String topic;
            if (topicInput == null) {
                topic = extractor.singleValueParameter(TOPIC, String.class);
            } else {
                topic = topicInput;
            }
            String selectedAlternative = extractor.selectedAlternativeInternalId(ACCESS_MODE);
            if (selectedAlternative.equals(ANONYMOUS_ACCESS)) {
                mqttConfig = new MqttConfig(brokerUrl, topic);
            } else {
                String username = extractor.singleValueParameter(USERNAME, String.class);
                String password = extractor.secretValue(PASSWORD);
                mqttConfig = new MqttConfig(brokerUrl, topic, username, password);
            }
            return mqttConfig;
        }
}",0
83300,MqttProtocol,declareModel,"class MqttProtocol {
      public ProtocolDescription declareModel() {
        return ProtocolDescriptionBuilder.create(ID)
                .withLocales(Locales.EN)
                .withAssets(Assets.DOCUMENTATION, Assets.ICON)
                .category(AdapterType.Generic, AdapterType.Manufacturing)
                .sourceType(AdapterSourceType.STREAM)
                .requiredTextParameter(MqttConnectUtils.getBrokerUrlLabel())
                .requiredAlternatives(MqttConnectUtils.getAccessModeLabel(), MqttConnectUtils.getAlternativesOne(), MqttConnectUtils.getAlternativesTwo())
                .requiredTextParameter(MqttConnectUtils.getTopicLabel())
                .build();
      }
}

class MqttConnectUtils {
        public static Label getAccessModeLabel() {
            return Labels.withId(ACCESS_MODE);
        }
        public static StaticPropertyAlternative getAlternativesTwo() {
            return Alternatives.from(Labels.withId(USERNAME_ACCESS),
            StaticProperties.group(Labels.withId(USERNAME_GROUP),
                    StaticProperties.stringFreeTextProperty(Labels.withId(USERNAME)),
                    StaticProperties.secretValue(Labels.withId(PASSWORD))));
        }
        public static StaticPropertyAlternative getAlternativesOne() {
            return Alternatives.from(Labels.withId(ANONYMOUS_ACCESS));
        }
        public static Label getBrokerUrlLabel() {
            return Labels.withId(BROKER_URL);
        }
        public static Label getTopicLabel() {
            return Labels.withId(TOPIC);
        }
}",1
83301,MqttProtocol,getNByteElements,"class MqttProtocol {
      protected List<byte[]> getNByteElements(int n) throws ParseException {
        List<byte[]> elements = new ArrayList<>();
        InternalEventProcessor<byte[]> eventProcessor = elements::method;
        MqttConsumer consumer = new MqttConsumer(this.mqttConfig, eventProcessor);
        Thread thread = new Thread(consumer);
        thread.start();
        while (consumer.getMessageCount() < n) {
          try {
            Thread.sleep(100);
          } catch (InterruptedException e) {
            e.printStackTrace();
          }
        }
        return elements;
      }
}

class Thread {
        public void start() {
            return;
        }
}

class Consumer {
    public void getMessageCount() {}
}

class Thread {
        public static void sleep(long millis, int nanos) throws InterruptedException {
            return;
        }
}

class e {
    public void printStackTrace() {}
}",0
83302,MqttProtocol,run,"class MqttProtocol {
      public void run(IAdapterPipeline adapterPipeline) {
        SendToPipeline stk = new SendToPipeline(format, adapterPipeline);
        this.mqttConsumer = new MqttConsumer(this.mqttConfig, new MqttProtocol.EventProcessor(stk));
        thread = new Thread(this.mqttConsumer);
        thread.start();
      }
}

class Thread {
        public void start() {
            return;
        }
}",0
83303,PulsarConsumer,run,"class PulsarConsumer {
      public void run() {
        this.running = true;
        try {
          this.pulsarClient = PulsarUtils.makePulsarClient(this.brokerUrl);
          Consumer<byte[]> consumer = this.pulsarClient.newConsumer()
                  .topic(this.topic)
                  .subscriptionName(RandomStringUtils.randomAlphanumeric(10))
                  .subscriptionType(SubscriptionType.Shared)
                  .subscribe();
          while (running && ((maxElementsToReceive == -1) || (this.messageCount <= maxElementsToReceive))) {
            Message msg = consumer.receive();
            adapterConsumer.onEvent(msg.getData());
            consumer.acknowledge(msg);
            this.messageCount++;
          }
          consumer.close();
          this.pulsarClient.close();
        } catch (PulsarClientException e) {
          e.printStackTrace();
        }
      }
}

class Consumer {
    public void acknowledge() {}
    public void close() {}
    public void receive() {}
}

class e {
    public void printStackTrace() {}
}",0
83304,WikipediaModelConverter,makeMap,"class WikipediaModelConverter {
      public Map<String, Object> makeMap() {
        Map<String, Object> event = new HashMap<>();
        event.put(TIMESTAMP, wikipediaModel.getTimestamp());
        event.put(TYPE, wikipediaModel.getType());
        event.put(EVENT_ID, wikipediaModel.getId());
        event.put(NAMESPACE, wikipediaModel.getNamespace());
        event.put(TITLE, wikipediaModel.getTitle());
        event.put(USER, wikipediaModel.getUser());
        event.put(BOT, wikipediaModel.getBot());
        event.put(MINOR, wikipediaModel.getMinor());
        event.put(OLDLENGTH, wikipediaModel.getLength().getOld());
        event.put(NEWLENGTH, wikipediaModel.getLength().getNew());
        event.put(OLDREVISION, wikipediaModel.getRevision().getOld());
        event.put(NEWREVISION, wikipediaModel.getRevision().getNew());
        event.put(SERVERURL, wikipediaModel.getServerUrl());
        event.put(SERVERNAME, wikipediaModel.getServerName());
        event.put(WIKI, wikipediaModel.getWiki());
        event.put(URI, wikipediaModel.getMeta().getUri());
        return event;
      }
}

class Event {
    public void put() {}
}",1
83305,ObjectCombinationSpecificOrdering,compare,"class ObjectCombinationSpecificOrdering {
      public int compare(ObjectCombination left, ObjectCombination right) {
        if (matchCount(left) < matchCount(right)) {
          return 1;
        } else if ( matchCount(left) > matchCount(right)) {
          return -1;
        } else if ( !match(activity.getActor(), left.getActor()) && match(activity.getActor(), right.getActor())) {
          return 1;
        } else if ( match(activity.getActor(), left.getActor()) && !match(activity.getActor(), right.getActor())) {
          return -1;
        } else if ( !match(activity.getObject(), left.getObject()) && match(activity.getObject(), right.getObject())) {
          return 1;
        } else if ( match(activity.getObject(), left.getObject()) && !match(activity.getObject(), right.getObject())) {
          return -1;
        } else if ( !match(activity.getTarget(), left.getTarget()) && match(activity.getTarget(), right.getTarget())) {
          return 1;
        } else if ( match(activity.getTarget(), left.getTarget()) && !match(activity.getTarget(), right.getTarget())) {
          return -1;
        } else if ( !match(activity.getProvider(), left.getProvider()) && match(activity.getTarget(), right.getProvider())) {
          return 1;
        } else if ( match(activity.getProvider(), left.getProvider()) && !match(activity.getTarget(), right.getProvider())) {
          return -1;
        } else {
          return 0;
        }
      }
}

class Activity {
    public void getActor() {}
    public void getProvider() {}
    public void getTarget() {}
    public void getObject() {}
}",1
83306,ObjectCombinationSpecificOrdering,matchCount,"class ObjectCombinationSpecificOrdering {
      private int matchCount(ObjectCombination objectCombination) {
        int matchCount = 0;
        if ( match(activity.getActor(), objectCombination.getActor())) {
          matchCount++;
        }
        if ( match(activity.getObject(), objectCombination.getObject())) {
          matchCount++;
        }
        if ( match(activity.getTarget(), objectCombination.getTarget())) {
          matchCount++;
        }
        if ( match(activity.getProvider(), objectCombination.getProvider())) {
          matchCount++;
        }
        return matchCount;
      }
}

class Activity {
    public void getActor() {}
    public void getProvider() {}
    public void getTarget() {}
    public void getObject() {}
}",1
83307,VerbDefinitionMatchUtil,match,"class VerbDefinitionMatchUtil {
      public static boolean match(Activity activity, VerbDefinition verbDefinition) {
        if ( verbDefinition.getValue() != null
              && verbDefinition.getValue().equals(activity.getVerb())) {
          for (ObjectCombination objectCombination : verbDefinition.getObjects()) {
            if (VerbDefinitionResolver.filter(activity, objectCombination)) {
              return true;
            }
          }
        }
        return false;
      }
}

class Activity {
    public void getVerb() {}
}",0
83308,PropertyUtil,flattenToMap,"class PropertyUtil {
      public static Map<String, Object> flattenToMap(ObjectMapper mapper, ObjectNode object) {
        Map<String, Object> flatObject;
        try {
          flatObject = mapper.readValue(JsonFlattener.flatten(mapper.writeValueAsString(object)), Map.class);
        } catch( Exception ex ) {
          return null;
        }
        return flatObject;
      }
}

class Mapper {
    public void writeValueAsString() {}
    public void readValue() {}
}",1
83309,PropertyUtil,flattenToObjectNode,"class PropertyUtil {
      public static ObjectNode flattenToObjectNode(ObjectMapper mapper, ObjectNode object) {
        ObjectNode flatObjectNode;
        try {
          flatObjectNode = mapper.readValue(JsonFlattener.flatten(mapper.writeValueAsString(object)), ObjectNode.class);
        } catch( Exception ex ) {
          return null;
        }
        return flatObjectNode;
      }
}

class Mapper {
    public void writeValueAsString() {}
    public void readValue() {}
}",1
83310,PropertyUtil,unflattenMap,"class PropertyUtil {
      public static ObjectNode unflattenMap(ObjectMapper mapper, Map<String, Object> object) {
        ObjectNode unflatObjectNode;
        try {
          unflatObjectNode = mapper.readValue(JsonUnflattener.unflatten(mapper.writeValueAsString(object)), ObjectNode.class);
        } catch( Exception ex ) {
          return null;
        }
        return unflatObjectNode;
      }
}

class Mapper {
    public void writeValueAsString() {}
    public void readValue() {}
}",1
83311,PropertyUtil,unflattenObjectNode,"class PropertyUtil {
      public static ObjectNode unflattenObjectNode(ObjectMapper mapper, ObjectNode object) {
        ObjectNode unflatObjectNode;
        try {
          unflatObjectNode = mapper.readValue(JsonUnflattener.unflatten(mapper.writeValueAsString(object)), ObjectNode.class);
        } catch( Exception ex ) {
          return null;
        }
        return unflatObjectNode;
      }
}

class Mapper {
    public void writeValueAsString() {}
    public void readValue() {}
}",1
83312,PropertyUtil,mergeProperties,"class PropertyUtil {
      public static ObjectNode mergeProperties(ObjectNode content, ObjectNode parent) {
        ObjectNode merged = parent.deepCopy();
        Iterator<Map.Entry<String, JsonNode>> fields = content.fields();
        for ( ; fields.hasNext(); ) {
          Map.Entry<String, JsonNode> field = fields.next();
          String fieldId = field.getKey();
          if( merged.get(fieldId) != null ) {
            if( merged.get(fieldId).getNodeType().equals(JsonNodeType.OBJECT)) {
              merged.put(fieldId, mergeProperties(field.getValue().deepCopy(), (ObjectNode)merged.get(fieldId)));
            } else if ( merged.get(fieldId).getNodeType().equals(JsonNodeType.ARRAY)) {
              merged.put(fieldId, mergeArrays(((ArrayNode)field.getValue()), ((ArrayNode)merged.get(fieldId))));
            } else {
              merged.put(fieldId, content.get(fieldId));
            }
          } else {
            merged.put(fieldId, content.get(fieldId));
          }
        }
        return merged;
      }
}

class Parent {
    public void deepCopy() {}
}

class Content {
    public void get() {}
    public void fields() {}
}

class Fields {
    public void next() {}
    public void hasNext() {}
}

class Field {
    public void getKey() {}
    public void getValue() {}
}",0
83313,PropertyUtil,cleanProperties,"class PropertyUtil {
      public static ObjectNode cleanProperties(ObjectMapper mapper, ObjectNode content) {
        ObjectNode cleaned = mapper.createObjectNode();
        Iterator<Map.Entry<String, JsonNode>> fields = content.fields();
        for ( ; fields.hasNext(); ) {
          Map.Entry<String, JsonNode> field = fields.next();
          String fieldId = field.getKey();
          if( field.getValue() != null && !field.getValue().getNodeType().equals(JsonNodeType.NULL)) {
            if( field.getValue().getNodeType().equals(JsonNodeType.OBJECT)) {
              ObjectNode clean = cleanProperties(mapper, field.getValue().deepCopy());
              if( clean != null && clean.size() > 0 ) {
                cleaned.put(fieldId, clean);
              }
            } else if ( field.getValue().getNodeType().equals(JsonNodeType.ARRAY)) {
              ArrayNode clean = cleanArray((ArrayNode)field.getValue());
              if( clean != null && clean.size() > 0 ) {
                cleaned.put(fieldId, clean);
              }
            } else if ( field.getValue().getNodeType().equals(JsonNodeType.STRING)) {
              String value = content.get(fieldId).asText();
              if( value != null && StringUtils.isNotBlank(value)) {
                cleaned.put(fieldId, value);
              }
            } else {
              cleaned.put(fieldId, field.getValue());
            }
          }
        }
        return cleaned;
      }
}

class Mapper {
    public void createObjectNode() {}
}

class Content {
    public void get() {}
    public void fields() {}
}

class Fields {
    public void next() {}
    public void hasNext() {}
}

class Field {
    public void getKey() {}
    public void getValue() {}
}",0
83314,PropertyUtil,mergeArrays,"class PropertyUtil {
      private static ArrayNode mergeArrays(ArrayNode content, ArrayNode parent) {
        return parent.deepCopy().addAll(content);
      }
}

class Parent {
    public void deepCopy() {}
}",1
83315,PropertyUtil,cleanArray,"class PropertyUtil {
      private static ArrayNode cleanArray(ArrayNode content) {
        if( content.size() == 0) return null;
        Iterator<JsonNode> items = content.iterator();
        for ( ; items.hasNext(); ) {
          JsonNode item = items.next();
          if( item == null ) items.remove();
          if( item.getNodeType().equals(JsonNodeType.OBJECT)) {
            if( item.size() == 0 ) items.remove();
          }
          if( item.getNodeType().equals(JsonNodeType.ARRAY)) {
            if( item.size() == 0 ) items.remove();
          }
        }
        if( content.size() == 0) return null;
        else return content;
      }
}

class Content {
    public void size() {}
    public void iterator() {}
}

class Items {
    public void next() {}
    public void hasNext() {}
    public void remove() {}
}

class Item {
    public void size() {}
    public void getNodeType() {}
}",0
83316,SerializationUtil,deserialize,"class SerializationUtil {
      public static Object deserialize(byte[] serialized) {
        try {
          ByteArrayInputStream bis = new ByteArrayInputStream(serialized);
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          ObjectInputStream ois = new ClassLoaderObjectInputStream(classLoader, bis);
          Object ret = ois.readObject();
          ois.close();
          return ret;
        } catch (IOException | ClassNotFoundException ioe) {
          throw new RuntimeException(ioe);
        }
      }
}

class Thread {
        public static Thread currentThread() {
            return null;
        }
}",0
83317,StreamsMergeTask,run,"class StreamsMergeTask {
      public void run() {
        while(this.keepRunning.get()) {
          StreamsDatum datum = super.getNextDatum();
          if(datum != null) {
            try {
              super.addToOutgoingQueue(datum);
            } catch (InterruptedException ie) {
              Thread.currentThread().interrupt();
            }
          }
          else {
            try {
              Thread.sleep(this.sleepTime);
            } catch (InterruptedException e) {
              this.keepRunning.set(false);
            }
          }
        }
      }
}

class Thread {
        public static Thread currentThread() {
            return null;
        }
        public static void sleep(long millis, int nanos) throws InterruptedException {
            return;
        }
}",0
83318,ExtensionUtil,addExtension,"class ExtensionUtil {
      public void addExtension(ActivityObject object, String key, Object extension) {
        Map<String,Object> extensions = ensureExtensions(object);
        extensions.put(key, extension);
      }
}

class Extensions {
    public void put() {}
}",0
83319,ExtensionUtil,removeExtension,"class ExtensionUtil {
      public void removeExtension(ActivityObject object, String key) {
        Map<String,Object> extensions = ensureExtensions(object);
        extensions.remove(key);
      }
}

class Extensions {
    public void remove() {}
}",0
83320,ExtensionUtil,setExtensions,"class ExtensionUtil {
      public void setExtensions(ActivityObject object, Map<String, Object> extensions) {
        object.setAdditionalProperty(extensionProperty, extensions);
      }
}

class Object {
    public void setAdditionalProperty() {}
}",0
83321,ExtensionUtil,addExtensions,"class ExtensionUtil {
      public void addExtensions(ActivityObject object, Map<String, Object> extensions) {
        for ( Map.Entry<String, Object> item : extensions.entrySet()) {
          addExtension(object, item.getKey(), item.getValue());
        }
      }
}

class Extensions {
    public void entrySet() {}
}

class Item {
    public void getKey() {}
    public void getValue() {}
}",0
83322,ExtensionUtil,ensureExtensions,"class ExtensionUtil {
      public Map<String, Object> ensureExtensions(ActivityObject object) {
        Map<String,Object> additionalProperties = object.getAdditionalProperties();
        Map<String,Object> extensions;
        if (additionalProperties == null) {
          additionalProperties = new HashMap<>();
        }
        if (StringUtils.isNotBlank(extensionProperty) ) {
          extensions = (Map<String, Object>) additionalProperties.get(extensionProperty);
          if (extensions == null) {
            extensions = new HashMap<>();
            additionalProperties.put(extensionProperty, extensions);
          }
          return extensions;
        } else {
          return additionalProperties;
        }
      }
}

class Object {
    public void getAdditionalProperties() {}
}",0
83323,StreamsDateSerializer,serialize,"class StreamsDateSerializer {
      public void serialize(Date value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
        jgen.writeString(ZonedDateTime.ofInstant(value.toInstant(), ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT));
      }
}

class Value {
    public void toInstant() {}
}",0
83324,StreamsPeriodDeserializer,deserialize,"class StreamsPeriodDeserializer {
      public Period deserialize(JsonParser jpar, DeserializationContext context) throws IOException {
        return Period.millis(jpar.getIntValue());
      }
}

class Period {
    public void millis() {}
}",1
83325,StreamsPeriodSerializer,serialize,"class StreamsPeriodSerializer {
      public void serialize(Period value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
        jgen.writeString(Integer.toString(value.getMillis()));
      }
}

class Value {
    public void getMillis() {}
}",1
83326,StreamsPojoRuleLogger,debug,"class StreamsPojoRuleLogger {
        public void debug(String s) {
            LOGGER.debug(s);
        }
}

class Logger {
    public void debug() {}
}",1
83327,StreamsPojoRuleLogger,error,"class StreamsPojoRuleLogger {
        public void error(String s, Throwable throwable) {
            LOGGER.error(s, throwable);
        }
}

class Logger {
    public void error() {}
}",1
83328,StreamsPojoRuleLogger,info,"class StreamsPojoRuleLogger {
        public void info(String s) {
            LOGGER.info(s);
        }
}

class Logger {
    public void info() {}
}",1
